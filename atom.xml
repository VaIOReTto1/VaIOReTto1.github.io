<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VaIOReTto`Blog</title>
  
  <subtitle>キエテシマオウ.</subtitle>
  <link href="https://vaioretto1.github.io/atom.xml" rel="self"/>
  
  <link href="https://vaioretto1.github.io/"/>
  <updated>2022-12-11T08:33:21.023Z</updated>
  <id>https://vaioretto1.github.io/</id>
  
  <author>
    <name>VaIOReTto</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL学习笔记--常用容器一</title>
    <link href="https://vaioretto1.github.io/posts/f210ebc5.html"/>
    <id>https://vaioretto1.github.io/posts/f210ebc5.html</id>
    <published>2022-12-11T08:28:07.000Z</published>
    <updated>2022-12-11T08:33:21.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、STL初识"><a href="#一、STL初识" class="headerlink" title="一、STL初识"></a><strong>一、STL初识</strong></h2><h3 id="1-STL从广义上分为-容器-container-、算法-algorithm-、迭代器-iterator"><a href="#1-STL从广义上分为-容器-container-、算法-algorithm-、迭代器-iterator" class="headerlink" title="1. STL从广义上分为: 容器(container)、算法(algorithm)、迭代器(iterator)"></a>1. STL从广义上分为: <strong>容器(container)、算法(algorithm)、迭代器(iterator)</strong></h3><h3 id="2-STL几乎所有的代码都采用了模板类或者模板函数"><a href="#2-STL几乎所有的代码都采用了模板类或者模板函数" class="headerlink" title="2. STL几乎所有的代码都采用了模板类或者模板函数"></a>2. STL几乎<strong>所有的代码都采用了</strong>模板类<strong>或者模板</strong>函数</h3><h3 id="3-STL大体分为六大组件，分别是-容器、算法、迭代器、仿函数、适配器、空间配置器"><a href="#3-STL大体分为六大组件，分别是-容器、算法、迭代器、仿函数、适配器、空间配置器" class="headerlink" title="3. STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器、空间配置器"></a>3. STL大体分为<strong>六大组件</strong>，分别是:<strong>容器、算法、迭代器、仿函数、适配器、空间配置器</strong></h3><ul><li><strong>容器</strong>：各种数据结构，如vector、list、deque、set、map等,用来存放数据。 </li><li><strong>算法</strong>：各种常用的算法，如sort、find、copy、for_each等 </li><li><strong>迭代器</strong>：扮演了容器与算法之间的胶合剂。 </li><li><strong>仿函数</strong>：行为类似函数，可作为算法的某种策略。 </li><li><strong>适配器</strong>：一种用来修饰容器或者仿函数或迭代器接口的东西。 </li><li><strong>空间配置器</strong>：负责空间的配置与管理。<h3 id="4-容器"><a href="#4-容器" class="headerlink" title="4. 容器"></a>4. <strong>容器</strong></h3></li><li>STL容器就是将运用最广泛的一些数据结构实现出来  </li><li>常用的数据结构：<strong>数组, 链表,树, 栈, 队列, 集合, 映射表</strong>等  </li><li>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:<br>序列式容器: 强调值的排序，序列式容器中的每个元素均有<strong>固定</strong>的位置。<br>关联式容器: 二叉树结构，各元素之间<strong>没有严格</strong>的物理上的顺序关系。<h3 id="5-算法"><a href="#5-算法" class="headerlink" title="5. 算法"></a>5. <strong>算法</strong></h3>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>：<br>质变算法：是指运算过程中<strong>会更改</strong>区间内的元素的内容。例如拷贝，替换，删除等等。<br>非质变算法：是指运算过程中<strong>不会更改</strong>区间内的元素内容。例如查找、计数、遍历、寻找极值等等。<h3 id="6-迭代器"><a href="#6-迭代器" class="headerlink" title="6.  迭代器"></a>6.  <strong>迭代器</strong></h3></li><li>每个容器都有自己<strong>专属</strong>的迭代器</li><li>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为<strong>指针</strong> </li><li>种类：<table> <tr>    <td>种类</td>    <td>功能</td>    <td>支持运算</td> </tr> <tr>    <td>输入迭代器</td>    <td>对数据的只读访问</td>    <td>只读，支持++、==、！=</td> </tr> <tr>    <td>输出迭代器</td>    <td>对数据的只写访问</td>    <td>只写，支持++</td> </tr> <tr>    <td>前向迭代器</td>    <td>读写操作，并能向前推进迭代器</td>    <td>读写，支持++、==、！=</td> </tr> <tr>    <td>双向迭代器</td>    <td>读写操作，并能向前和向后操作</td>    <td>读写，支持++、–，</td> </tr> <tr>    <td>随机访问迭代器</td>    <td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>    <td>读写，支持++、–、[n]、-n、<、<=、>、>=</td> </tr></table></li></ul><h2 id="二、VECTOR容器"><a href="#二、VECTOR容器" class="headerlink" title="二、VECTOR容器"></a><strong>二、VECTOR容器</strong></h2><h3 id="1-vector容器基本概念"><a href="#1-vector容器基本概念" class="headerlink" title="1. vector容器基本概念"></a><strong>1. vector容器基本概念</strong></h3><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li><li>vector容器的迭代器是支持<strong>随机访问</strong>的迭代器<h3 id="2-vector容器存在内置数据类型"><a href="#2-vector容器存在内置数据类型" class="headerlink" title="2. vector容器存在内置数据类型"></a><strong>2. vector容器存在内置数据类型</strong></h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;<span class="comment">//vector头文件</span></span><br><span class="line">#include &lt;algorithm&gt;<span class="comment">//算法头文件</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int val</span>)&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;<span class="comment">//创建vector容器对象</span></span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);<span class="comment">//向容器中存放数据</span></span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据   </span></span><br><span class="line">        <span class="comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置   </span></span><br><span class="line">        <span class="comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;::iterator itBegin = v.<span class="title function_">begin</span>();</span><br><span class="line">vector&lt;int&gt;::iterator itEnd = v.<span class="title function_">end</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一种遍历方法</span></span><br><span class="line"><span class="keyword">while</span> (itBegin != itEnd)&#123;</span><br><span class="line">cout &lt;&lt; *itBegin &lt;&lt; endl;;</span><br><span class="line">itBegin++;</span><br><span class="line">&#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator itBegin = v.<span class="title function_">begin</span>(); itBegin !=v.<span class="title function_">end</span>();itBegin++)   </span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第三种，使用STL提供的标准遍历算法函数，需要使用算法头文件</span></span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb5cc85df7e64e71a8a10372d4c5a966~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-vector容器存放自定义数据类型"><a href="#3-vector容器存放自定义数据类型" class="headerlink" title="3. vector容器存放自定义数据类型"></a><strong>3. vector容器存放自定义数据类型</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;a&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;b&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;c&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">v.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v.<span class="title function_">push_back</span>(p3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="title class_">Person</span>&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">                cout &lt;&lt; (*it).<span class="property">name</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*it).<span class="property">age</span>&lt;&lt;endl;<span class="comment">//第一种指代方式</span></span><br><span class="line">cout &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;age &lt;&lt; endl;<span class="comment">//第二种</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span> *&gt; vv;</span><br><span class="line"></span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p1);</span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p2);</span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="title class_">Person</span> *&gt;::iterator it = vv.<span class="title function_">begin</span>(); it != vv.<span class="title function_">end</span>(); it++) </span><br><span class="line">                 cout &lt;&lt; (*it)-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;(*it)-&gt;age&lt;&lt;endl;<span class="comment">//仅可用这一种指代</span></span><br><span class="line">&#125;z</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba3133221f0a4525a4263f49e30dea5f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-vector容器嵌套容器"><a href="#4-vector容器嵌套容器" class="headerlink" title="4. vector容器嵌套容器"></a><strong>4. vector容器嵌套容器</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;v;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">vector&lt;int&gt; v2;</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">v1.push_back(i + 1);</span><br><span class="line">v2.push_back(i + 2);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line">        </span><br><span class="line">for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++)</span><br><span class="line">cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c906382c30646cebc700fb858c8c0b0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-vector容器构造函数"><a href="#5-vector容器构造函数" class="headerlink" title="5. vector容器构造函数"></a><strong>5. vector容器构造函数</strong></h3><p>函数原型：</p><ul><li><code>vector&lt;T&gt; v;</code> 采用模板实现类实现，默认构造函数。</li><li><p><code>vector(v.begin(), v.end());</code> 将v[begin(), end())区间中的元素拷贝给本身。</p></li><li><p><code>vector(n, elem);</code> 构造函数将n个elem拷贝给本身。</p></li><li><p><code>vector(const vector &amp;vec);</code> 拷贝构造函数。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">        </span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2(v1);//将v1里的数赋值给v2</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v3(10, 100);//向容器中存放10个100</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v3.begin(); it != v3.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v4(v3.begin(), v3.end());将v3这段区间的数赋值给v4</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v4.begin(); it != v4.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00e34563770748bf900f3464b5736d8c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-vector容器赋值操作"><a href="#6-vector容器赋值操作" class="headerlink" title="6.vector容器赋值操作"></a><strong>6.vector容器赋值操作</strong></h3><p>函数原型：</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code>重载等号操作符。</li><li><p><code>assign(beg, end);</code> 将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> 将n个elem拷贝赋值给本身。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">v2 = v1;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v3;</span><br><span class="line">v3.assign(v1.begin(), v1.end());//vector容器自带函数</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v3.begin(); it != v3.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v4;</span><br><span class="line">v4.assign(10, 100);</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v4.begin(); it != v4.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/567819a9d93c4c1cb8dfb4de95596d19~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-vector容器容量和大小"><a href="#7-vector容器容量和大小" class="headerlink" title="7. vector容器容量和大小"></a><strong>7. vector容器容量和大小</strong></h3><p>函数原型：</p><ul><li><p><code>empty();</code> 判断容器是否为空。</p></li><li><p><code>capacity();</code> 容器的容量。</p></li><li><p><code>size();</code> 返回容器中元素的个数。</p></li><li><p><code>resize(int num);</code> 重新指定容器的长度为num，若容器变长，则以默认值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code> 重新指定容器的长度为num，若容器变长，则以elem值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">if (v1.empty()) cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;//empty()是判断vector容器是否为空的函数</span><br><span class="line">else cout &lt;&lt; &quot;0&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;//capacity为vector容器的容量，是衡量vector容器能存放元素多少的量</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;//size是大小，代指是vector容器现有元素的个数；</span><br><span class="line">        </span><br><span class="line">v1.resize(15);//将vector容器的大小设定为15，多余的容量元素将设为0</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.resize(16,10);//将vector容器的大小设定为16，多余的容量元素将设为10</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.resize(5);//将vector容器的大小设定为5，多余的元素将被删去</span><br><span class="line">print(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ac23c6a216445b69f0aa79c1a45cd5a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="8-vector容器插入和删除"><a href="#8-vector容器插入和删除" class="headerlink" title="8.vector容器插入和删除"></a><strong>8.vector容器插入和删除</strong></h3><p>函数原型：</p><ul><li><p><code>push_back(ele);</code> 尾部插入元素ele。</p></li><li><p><code>pop_back();</code> 删除最后一个元素。</p></li><li><p><code>insert(const_iterator pos, ele);</code> 迭代器指向位置pos插入元素ele。</p></li><li><p><code>insert(const_iterator pos, int count,ele);</code>  迭代器指向位置pos插入count个元素ele。</p></li><li><p><code>erase(const_iterator pos);</code> 删除迭代器指向的元素。</p></li><li><p><code>erase(const_iterator start, const_iterator end);</code> 删除迭代器从start到end之间的元素。</p></li><li><p><code>clear();</code> 删除容器中所有元素。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.insert(v1.begin(), 2, 100);//在vector容器的开头位置插入两个元素100</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.erase(v1.begin());//删除vector容器的开头位置所对应的元素</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.erase(v1.begin(),v1.end());//删除vector区间内的元素</span><br><span class="line">//v1.clear();//删除vector容器所有元素</span><br><span class="line">print(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7c9c242a3fa40bba2b38c4a95f42f71~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="9-vector容器数据存储"><a href="#9-vector容器数据存储" class="headerlink" title="9.vector容器数据存储"></a><strong>9.vector容器数据存储</strong></h3><p>函数原型：</p><ul><li><p><code>at(int idx);</code> 返回索引idx所指的数据。</p></li><li><p><code>operator[];</code> 返回索引idx所指的数据。</p></li><li><p><code>front();</code> 返回容器中第一个数据元素。</p></li><li><p><code>back();</code> 返回容器中最后一个数据元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 10; i++) cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;//第一种类似数组的表达方式</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 10; i++) cout &lt;&lt; v1.at(i)&lt;&lt; &quot; &quot;;//第二种</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; v1.back() &lt;&lt; endl;//vector容器尾端对应的元素</span><br><span class="line">cout &lt;&lt; v1.front() &lt;&lt;endl;//vector容器首端对应的元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a09b9c99810456a922f83fabb65ded1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="10-vector容器数据交换"><a href="#10-vector容器数据交换" class="headerlink" title="10. vector容器数据交换"></a><strong>10. vector容器数据交换</strong></h3><p>函数原型：</p><ul><li><code>swap(vec);</code>  将vec与本身的元素互换。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">for (int i = 10; i &gt; 0; i--) v2.push_back(i);</span><br><span class="line">print(v2);</span><br><span class="line">        </span><br><span class="line">v1.swap(v2);//将v1中的元素与v2交换</span><br><span class="line">print(v1);</span><br><span class="line">print(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test2()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 100000; i++) v1.push_back(i);</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">        /*vector容器会为预留跟大小接近数值的容量，但当大小太大时，</span><br><span class="line">        vector容器不知道需要预留多大的容量，此时为提供比大小多很多的容量*/</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">v1.resize(3);//当容量太大时，这种方法只能改变vector容器的大小，但容量不会变化</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;(v1).swap(v1);/*（v1）是匿名对象，利用v1创建了一个新的对象：</span><br><span class="line">        用拷贝构造函数来创建一个新的对象，新的对象没有名称 ，</span><br><span class="line">        即按照v目前所用的个数来初始化匿名对象的大小。 即大小，容量分配都是3*/</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        test2()</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行效果：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98b7650988a8445aa88e5db12dc0f0f9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="11-vector容器预留空间"><a href="#11-vector容器预留空间" class="headerlink" title="11.vector容器预留空间"></a><strong>11.vector容器预留空间</strong></h3><p>函数原型：</p><ul><li><code>reserve(int len);</code> 容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">int num = <span class="number">0</span>, *p = <span class="variable constant_">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/*当vector容器不知道要存入多少元素时，会先设定一个较小的容量，</span></span><br><span class="line"><span class="comment">        当容量不够时，会再开辟一个容量更大的空间，将vector里的元素存放进去，</span></span><br><span class="line"><span class="comment">        如此反复直至容量大于或等于元素数量*/</span></span><br><span class="line"></span><br><span class="line">v1.<span class="title function_">reserve</span>(<span class="number">10000</span>);</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v1.<span class="title function_">reserve</span>(<span class="number">1000</span>);</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca6fb501a4444008be5d080d148f83c0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="二、STRING容器"><a href="#二、STRING容器" class="headerlink" title="二、STRING容器"></a><strong>二、STRING容器</strong></h2><h3 id="1-string容器基本概念"><a href="#1-string容器基本概念" class="headerlink" title="1. string容器基本概念"></a><strong>1. string容器基本概念</strong></h3><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个<strong>类</strong></li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char <em> 是一个<em>*指针</em></em></li><li>string是一个<strong>类</strong>，类内部封装了char<em>，管理这个字符串，是一个**char</em>型的容器**。</li></ul><p><strong>特点：</strong></p><ul><li>string 类内部封装了很多成员方法</li></ul><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><ul><li>string管理char<em>所分配的内存，不用担心<strong>复制越界</strong>和<em>*取值越界</em></em>等，由类内部进行负责</li></ul><h3 id="2-string容器构造函数"><a href="#2-string容器构造函数" class="headerlink" title="2.string容器构造函数"></a><strong>2.string容器构造函数</strong></h3><p>函数原型：</p><ul><li><p><code>string();</code> 创建一个空的字符串 例如: string str。</p></li><li><p><code>string(const char* s);</code> 使用字符串s初始化。</p></li><li><p><code>string(const string&amp; str);</code> 使用一个string对象初始化另一个string对象。</p></li><li><p><code>string(int n, char c);</code> 使用n个字符c初始化。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">const char* str = &quot;abcd&quot;;</span><br><span class="line">        </span><br><span class="line">string s2(str);</span><br><span class="line">string s3(s2);</span><br><span class="line">string s4(10, &#x27;a&#x27;);</span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; &quot; &quot; &lt;&lt; s3 &lt;&lt; &quot; &quot; &lt;&lt; s4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line">        </span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246d467e5f0e40688b021095511832b3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-string容器赋值操作"><a href="#3-string容器赋值操作" class="headerlink" title="3.string容器赋值操作"></a><strong>3.string容器赋值操作</strong></h3><p>函数原型：</p><ul><li><p><code>string&amp; operator=(const char* s);</code> char*类型字符串 赋值给当前的字符串。</p></li><li><p><code>string&amp; operator=(const string &amp;s);</code> 把字符串s赋给当前的字符串。</p></li><li><p><code>string&amp; operator=(char c);</code> 字符赋值给当前的字符串。</p></li><li><p><code>string&amp; assign(const char *s);</code> 把字符串s赋给当前的字符串。</p></li><li><code>string&amp; assign(const char *s, int n);</code> 把字符串s的前n个字符赋给当前的字符串。</li><li><code>string&amp; assign(const string &amp;s);</code> 把字符串s赋给当前字符串。</li><li><code>string&amp; assign(int n, char c);</code> 用n个字符c赋给当前字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string s1 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">string s2 = s1;</span><br><span class="line">        </span><br><span class="line">string s3;</span><br><span class="line">s3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">string s4;</span><br><span class="line">s4.<span class="title function_">assign</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        </span><br><span class="line">string s5;</span><br><span class="line">s5.<span class="title function_">assign</span>(s1);</span><br><span class="line">        </span><br><span class="line">string s7;</span><br><span class="line">s7.<span class="title function_">assign</span>(<span class="string">&quot;abcdef&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">string s6;</span><br><span class="line">s6.<span class="title function_">assign</span>(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; s1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">        &lt;&lt; s4 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s5 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s6 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fda2306fbc0940dc87b5fc394700417a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-string容器字符串拼接"><a href="#4-string容器字符串拼接" class="headerlink" title="4.string容器字符串拼接"></a>4.string容器字符串拼接</h3><p>函数原型：</p><ul><li><p><code>string&amp; operator+=(const char* str);</code> 重载+=操作符</p></li><li><p><code>string&amp; operator+=(const char c);</code> 重载+=操作符。</p></li><li><code>string&amp; operator+=(const string&amp; str);</code> 重载+=操作符。</li><li><code>string&amp; append(const char *s);</code> 把字符串s连接到当前字符串结尾。</li><li><code>string&amp; append(const char *s, int n);</code> 把字符串s的前n个字符连接到当前字符串结尾。</li><li><code>string&amp; append(const string &amp;s);</code> 同operator+=(const string&amp; str)。</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code> 字符串s中从pos开始的n个字符连接到字符串结尾。</li><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 += <span class="string">&quot;hh&quot;</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 += <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 += str1;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(<span class="string">&quot;xxxx&quot;</span>,<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(str1);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(str1, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef6680ee8c14fc89668eccbfc35dbe4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-string容器查找和替换"><a href="#5-string容器查找和替换" class="headerlink" title="5.string容器查找和替换"></a>5.string容器查找和替换</h3><p>函数原型：</p><ul><li><p><code>int find(const string&amp; str, int pos = 0) const;</code> 查找str第一次出现位置,从pos开始查找。</p></li><li><p><code>int find(const char* s, int pos = 0) const;</code> 查找s第一次出现位置,从pos开始查找。</p></li><li><code>int find(const char* s, int pos, int n) const;</code> 从pos位置查找s的前n个字符第一次位置。</li><li><code>int find(const char c, int pos = 0) const;</code> 查找字符c第一次出现位置。</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code> 查找str最后一次位置,从pos开始查找。</li><li><code>int rfind(const char* s, int pos = npos) const;</code> 查找s最后一次出现位置,从pos开始查找。</li><li><code>int rfind(const char* s, int pos, int n) const;</code> 从pos查找s的前n个字符最后一次位置。</li><li><code>int rfind(const char c, int pos = 0) const;</code> 查找字符c最后一次出现位置。</li><li><code>string&amp; replace(int pos, int n, const string&amp; str);</code> 替换从pos开始n个字符为字符串str。</li><li><code>string&amp; replace(int pos, int n,const char* s);</code> 替换从pos开始的n个字符为字符串s。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test1()&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 = &quot;abcdefde&quot;;</span><br><span class="line">        </span><br><span class="line">int pos = str1.find(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        //若寻找不到，则pos值为-1</span><br><span class="line">        </span><br><span class="line">pos = str1.find(&quot;g&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">pos = str1.rfind(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = &quot;abcdef&quot;;</span><br><span class="line">pos = str1.rfind(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test2()&#123;</span><br><span class="line">string str1 = &quot;abcdef&quot;;</span><br><span class="line">str1.replace(1, 3, &quot;1234&quot;);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        //无论替换元素个数多少，都会将这一区间的元素替换掉</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test1();</span><br><span class="line">    test2();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f0adec6f6da49b4a2e881ea0caedde4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-string容器字符串比较"><a href="#6-string容器字符串比较" class="headerlink" title="6.string容器字符串比较"></a>6.string容器字符串比较</h3><p>函数原型：</p><ul><li><p><code>int compare(const string &amp;s) const;</code> 与字符串s比较。</p></li><li><p><code>int compare(const char *s) const;</code> 与字符串s比较。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str1 = <span class="string">&quot;hellow&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;hellow&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//若str1&gt;str2，则返回1，反则返回-1</span></span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;xellow&quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;hellowe&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;zzzz&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;i&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/*比较原则或从首元素开始比较，但长度相同时首元素一样则继续比较后面元素</span></span><br><span class="line"><span class="comment">        长度不一时，首字母一样且后者也一样则长度长的大或出现元素相比大的大，否则首字母大的大，*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5f49ac9c9a842a19ba4843b81c47214~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-string容器字符存取"><a href="#7-string容器字符存取" class="headerlink" title="7.string容器字符存取"></a>7.string容器字符存取</h3><p>函数原型：</p><ul><li><p><code>char&amp; operator[](int n);</code> 通过[]方式取字符。</p></li><li><p><code>char&amp; at(int n);</code> 通过at方法获取字符。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">cout &lt;&lt; str.<span class="title function_">at</span>(i)&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66baf43e4b6d48f09aa0a8863b055b62~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="8-string容器插入和删除"><a href="#8-string容器插入和删除" class="headerlink" title="8.string容器插入和删除"></a>8.string容器插入和删除</h3><p>函数原型：</p><ul><li><p><code>string&amp; insert(int pos, const char* s);</code> 插入字符串。</p></li><li><p><code>string&amp; insert(int pos, const string&amp; str);</code> 插入字符串。</p></li><li><code>string&amp; insert(int pos, int n, char c);</code> 在指定位置插入n个字符c。</li><li><code>string&amp; erase(int pos, int n = npos);</code> 删除从Pos开始的n个字符。</li><li><code>string&amp; clear();</code> 删除容器中所有元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="title function_">insert</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str.<span class="title function_">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b02ca448d6114d95afe53a640b62380b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="9-string容器子串"><a href="#9-string容器子串" class="headerlink" title="9.string容器子串"></a>9.string容器子串</h3><p>函数原型：</p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> 返回由pos开始的n个字符组成的字符串.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">string email = &quot;violet@cumt.com&quot;;</span><br><span class="line">string username = email.substr(0, email.find(&#x27;@&#x27;));</span><br><span class="line">cout &lt;&lt; &quot;username: &quot; &lt;&lt;username&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        int pos = email.find(&quot;@&quot;); </span><br><span class="line">        username = email.substr(0, pos); </span><br><span class="line">        cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c53d6d5a1c7475caa16a7a7b9cd195a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="三、DEQUE容器"><a href="#三、DEQUE容器" class="headerlink" title="三、DEQUE容器"></a>三、DEQUE容器</h2><h3 id="1-deque容器基本概念"><a href="#1-deque容器基本概念" class="headerlink" title="1.deque容器基本概念"></a>1.deque容器基本概念</h3><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除<strong>效率低</strong>，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque<strong>快</strong>,这和两者内部实现有关</li></ul><p><strong>deque内部工作原理:</strong>  deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放<strong>真实数据</strong>。<br>中控器维护的是每个<strong>缓冲区的地址</strong>，使得使用deque时像一片<strong>连续</strong>的内存空间</p><ul><li>deque容器的迭代器也是支持<strong>随机访问</strong>的<h3 id="2-deque容器构造函数"><a href="#2-deque容器构造函数" class="headerlink" title="2.deque容器构造函数"></a>2.deque容器构造函数</h3>函数原型：</li><li><code>deque&lt;T&gt; deq</code> ; 默认构造形式。</li><li><p><code>deque(beg, end);</code> 构造函数将[beg, end)区间中的元素拷贝给本身。</p></li><li><p><code>deque(n, elem);</code> 构造函数将n个elem拷贝给本身。</p></li><li><code>deque(const deque &amp;deq);</code> 拷贝构造函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2(d1);</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d3(d1.begin(), d1.end());</span><br><span class="line">print(d3);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d4(10,100);</span><br><span class="line">print(d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643d3179b41c4b74991713c7a6815e9b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-string容器赋值操作-1"><a href="#3-string容器赋值操作-1" class="headerlink" title="3.string容器赋值操作"></a>3.string容器赋值操作</h3><p>函数原型：</p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code> 重载等号操作符。</li><li><p><code>assign(beg, end);</code> 将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> 将n个elem拷贝赋值给本身。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d3;       </span><br><span class="line">d3.assign(10,100);</span><br><span class="line">print(d3); </span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d4;</span><br><span class="line">d4.assign(d2.begin(),d2.end());</span><br><span class="line">print(d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1135f177de1640579e02f4c8ecf80965~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-deque容器大小操作"><a href="#4-deque容器大小操作" class="headerlink" title="4.deque容器大小操作"></a>4.deque容器大小操作</h3><p>函数原型：</p><ul><li><p><code>deque.empty();</code> 判断容器是否为空。</p></li><li><p><code>deque.size();</code> 返回容器中元素的个数。</p></li><li><p><code>deque.resize(num);</code> 重新指定容器的长度为num,若容器变长，则以默认值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code> 重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">if (d1.empty()) cout &lt;&lt; &quot;kong&quot; &lt;&lt; endl;</span><br><span class="line">else &#123;</span><br><span class="line">print(d1);</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">                //deque容器没有容量</span><br><span class="line">&#125;</span><br><span class="line">d1.resize(15, 1);</span><br><span class="line">print(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/698e48e243ea46e1935a6db8f51e9580~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-deque容器插入和删除"><a href="#5-deque容器插入和删除" class="headerlink" title="5.deque容器插入和删除"></a>5.deque容器插入和删除</h3><p>函数原型：</p><p> 两端插入操作：</p><ul><li><code>push_back(elem);</code> 在容器尾部添加一个数据。</li><li><code>push_front(elem);</code> 在容器头部插入一个数据。</li><li><code>pop_back();</code> 删除容器最后一个数据。</li><li><p><code>pop_front();</code> 删除容器第一个数据。</p><p>指定位置操作：</p></li><li><p><code>insert(pos,elem);</code> 在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> 在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> 在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> 清空容器的所有数据。</p></li><li><p><code>erase(beg,end);</code> 删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> 删除pos位置的数据，返回下一个数据的位置。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">print(d1)；</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;::iterator it= d1.begin();</span><br><span class="line">it++;</span><br><span class="line">d1.erase(it);</span><br><span class="line">d1.insert(d1.begin(), 2, 100);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2.push_front(1);</span><br><span class="line">d2.push_front(2);</span><br><span class="line">d2.push_back(10);</span><br><span class="line">d2.push_back(20);</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">d2.insert(d2.begin(), d1.begin(), d1.end());</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">d2.clear();</span><br><span class="line">d1.erase(d1.begin(), d1.end());</span><br><span class="line">print(d1);</span><br><span class="line">print(d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca4b493fab2e48ec933437d89221c4f8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-deque容器数据存取"><a href="#6-deque容器数据存取" class="headerlink" title="6.deque容器数据存取"></a>6.deque容器数据存取</h3><p>函数原型：</p><ul><li><p><code>at(int idx);</code> 返回索引idx所指的数据。</p></li><li><p><code>operator[];</code> 返回索引idx所指的数据。</p></li><li><code>front();</code> 返回容器中第一个数据元素。</li><li><code>back();</code> 返回容器中最后一个数据元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">                </span><br><span class="line">for (int i = 0; i &lt; d1.size(); i++)&#123;</span><br><span class="line">cout &lt;&lt; d1[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">                </span><br><span class="line">for (int i = 0; i &lt; d1.size(); i++)&#123;</span><br><span class="line">cout &lt;&lt; d1.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">                </span><br><span class="line">cout &lt;&lt; &quot;1:&quot; &lt;&lt; d1.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2:&quot; &lt;&lt; d1.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29d7ee8fe0104c8db22c4f5214349894~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-deque容器排序操作"><a href="#7-deque容器排序操作" class="headerlink" title="7.deque容器排序操作"></a>7.deque容器排序操作</h3><p>函数原型：</p><ul><li><code>sort(iterator beg, iterator end)</code> 对beg和end区间内元素进行排序。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">                        print(d1);</span><br><span class="line">                        </span><br><span class="line">sort(d1.begin(), d1.end());</span><br><span class="line">print(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1039166b72642b9b40791d51a0d3de7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、STL初识&quot;&gt;&lt;a href=&quot;#一、STL初识&quot; class=&quot;headerlink&quot; title=&quot;一、STL初识&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、STL初识&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-STL从广义上分为-容器-container-、算法</summary>
      
    
    
    
    
    <category term="c++学习笔记" scheme="https://vaioretto1.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于多态的职工管理系统</title>
    <link href="https://vaioretto1.github.io/posts/undefined.html"/>
    <id>https://vaioretto1.github.io/posts/undefined.html</id>
    <published>2022-10-11T13:09:24.000Z</published>
    <updated>2022-12-11T08:27:14.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-项目目的"><a href="#一-项目目的" class="headerlink" title="一. 项目目的"></a>一. 项目目的</h2><p align=left>运用c++实现一个基于多态的职工管理系统</p><p align=left>该系统可以存入、显示、寻找、排序、修改和删除职工等，模拟一个公司职工情况</p><p align=left>该系统具有员工、经理和总裁三个职务，各司其职</p><p align=left>我们将在系统中存入一个个职工，并赋予其各自的职工编号、名字和职务</p><h2 id="二-项目实现"><a href="#二-项目实现" class="headerlink" title="二. 项目实现"></a>二. 项目实现</h2><h3 id="创建项目雏形"><a href="#创建项目雏形" class="headerlink" title=" 创建项目雏形"></a><strong> 创建项目雏形</strong></h3><p>创建一个源文件”职工管理系统.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">       int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:          //退出职工管理系统</span><br><span class="line">break;</span><br><span class="line">case 1:         //添加职工信息</span><br><span class="line">break;</span><br><span class="line">case 2:         //显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:         //删除职工信息</span><br><span class="line">break;</span><br><span class="line">case 4:         //修改职工信息</span><br><span class="line">break;</span><br><span class="line">case 5:         //查找职工信息 </span><br><span class="line">break;</span><br><span class="line">case 6:         //排序职工</span><br><span class="line">break;</span><br><span class="line">               case 7:         //清空所有文档（破产跑路</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立这么一个雏形之后，我们将根据各种功能编写代码</p><h3 id="建立菜单"><a href="#建立菜单" class="headerlink" title=" 建立菜单"></a><strong> 建立菜单</strong></h3><p>首先，我们需创建一个菜单选项供人选择功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align=left>我们可以创建一个头文件"workermanage.h"</p><p align=left>并在里面创建一个类"workermanage", 将菜单放进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pragma once         //该代码作用是防止头文件重复包含</span><br><span class="line">using namespace std;</span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void Show_menu(); //展示菜单</span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>然后创建一个源文件”<em>workermanage.cpp</em>“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::~Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delete[] this-&gt;EmpArray;</span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样第一步就完成了</p><h3 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title=" 实现退出功能"></a><strong> 实现退出功能</strong></h3><p>此时我们可以先在头文件中“workermanage.h”中声明一个退出函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void Show_menu();</span><br><span class="line">void Exit();     //退出系统</span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>然后在源文件”workermanage.cpp”中定义该函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::Exit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;已退出职工管理系统，欢迎下次使用&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);    //该代码起暂停程序的作用，然后按任意键继续</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这样就完成了第二步</p><h3 id="定义职务"><a href="#定义职务" class="headerlink" title=" 定义职务"></a><strong> 定义职务</strong></h3><p align=left>首先我们可以创建一个头文件"worker.h"</p><p align=left>在该头文件中创建一个类"worker"，在类中我们可以实现显示职工信息、获取岗位信息以及对职工编号、名字和岗位信息的声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void Showinfo() = 0;      //显示个人信息</span><br><span class="line">virtual string GetDeptName() = 0; //获取岗位信息</span><br><span class="line">int Id;                           //职工编号</span><br><span class="line">string Name;                      //职工名字</span><br><span class="line">int Deptid;                       //岗位信息</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以员工为例，我们可先创建一个头文件”employee.h”，在头文件里面创建一个类”employee”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class employee :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">employee(int id,string name,int deptid);//函数名需要与类名一致，或者容易出错</span><br><span class="line">void Showinfo();                       </span><br><span class="line">        //记得删掉virtual，否则worlermanager.cpp会出错</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后创建一个源文件”employee.cpp”，在里面定义employee(int id,string name,int deptid)、void Showinfo()和string GetDeptName()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">employee::employee(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void employee::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 完成公司派发的任务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string employee::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;员工&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align=left>经理和总裁同理</p><p><strong>经理</strong>：</p><p>“manage.h”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class manage :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">manage(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>“manage.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;manage.h&quot;</span><br><span class="line"></span><br><span class="line">manage::manage(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line">void manage::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 下放任务给员工，并听从总裁安排&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string manage::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;经理&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总裁</strong>：<br>“boss.h”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">using namespace std;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">class boss :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">boss(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>“boss.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">boss::boss(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line">void boss::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">&lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">&lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; &quot;\t岗位职责： 管理公司各项事务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string boss::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;总裁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加职工"><a href="#添加职工" class="headerlink" title=" 添加职工"></a><strong> 添加职工</strong></h3><p>首先我们需要创建一个文本来存在你所添加的职工信息</p><p>并声明一个函数来判断文件是否存在</p><p>我们可以在头文件”workermanage.h”中定义一个名词来指代该文本</p><p>同时声明职工人数和职工数组指针以及添加职工的函数</p><p>最后我们需要保存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#pragma once //防止头文件重复包含</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#define FILENAME &quot;...txt&quot;   //文本名字可自己任取</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Workermanager();    //判断文本是否存在</span><br><span class="line">int Empnum;         //职工人数</span><br><span class="line">worker **EmpArray;  //职工数组指针</span><br><span class="line">void Add_Emp();     //添加职工</span><br><span class="line">        bool FileIsEmpty;   //判断文本是否为空</span><br><span class="line">        void init_Emp();    //初始化职工文本</span><br><span class="line">int GetEmpnum();    //统计人数</span><br><span class="line">        void save();        //保存文件</span><br><span class="line">        ~Workermanager()；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::init_Emp()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int index = 0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">if (deptid == 1)</span><br><span class="line">&#123;</span><br><span class="line">worker = new employee(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else if (deptid == 2)</span><br><span class="line">&#123;</span><br><span class="line">worker = new manage(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">worker = new boss(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int Workermanager::GetEmpnum()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);  //读取文本里的职工信息</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int num=0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">//判断文件是否存在</span><br><span class="line">if (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0;        //初始化职工人数为0</span><br><span class="line">this-&gt;EmpArray = NULL;   //初始化职工数组指针</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// 判断文件是否为空</span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;  //从文本第一个字符开始读取，若第一个字符不为0，则该文本不为空</span><br><span class="line">if (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int num = this-&gt;GetEmpnum();</span><br><span class="line">cout &lt;&lt; &quot;职工人数为: &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = num;</span><br><span class="line">this-&gt;EmpArray = new worker*[this-&gt;Empnum];  //开辟一个空间</span><br><span class="line">this-&gt;init_Emp();                            //将文件数据存到数组中</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;  职工名字： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;  职工部门编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::save()</span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(FILENAME, ios::out);</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">           //将数据保存进文件中</span><br><span class="line">           ofs &lt;&lt; this-&gt;EmpArray[i]-&gt;Id &lt;&lt; &quot; &quot;</span><br><span class="line">       &lt;&lt; this-&gt;EmpArray[i]-&gt;Name &lt;&lt; &quot; &quot;</span><br><span class="line">       &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Add_Emp()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入添加职工数量： &quot; &lt;&lt; endl;</span><br><span class="line">int addNum = 0;</span><br><span class="line">cin &gt;&gt; addNum;</span><br><span class="line">if (addNum &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">int newSize = this-&gt;Empnum + addNum; //新空间人数=原来的+新的</span><br><span class="line">worker**newSpace=new worker*[newSize];</span><br><span class="line">                //创建一个新空间，并确定该空间人数</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++) //将原数据并入新空间</span><br><span class="line">&#123;</span><br><span class="line">newSpace[i] = this-&gt;EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; addNum; i++) //添加新数据</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int dselect; //部门选择</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工编号&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工名字&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dselect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dselect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(id, name, 1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(id, name, 2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(id, name, 3);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">newSpace[this-&gt;Empnum + i] = worker; //将数据存入新数组中</span><br><span class="line">&#125;</span><br><span class="line">delete[] this-&gt;EmpArray; //释放原有空间</span><br><span class="line">this-&gt;EmpArray = newSpace; //更改新空间的指向</span><br><span class="line">this-&gt;Empnum = newSize; //更新新的职工人数</span><br><span class="line">this-&gt;FileIsEmpty = false; //更新职工不为空标志</span><br><span class="line">cout &lt;&lt; &quot;成功添加&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save(); //保存数据到文件中</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;输入数据有误&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;); //进行清屏操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示职工信息"><a href="#显示职工信息" class="headerlink" title=" 显示职工信息"></a><strong> 显示职工信息</strong></h3><p>在定义职务中我们已经将显示各自职工信息的函数定义完毕</p><p>我们此时只需在头文件”workermanage.h”中声明一个显示职工信息函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void show_Emp();  //显示职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;EmpArray[i]-&gt;Showinfo();   //利用多态调用程序接口</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们的源文件”职工管理系统.cpp”已经可以填充小一半</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit(); //退出程序</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp(); //添加职工</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp(); //显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">                        break;</span><br><span class="line">case 4:</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); //清屏</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除职工"><a href="#删除职工" class="headerlink" title=" 删除职工"></a><strong> 删除职工</strong></h3><p>在删除职工时，我们需要判断该职工是否存在</p><p>我们可以在头文件”workermanage.h”中声明一个判断职工是否存在的函数和一个实现删除职工功能的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      int Isexit(int id); //输入职工编号来判断职工是否存在</span><br><span class="line">      void del_Emp();    //删除职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">int Workermanager::Isexit(int id)</span><br><span class="line">&#123;</span><br><span class="line">int index = -1;</span><br><span class="line">        //在空间中寻找职工</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)  </span><br><span class="line">&#123;</span><br><span class="line">index = i; </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;要删除的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int index = this-&gt;Isexit(id);</span><br><span class="line">if (index != -1)   //寻找到职工</span><br><span class="line">&#123;</span><br><span class="line">for (int i = index; i &lt; this-&gt;Empnum - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[i + 1]; </span><br><span class="line">                                //将数据前移，因为删除一个职工后，我们需要后面的职工来填补空位</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;Empnum--;  //更新数组中职工人数</span><br><span class="line">this-&gt;save();   //将数据更新同步到文件中</span><br><span class="line">cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;删除失败，未寻找到该职工&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改职工信息"><a href="#修改职工信息" class="headerlink" title=" 修改职工信息"></a><strong> 修改职工信息</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个实现修改职工信息的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void mod_Emp();   //修改职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入修改职工的编号：&quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int ret = this-&gt;Isexit(id);</span><br><span class="line">if (ret != -1) </span><br><span class="line">&#123;</span><br><span class="line">delete this-&gt;EmpArray[ret]; //重置该职工信息</span><br><span class="line">int newId;</span><br><span class="line">string newName;</span><br><span class="line">int dSelect;</span><br><span class="line">cout &lt;&lt; &quot;查到： &quot; &lt;&lt; id &lt;&lt; &quot;号职工，请输入新职工号： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newId;</span><br><span class="line">cout &lt;&lt; &quot;请输入新姓名： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newName;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dSelect;</span><br><span class="line">worker *worker = NULL;  </span><br><span class="line">switch (dSelect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[ret] = worker; //更新数据到数组中</span><br><span class="line">cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;修改失败，查无此人&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="寻找职工"><a href="#寻找职工" class="headerlink" title=" 寻找职工"></a><strong> 寻找职工</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个通过职工编号或名字实现查找职工信息的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void fine_Emp(); //查找职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::fine_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入查找的方式： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号查找&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工姓名查找&quot; &lt;&lt; endl;</span><br><span class="line">int input = 0;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; id;</span><br><span class="line">  int ret = Isexit(id);</span><br><span class="line">  if (ret != -1)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，该职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  this-&gt;EmpArray[ret]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125; </span><br><span class="line">                //c/c++中switch语句出现定义需用大括号括起来</span><br><span class="line">case 2:</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工姓名： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  bool flag = false;  //判断是否查到</span><br><span class="line">  for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">  if (this-&gt;EmpArray[i]-&gt;Name == name)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，职工编号为：&quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">       &lt;&lt; &quot;号职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  flag = true;</span><br><span class="line">  this-&gt;EmpArray[i]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (flag == false)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序职工"><a href="#排序职工" class="headerlink" title=" 排序职工"></a><strong> 排序职工</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个通过职工编号对职工今昔降序或升序排序的函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void sort_Emp();   //按编号排序职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><br>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请选择排序方式：&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号进行升序&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工编号进行降序&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int minORmax = i;   //声明最大值或最小值下标</span><br><span class="line">for (int j = i + 1; j &lt; this-&gt;Empnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&gt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&lt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (i != minORmax)</span><br><span class="line">&#123;</span><br><span class="line">worker *temp = this-&gt;EmpArray[i];</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[minORmax];</span><br><span class="line">this-&gt;EmpArray[minORmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;排序成功，排序后结果为：&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">this-&gt;show_Emp(); //已包含清屏操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="清空文本"><a href="#清空文本" class="headerlink" title="清空文本"></a><strong>清空文本</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个实现删除文本的函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void clean_File();  //清空文件（破产跑路</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><br>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::clean_File()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;确定清空？&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.确定&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;0.返回&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  ofstream ofs(FILENAME, ios::trunc);  //删除文本后重新创建文本</span><br><span class="line">  ofs.close();</span><br><span class="line">  if (this-&gt;EmpArray != NULL)</span><br><span class="line">  &#123;</span><br><span class="line">  for (int i = 0; i &lt; this-&gt;Empnum; i++) //删除堆区里的职工</span><br><span class="line">  &#123;</span><br><span class="line">  delete this-&gt;EmpArray[i];</span><br><span class="line">  this-&gt;EmpArray[i] = NULL;</span><br><span class="line">  &#125;</span><br><span class="line">  delete[] this-&gt;EmpArray;              //删除堆区里的数组指针</span><br><span class="line">  this-&gt;EmpArray = NULL;</span><br><span class="line">  this-&gt;Empnum = 0;</span><br><span class="line">  this-&gt;FileIsEmpty = true;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">case 0:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="职工管理系统创建完毕"><a href="#职工管理系统创建完毕" class="headerlink" title="职工管理系统创建完毕"></a>职工管理系统创建完毕</h3><p>最后我们的源文件”职工管理系统.cpp”已经创建完毕了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit();  //退出程序</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp();//添加职工</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp();//显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">WM.del_Emp(); //删除职工</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">WM.mod_Emp();//修改职工</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">WM.fine_Emp();//寻找职工</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">WM.sort_Emp();//排序职工</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">WM.clean_File();//清空文本</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); //清屏</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-源代码显示"><a href="#三-源代码显示" class="headerlink" title="三.源代码显示"></a>三.源代码显示</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h4 id="“boss-h”"><a href="#“boss-h”" class="headerlink" title="“boss.h”"></a>“boss.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">using namespace std;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">class boss :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">boss(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“employee-h”"><a href="#“employee-h”" class="headerlink" title="“employee.h”"></a>“employee.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class employee :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">employee(int id,string name,int deptid);</span><br><span class="line">void Showinfo(); </span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“manage-h”"><a href="#“manage-h”" class="headerlink" title="“manage.h”"></a>“manage.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class manage :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">manage(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“worker-h”"><a href="#“worker-h”" class="headerlink" title="“worker.h”"></a>“worker.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void Showinfo() = 0;</span><br><span class="line">virtual string GetDeptName() = 0; </span><br><span class="line"></span><br><span class="line">int Id;</span><br><span class="line">string Name;</span><br><span class="line">int Deptid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“workermanage-h”"><a href="#“workermanage-h”" class="headerlink" title="“workermanage.h”"></a>“workermanage.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#define FILENAME &quot;empFile.text&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Workermanager();</span><br><span class="line">void Show_menu();</span><br><span class="line">void Exit();</span><br><span class="line">int Empnum; </span><br><span class="line">worker **EmpArray;</span><br><span class="line">void Add_Emp();</span><br><span class="line">void save(); </span><br><span class="line">bool FileIsEmpty; </span><br><span class="line">int GetEmpnum(); </span><br><span class="line">void init_Emp(); </span><br><span class="line">void show_Emp(); </span><br><span class="line">void del_Emp(); </span><br><span class="line">int Isexit(int id); </span><br><span class="line">void mod_Emp(); </span><br><span class="line">void fine_Emp(); </span><br><span class="line">void sort_Emp(); </span><br><span class="line">void clean_File(); </span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><h4 id="“boss-cpp”"><a href="#“boss-cpp”" class="headerlink" title="“boss.cpp”"></a>“boss.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">boss::boss(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void boss::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">             &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 管理公司各项事务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string boss::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;总裁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“employee-cpp”"><a href="#“employee-cpp”" class="headerlink" title="“employee.cpp”"></a>“employee.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">employee::employee(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void employee::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 完成公司派发的任务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string employee::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;员工&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“manage-cpp”"><a href="#“manage-cpp”" class="headerlink" title="“manage.cpp”"></a>“manage.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">include&quot;manage.h&quot;</span><br><span class="line">manage::manage(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void manage::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 下放任务给员工，并听从总裁安排&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string manage::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;经理&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“workermanage-cpp”"><a href="#“workermanage-cpp”" class="headerlink" title="“workermanage.cpp”"></a>“workermanage.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line"></span><br><span class="line">Workermanager::Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">if (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line">if (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int num = this-&gt;GetEmpnum();</span><br><span class="line">cout &lt;&lt; &quot;职工人数为: &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = num;</span><br><span class="line">this-&gt;EmpArray = new worker*[this-&gt;Empnum]; </span><br><span class="line">this-&gt;init_Emp();</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;  职工名字： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;  职工部门编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Exit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;已退出职工管理系统，欢迎下次使用&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Add_Emp()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入添加职工数量： &quot; &lt;&lt; endl;</span><br><span class="line">int addNum = 0;</span><br><span class="line">cin &gt;&gt; addNum;</span><br><span class="line">if (addNum &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">int newSize = this-&gt;Empnum + addNum; </span><br><span class="line">worker**newSpace=new worker*[newSize];</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++) </span><br><span class="line">&#123;</span><br><span class="line">newSpace[i] = this-&gt;EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; addNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int dselect; </span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工编号&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工名字&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dselect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dselect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(id, name, 1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(id, name, 2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(id, name, 3);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">newSpace[this-&gt;Empnum + i] = worker;</span><br><span class="line">&#125;</span><br><span class="line">delete[] this-&gt;EmpArray; </span><br><span class="line">this-&gt;EmpArray = newSpace; </span><br><span class="line">this-&gt;Empnum = newSize; </span><br><span class="line">this-&gt;FileIsEmpty = false; </span><br><span class="line">cout &lt;&lt; &quot;成功添加&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save(); //保存数据到文件中</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;输入数据有误&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::save()</span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(FILENAME, ios::out);</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; this-&gt;EmpArray[i]-&gt;Id &lt;&lt; &quot; &quot;</span><br><span class="line">    &lt;&lt; this-&gt;EmpArray[i]-&gt;Name &lt;&lt; &quot; &quot;</span><br><span class="line">    &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Workermanager::GetEmpnum()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int num=0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::init_Emp()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int index = 0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">if (deptid == 1)</span><br><span class="line">&#123;</span><br><span class="line">worker = new employee(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else if (deptid == 2)</span><br><span class="line">&#123;</span><br><span class="line">worker = new manage(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">worker = new boss(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i]-&gt;Showinfo(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;要删除的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int index = this-&gt;Isexit(id);</span><br><span class="line">if (index != -1) </span><br><span class="line">&#123;</span><br><span class="line">for (int i = index; i &lt; this-&gt;Empnum - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[i + 1]; </span><br><span class="line">&#125;</span><br><span class="line">this-&gt;Empnum--; </span><br><span class="line">this-&gt;save(); </span><br><span class="line">cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;删除失败，未寻找到该职工&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Workermanager::Isexit(int id)</span><br><span class="line">&#123;</span><br><span class="line">int index = -1;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">index = i; </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入修改职工的编号：&quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int ret = this-&gt;Isexit(id);</span><br><span class="line">if (ret != -1) </span><br><span class="line">&#123;</span><br><span class="line">delete this-&gt;EmpArray[ret]; </span><br><span class="line">int newId;</span><br><span class="line">string newName;</span><br><span class="line">int dSelect;</span><br><span class="line">cout &lt;&lt; &quot;查到： &quot; &lt;&lt; id &lt;&lt; &quot;号职工，请输入新职工号： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newId;</span><br><span class="line">cout &lt;&lt; &quot;请输入新姓名： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newName;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dSelect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dSelect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[ret] = worker; </span><br><span class="line">cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;修改失败，查无此人&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::fine_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入查找的方式： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号查找&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工姓名查找&quot; &lt;&lt; endl;</span><br><span class="line">int input = 0;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; id;</span><br><span class="line">  int ret = Isexit(id);</span><br><span class="line">  if (ret != -1)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，该职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  this-&gt;EmpArray[ret]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125; //c/c++中switch语句出现定义需用大括号括起来</span><br><span class="line">case 2:</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工姓名： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  bool flag = false;  </span><br><span class="line">  for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">  if (this-&gt;EmpArray[i]-&gt;Name == name)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，职工编号为：&quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">       &lt;&lt; &quot;号职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  flag = true;</span><br><span class="line">  this-&gt;EmpArray[i]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (flag == false)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Workermanager::sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请选择排序方式：&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号进行升序&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工编号进行降序&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int minORmax = i;</span><br><span class="line">for (int j = i + 1; j &lt; this-&gt;Empnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&gt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&lt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (i != minORmax)</span><br><span class="line">&#123;</span><br><span class="line">worker *temp = this-&gt;EmpArray[i];</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[minORmax];</span><br><span class="line">this-&gt;EmpArray[minORmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;排序成功，排序后结果为：&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">this-&gt;show_Emp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::clean_File()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;确定清空？&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.确定&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;0.返回&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  ofstream ofs(FILENAME, ios::trunc); </span><br><span class="line">  ofs.close();</span><br><span class="line">  if (this-&gt;EmpArray != NULL)</span><br><span class="line">  &#123;</span><br><span class="line">  for (int i = 0; i &lt; this-&gt;Empnum; i++) </span><br><span class="line">  &#123;</span><br><span class="line">  delete this-&gt;EmpArray[i];</span><br><span class="line">  this-&gt;EmpArray[i] = NULL;</span><br><span class="line">  &#125;</span><br><span class="line">  delete[] this-&gt;EmpArray; </span><br><span class="line">  this-&gt;EmpArray = NULL;</span><br><span class="line">  this-&gt;Empnum = 0;</span><br><span class="line">  this-&gt;FileIsEmpty = true;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">case 0:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::~Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delete[] this-&gt;EmpArray;</span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“职工管理系统-cp"><a href="#“职工管理系统-cp" class="headerlink" title="“职工管理系统.cp"></a>“职工管理系统.cp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit();</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp();</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp();</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">WM.del_Emp();</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">WM.mod_Emp();</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">WM.fine_Emp();</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">WM.sort_Emp();</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">WM.clean_File();</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-项目目的&quot;&gt;&lt;a href=&quot;#一-项目目的&quot; class=&quot;headerlink&quot; title=&quot;一. 项目目的&quot;&gt;&lt;/a&gt;一. 项目目的&lt;/h2&gt;&lt;p align=left&gt;运用c++实现一个基于多态的职工管理系统&lt;/p&gt;
&lt;p align=left&gt;该系</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://vaioretto1.github.io/posts/d87f7e0c.html"/>
    <id>https://vaioretto1.github.io/posts/d87f7e0c.html</id>
    <published>2022-10-10T15:00:14.000Z</published>
    <updated>2022-10-10T17:41:24.342Z</updated>
    
    
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/tags/c/"/>
    
  </entry>
  
</feed>
