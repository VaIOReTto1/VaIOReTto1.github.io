<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VaIOReTto`Blog</title>
  
  <subtitle>キエテシマオウ.</subtitle>
  <link href="https://vaioretto1.github.io/atom.xml" rel="self"/>
  
  <link href="https://vaioretto1.github.io/"/>
  <updated>2023-01-11T12:04:30.191Z</updated>
  <id>https://vaioretto1.github.io/</id>
  
  <author>
    <name>VaIOReTto</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter学习笔记-列表</title>
    <link href="https://vaioretto1.github.io/posts/f2a26adf.html"/>
    <id>https://vaioretto1.github.io/posts/f2a26adf.html</id>
    <published>2023-01-11T12:03:55.000Z</published>
    <updated>2023-01-11T12:04:30.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、SingleChildScrollView"><a href="#一、SingleChildScrollView" class="headerlink" title="一、SingleChildScrollView"></a>一、SingleChildScrollView</h1><h2 id="1-SingleChildScrollView"><a href="#1-SingleChildScrollView" class="headerlink" title="1.SingleChildScrollView"></a>1.SingleChildScrollView</h2><ul><li>child（子组件）</li><li><p>scrollDirection（滚动的方向：Axis.vertical|Axis.horizontal）</p></li><li><p>reverse （初始滚动位置：false（头部），true（尾部））</p></li><li><p>padding（内边距）</p></li><li><p>physics</p><ul><li>ClampingScrollPhysics：Android下微光效果</li><li>BouncingScrollPhysics：iOS下弹性效果<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleChildScrollViewDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SingleChildScrollViewDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Stack</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">SingleChildScrollView</span>(</span><br><span class="line">          <span class="attr">scrollDirection</span>: <span class="title class_">Axis</span>.<span class="property">horizontal</span>,</span><br><span class="line">          <span class="attr">reverse</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10</span>),</span><br><span class="line">          <span class="attr">child</span>: <span class="title class_">Row</span>(</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮&quot;</span>)),</span><br><span class="line">              <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮1&quot;</span>)),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">SingleChildScrollView</span>(</span><br><span class="line">          <span class="attr">scrollDirection</span>: <span class="title class_">Axis</span>.<span class="property">vertical</span>,</span><br><span class="line">          <span class="attr">padding</span>: <span class="keyword">const</span> <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10</span>),</span><br><span class="line">          <span class="attr">reverse</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">physics</span>: <span class="keyword">const</span> <span class="title class_">BouncingScrollPhysics</span>(),</span><br><span class="line">          <span class="attr">child</span>: <span class="title class_">Column</span>(</span><br><span class="line">            <span class="attr">children</span>: <span class="title class_">List</span>.<span class="title function_">generate</span>(</span><br><span class="line">              <span class="number">100</span>,</span><br><span class="line">              <span class="function">(<span class="params">index</span>) =&gt;</span></span><br><span class="line">                  <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;按钮$index&quot;</span>)),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2></li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d937c02b6eb4ffda2e2a155643e921f~tplv-k3u1fbpfcp-watermark.image?" alt="88803be9-2ec0-4d4d-bc77-79ae1cd556c9.gif"></p><h1 id="二、ListView"><a href="#二、ListView" class="headerlink" title="二、ListView"></a>二、ListView</h1><h2 id="1-ListView"><a href="#1-ListView" class="headerlink" title="1.ListView"></a>1.ListView</h2><ul><li>ListView<ul><li>加载列表的组件（加载所有Widgets，适用于Widget较少的场景）</li><li>ListTitle（leading，title，subtitle，trailing，selected）</li></ul></li><li>ListView.builder<ul><li>按需加载Widget，性能比默认构造函数高，适用Widget较多的场景</li></ul></li><li>ListView.separated<ul><li>比 ListView.builder多了个分割器<h2 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ListViewDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">SingleChildScrollView</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">Column</span>(</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">ListViewBasic</span>(),</span><br><span class="line">          <span class="title class_">Divider</span>(),</span><br><span class="line">          <span class="title class_">ListViewHorizontal</span>(),</span><br><span class="line">          <span class="title class_">Divider</span>(),</span><br><span class="line">          <span class="title class_">ListViewBuilderDemo</span>(),</span><br><span class="line">          <span class="title class_">Divider</span>(),</span><br><span class="line">          <span class="title class_">ListSeperatedDemo</span>(),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewBasic</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ListViewBasic</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">ListView</span>(</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward_sharp</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&quot;hhh&quot;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&quot;hhh&quot;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">            <span class="attr">selected</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">selectedTileColor</span>: <span class="title class_">Colors</span>.<span class="property">red</span>[<span class="number">100</span>], <span class="comment">//当childre后面接const时不能用[]</span></span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&quot;hhh&quot;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">ac_unit</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&quot;hhh&quot;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">abc</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&quot;hhh&quot;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewHorizontal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ListViewHorizontal</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">ListView</span>(</span><br><span class="line">        <span class="attr">scrollDirection</span>: <span class="title class_">Axis</span>.<span class="property">horizontal</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">amber</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">green</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">grey</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">black</span>,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewBuilderDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  final <span class="title class_">List</span>&lt;<span class="title class_">Widget</span>&gt; users = <span class="keyword">new</span> <span class="title class_">List</span>&lt;<span class="title class_">Widget</span>&gt;.<span class="title function_">generate</span>(</span><br><span class="line">      <span class="number">20</span>, <span class="function">(<span class="params">index</span>) =&gt;</span> <span class="title class_">OutlinedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;商品$index&quot;</span>)));</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">ListView</span>.<span class="title function_">builder</span>(</span><br><span class="line">          <span class="attr">itemCount</span>: users.<span class="property">length</span>,</span><br><span class="line">          <span class="attr">itemExtent</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">20</span>),</span><br><span class="line">          <span class="attr">itemBuilder</span>: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> users[index];</span><br><span class="line">          &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListSeperatedDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  final <span class="title class_">List</span>&lt;<span class="title class_">Widget</span>&gt; users = <span class="keyword">new</span> <span class="title class_">List</span>&lt;<span class="title class_">Widget</span>&gt;.<span class="title function_">generate</span>(</span><br><span class="line">      <span class="number">20</span>,</span><br><span class="line">      <span class="function">(<span class="params">index</span>) =&gt;</span> <span class="title class_">ListTile</span>(</span><br><span class="line">            <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">flutter_dash_sharp</span>),</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&#x27;商品$index&#x27;</span>),</span><br><span class="line">            <span class="attr">subtitle</span>: <span class="title class_">Text</span>(<span class="string">&#x27;xxx&#x27;</span>),</span><br><span class="line">            <span class="attr">trailing</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">chevron_right</span>),</span><br><span class="line">          ));</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="title class_">Widget</span> dividerone = <span class="title class_">Divider</span>(</span><br><span class="line">      <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">      <span class="attr">thickness</span>: <span class="number">2</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="title class_">Widget</span> dividertwo = <span class="title class_">Divider</span>(</span><br><span class="line">      <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">      <span class="attr">thickness</span>: <span class="number">2</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">ListTile</span>(</span><br><span class="line">          <span class="attr">title</span>: <span class="title class_">Text</span>(<span class="string">&#x27;商品列表&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">height</span>: <span class="number">150</span>,</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">ListView</span>.<span class="title function_">separated</span>(</span><br><span class="line">              <span class="attr">itemCount</span>: users.<span class="property">length</span>,</span><br><span class="line">              <span class="attr">itemBuilder</span>: (context, index) &#123;</span><br><span class="line">                <span class="keyword">return</span> users[index];</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">separatorBuilder</span>: (context, index) &#123;</span><br><span class="line">                <span class="keyword">return</span> index % <span class="number">2</span> == <span class="number">0</span> ? dividerone : dividertwo;</span><br><span class="line">              &#125;,</span><br><span class="line">            ))</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-效果-1"><a href="#3-效果-1" class="headerlink" title="3.效果"></a>3.效果</h2></li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e86de059dc642d1bff8919451c83983~tplv-k3u1fbpfcp-watermark.image?" alt="cc666ad1-28b5-4fe7-b9e0-5e77cfef699d.gif"></p><h1 id="三、GridView"><a href="#三、GridView" class="headerlink" title="三、GridView"></a>三、GridView</h1><h2 id="1-GridView"><a href="#1-GridView" class="headerlink" title="1.GridView"></a>1.GridView</h2><ul><li>GridView<ul><li>children（子组件）</li><li>scrollDirection（滚动方向）</li><li>gridDelegate<ul><li>SliverGridDelegateWithFixedCrossAxisCount（指定列数 - 子组件宽度自适应）</li><li>SliverGridDelegateWithMaxCrossAxisCount（指定子组件宽度，列数自适应）</li></ul></li></ul></li><li>GridView.count（列数固定）</li><li>GridView.extend（子组件宽度固定）</li><li>GridView.builder（动态网格布局）  <h2 id="2-代码-2"><a href="#2-代码-2" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GridViewDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">GridViewDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10</span>),</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">GridView</span>(</span><br><span class="line">        <span class="attr">gridDelegate</span>: <span class="title class_">SliverGridDelegateWithFixedCrossAxisCount</span>(</span><br><span class="line">          <span class="attr">crossAxisCount</span>: <span class="number">2</span>, <span class="comment">//指定列数</span></span><br><span class="line">          <span class="attr">mainAxisSpacing</span>: <span class="number">20</span>, <span class="comment">//主轴方向的间距</span></span><br><span class="line">          <span class="attr">crossAxisSpacing</span>: <span class="number">10</span>, <span class="comment">//交叉轴的间距</span></span><br><span class="line">          <span class="attr">childAspectRatio</span>: <span class="number">1.5</span>, <span class="comment">//子组件的宽高比例</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">tealAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">amberAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">redAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blueGrey</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">pinkAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightGreenAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">limeAccent</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blueGrey</span>),</span><br><span class="line">          <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">pinkAccent</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">/*GridView(</span></span><br><span class="line"><span class="comment">        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(</span></span><br><span class="line"><span class="comment">          maxCrossAxisExtent: 190,</span></span><br><span class="line"><span class="comment">          mainAxisSpacing: 30,</span></span><br><span class="line"><span class="comment">          crossAxisSpacing: 10,</span></span><br><span class="line"><span class="comment">          childAspectRatio: .8,</span></span><br><span class="line"><span class="comment">        ),</span></span><br><span class="line"><span class="comment">        children: [</span></span><br><span class="line"><span class="comment">          Container(color: Colors.tealAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.amberAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.redAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.blueGrey),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.pinkAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.lightGreenAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.limeAccent),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.blueGrey),</span></span><br><span class="line"><span class="comment">          Container(color: Colors.pinkAccent),</span></span><br><span class="line"><span class="comment">        ],),*/</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrideViewCountDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">GrideViewCountDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">GridView</span>.<span class="title function_">count</span>(</span><br><span class="line">        <span class="attr">children</span>: <span class="title class_">List</span>.<span class="title function_">generate</span>(<span class="number">16</span>, <span class="function">(<span class="params">index</span>) =&gt;</span> <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>)),</span><br><span class="line">        <span class="attr">crossAxisCount</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">mainAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">crossAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">symmetric</span>(<span class="attr">horizontal</span>: <span class="number">40</span>),</span><br><span class="line">        <span class="attr">childAspectRatio</span>: <span class="number">1.5</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrideViewExtentDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">GrideViewExtentDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">GridView</span>.<span class="title function_">extent</span>(</span><br><span class="line">        <span class="attr">children</span>: <span class="title class_">List</span>.<span class="title function_">generate</span>(<span class="number">16</span>, <span class="function">(<span class="params">index</span>) =&gt;</span> <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>)),</span><br><span class="line">        <span class="attr">maxCrossAxisExtent</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">mainAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">crossAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">symmetric</span>(<span class="attr">horizontal</span>: <span class="number">40</span>),</span><br><span class="line">        <span class="attr">childAspectRatio</span>: <span class="number">1.5</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrideViewBuilderDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  final <span class="title class_">List</span>&lt;dynamic&gt; _tiles = [</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">tealAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">amberAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">redAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blueGrey</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">pinkAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightGreenAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">limeAccent</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blueGrey</span>),</span><br><span class="line">    <span class="title class_">Container</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">pinkAccent</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">GridView</span>.<span class="title function_">builder</span>(</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">symmetric</span>(<span class="attr">horizontal</span>: <span class="number">40</span>),</span><br><span class="line">        <span class="attr">gridDelegate</span>: <span class="title class_">SliverGridDelegateWithFixedCrossAxisCount</span>(</span><br><span class="line">          <span class="attr">crossAxisCount</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">mainAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">crossAxisSpacing</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">childAspectRatio</span>: <span class="number">1.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">itemCount</span>: _tiles.<span class="property">length</span>,</span><br><span class="line">        <span class="attr">itemBuilder</span>: (context, index) &#123;</span><br><span class="line">          <span class="keyword">return</span> _tiles[index];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">physics</span>: <span class="title class_">BouncingScrollPhysics</span>(), <span class="comment">//反弹效果，允许拉出边界</span></span><br><span class="line">        <span class="comment">//physics: ClampingScrollPhysics(),//夹住效果，不允许拉出边界</span></span><br><span class="line">        <span class="comment">//physics: NeverScrollableScrollPhysics(),//不允许滚动</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-效果-2"><a href="#3-效果-2" class="headerlink" title="3.效果"></a>3.效果</h2>| GridView | GridView.count | GridView.extend | GridView.builder |<br>| —- | —- |—- |—- |<br>|  <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c90c9ed1075e4b2686ca90f63d7b2b5f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png">| <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f9239a723744e66b1251616ceebaae7~tplv-k3u1fbpfcp-watermark.image?" alt="43394792-e156-4fd4-ac6c-40a19b33d812.gif"> |<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54e51d1c64394fe0814b75e2acab1005~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"> | <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7cd78c560dd40aaa712145d440376b2~tplv-k3u1fbpfcp-watermark.image?" alt="1342f0b4-1711-442e-86e7-51e68e68998b.gif"> |</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、SingleChildScrollView&quot;&gt;&lt;a href=&quot;#一、SingleChildScrollView&quot; class=&quot;headerlink&quot; title=&quot;一、SingleChildScrollView&quot;&gt;&lt;/a&gt;一、SingleChildScro</summary>
      
    
    
    
    <category term="flutter" scheme="https://vaioretto1.github.io/categories/flutter/"/>
    
    
    <category term="flutter学习笔记" scheme="https://vaioretto1.github.io/tags/flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习笔记-按钮</title>
    <link href="https://vaioretto1.github.io/posts/2dba342f.html"/>
    <id>https://vaioretto1.github.io/posts/2dba342f.html</id>
    <published>2023-01-11T12:03:42.000Z</published>
    <updated>2023-01-11T12:04:58.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、IconButton"><a href="#一、IconButton" class="headerlink" title="一、IconButton"></a>一、IconButton</h1><ul><li><p>IconButton</p></li><li><p>IconButton</p></li><li>TextButton（扁平按钮）.icon（）</li><li>ElevatedButton（漂浮按钮）.icon（）</li><li>OutlinedButton（线框按钮）.icon（）</li></ul><h1 id="二、ButtonBar（按钮组）"><a href="#二、ButtonBar（按钮组）" class="headerlink" title="二、ButtonBar（按钮组）"></a>二、ButtonBar（按钮组）</h1><h1 id="三、FloatingActionButton（浮动按钮）"><a href="#三、FloatingActionButton（浮动按钮）" class="headerlink" title="三、FloatingActionButton（浮动按钮）"></a>三、FloatingActionButton（浮动按钮）</h1><h1 id="四、BackButton（回退按钮）"><a href="#四、BackButton（回退按钮）" class="headerlink" title="四、BackButton（回退按钮）"></a>四、BackButton（回退按钮）</h1><h1 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">runApp</span>(<span class="title class_">MyApp</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> <span class="title class_">MaterialApp</span>(</span><br><span class="line">      <span class="attr">debugShowCheckedModeBanner</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">home</span>: <span class="title class_">HomePage</span>(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomePage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">HomePage</span>(&#123;<span class="variable language_">super</span>.<span class="property">key</span>&#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Scaffold</span>(</span><br><span class="line">      <span class="attr">appBar</span>: <span class="title class_">AppBar</span>(</span><br><span class="line">        <span class="attr">title</span>: <span class="keyword">const</span> <span class="title class_">Text</span>(<span class="string">&quot;learn1&quot;</span>),</span><br><span class="line">        <span class="attr">leading</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">menu</span>),</span><br><span class="line">        <span class="attr">actions</span>: [<span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">settings</span>)],</span><br><span class="line">        <span class="attr">elevation</span>: <span class="number">10.0</span>,</span><br><span class="line">        <span class="attr">centerTitle</span>: <span class="literal">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">ButtonDemo</span>(),</span><br><span class="line">      <span class="attr">floatingActionButton</span>: <span class="title class_">FloatingActionButton</span>(</span><br><span class="line">        <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">        <span class="attr">tooltip</span>: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        <span class="attr">child</span>: <span class="title class_">Icon</span>(<span class="title class_">CupertinoIcons</span>.<span class="property">add</span>),</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">green</span>,</span><br><span class="line">        <span class="attr">elevation</span>: <span class="number">0</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ButtonDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10</span>),</span><br><span class="line">        <span class="attr">child</span>: <span class="title class_">Wrap</span>(<span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">ElevatedButton</span>(</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;点击ElevatedButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLongPress</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;长按ElevatedButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;漂浮按钮&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">TextButton</span>(</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;点击TextButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLongPress</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;长按TextButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;扁平按钮&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">OutlinedButton</span>(</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;点击OutlinedButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLongPress</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&#x27;长按OutlinedButton&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;线框按钮&quot;</span>),</span><br><span class="line">            <span class="attr">style</span>: <span class="title class_">ButtonStyle</span>(</span><br><span class="line">                <span class="attr">textStyle</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">TextStyle</span>(<span class="attr">fontSize</span>: <span class="number">30</span>)),</span><br><span class="line">                <span class="attr">foregroundColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">resolveWith</span>((states) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (states.<span class="title function_">contains</span>(<span class="title class_">MaterialState</span>.<span class="property">pressed</span>)) &#123;</span><br><span class="line">                    <span class="comment">//按下按钮时的颜色</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Colors</span>.<span class="property">yellow</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">//默认状态的颜色</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="title class_">Colors</span>.<span class="property">blue</span>;</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">resolveWith</span>((states) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (states.<span class="title function_">contains</span>(<span class="title class_">MaterialState</span>.<span class="property">pressed</span>)) &#123;</span><br><span class="line">                    <span class="comment">//按下按钮时的颜色</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Colors</span>.<span class="property">yellow</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">//默认状态的颜色</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="title class_">Colors</span>.<span class="property">white</span>;</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="attr">shadowColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">Colors</span>.<span class="property">yellow</span>),</span><br><span class="line">                <span class="attr">elevation</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="number">20</span>),</span><br><span class="line">                <span class="attr">side</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(</span><br><span class="line">                    <span class="title class_">BorderSide</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">green</span>, <span class="attr">width</span>: <span class="number">2</span>)),</span><br><span class="line">                <span class="comment">//声明按钮形状</span></span><br><span class="line">                <span class="attr">shape</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">StadiumBorder</span>(</span><br><span class="line">                    <span class="attr">side</span>: <span class="title class_">BorderSide</span>(<span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">green</span>, <span class="attr">width</span>: <span class="number">2</span>))),</span><br><span class="line">                <span class="comment">//设置按钮大小</span></span><br><span class="line">                <span class="attr">minimumSize</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">Size</span>(<span class="number">200</span>, <span class="number">100</span>)),</span><br><span class="line">                <span class="comment">//设置水波纹的颜色</span></span><br><span class="line">                <span class="attr">overlayColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">Colors</span>.<span class="property">purple</span>)),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">OutlinedButtonTheme</span>(</span><br><span class="line">            <span class="attr">data</span>: <span class="title class_">OutlinedButtonThemeData</span>(</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">ButtonStyle</span>(</span><br><span class="line">                    <span class="attr">overlayColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">Colors</span>.<span class="property">red</span>))),</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">OutlinedButton</span>(</span><br><span class="line">              <span class="attr">onPressed</span>: () &#123;</span><br><span class="line">                <span class="title function_">print</span>(<span class="string">&#x27;点击OutlinedButton&#x27;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">onLongPress</span>: () &#123;</span><br><span class="line">                <span class="title function_">print</span>(<span class="string">&#x27;长按OutlinedButton&#x27;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&quot;线框按钮&quot;</span>),</span><br><span class="line">              <span class="attr">style</span>: <span class="title class_">ButtonStyle</span>(</span><br><span class="line">                  <span class="attr">overlayColor</span>: <span class="title class_">MaterialStateProperty</span>.<span class="title function_">all</span>(<span class="title class_">Colors</span>.<span class="property">blue</span>)),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">IconButton</span>(</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;</span><br><span class="line">              <span class="title function_">print</span>(<span class="string">&quot;点击IconButton&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">icon</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">home</span>),</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">            <span class="attr">splashColor</span>: <span class="title class_">Colors</span>.<span class="property">lightBlue</span>,</span><br><span class="line">            <span class="attr">highlightColor</span>: <span class="title class_">Colors</span>.<span class="property">purple</span>,</span><br><span class="line">            <span class="attr">tooltip</span>: <span class="string">&#x27;怎么了&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">TextButton</span>.<span class="title function_">icon</span>(</span><br><span class="line">              <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">              <span class="attr">icon</span>: <span class="title class_">Icon</span>(<span class="title class_">CupertinoIcons</span>.<span class="property">add_circled</span>),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;扁平按钮&#x27;</span>)),</span><br><span class="line">          <span class="title class_">ElevatedButton</span>.<span class="title function_">icon</span>(</span><br><span class="line">              <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">              <span class="attr">icon</span>: <span class="title class_">Icon</span>(<span class="title class_">CupertinoIcons</span>.<span class="property">add_circled</span>),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;漂浮按钮&#x27;</span>)),</span><br><span class="line">          <span class="title class_">OutlinedButton</span>.<span class="title function_">icon</span>(</span><br><span class="line">              <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">              <span class="attr">icon</span>: <span class="title class_">Icon</span>(<span class="title class_">CupertinoIcons</span>.<span class="property">add_circled</span>),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;线框按钮&#x27;</span>)),</span><br><span class="line">          <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">pink</span>[<span class="number">100</span>],</span><br><span class="line">            <span class="attr">width</span>: double.<span class="property">infinity</span>,</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">ButtonBar</span>(</span><br><span class="line">              <span class="attr">children</span>: [</span><br><span class="line">                <span class="title class_">ElevatedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;按钮一&#x27;</span>)),</span><br><span class="line">                <span class="title class_">ElevatedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;按钮二&#x27;</span>)),</span><br><span class="line">                <span class="title class_">ElevatedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;按钮三&#x27;</span>)),</span><br><span class="line">                <span class="title class_">ElevatedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;按钮四&#x27;</span>)),</span><br><span class="line">                <span class="title class_">ElevatedButton</span>(<span class="attr">onPressed</span>: () &#123;&#125;, <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;按钮五&#x27;</span>)),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">BackButton</span>(</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">CloseButton</span>(</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">            <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">          )</span><br><span class="line">        ]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、效果"><a href="#六、效果" class="headerlink" title="六、效果"></a>六、效果</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd236a08ffe44eb879312b86a3dc2de~tplv-k3u1fbpfcp-watermark.image?" alt="045c4d0c-8cc9-4679-a38f-2aa8f7053808.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、IconButton&quot;&gt;&lt;a href=&quot;#一、IconButton&quot; class=&quot;headerlink&quot; title=&quot;一、IconButton&quot;&gt;&lt;/a&gt;一、IconButton&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IconButton&lt;/p&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    <category term="flutter" scheme="https://vaioretto1.github.io/categories/flutter/"/>
    
    
    <category term="flutter学习笔记" scheme="https://vaioretto1.github.io/tags/flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习笔记--布局</title>
    <link href="https://vaioretto1.github.io/posts/21998839.html"/>
    <id>https://vaioretto1.github.io/posts/21998839.html</id>
    <published>2023-01-10T13:16:48.000Z</published>
    <updated>2023-01-10T13:19:39.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、线性布局"><a href="#一、线性布局" class="headerlink" title="一、线性布局"></a>一、线性布局</h1><h2 id="1-Column"><a href="#1-Column" class="headerlink" title="1.Column"></a>1.Column</h2><ul><li><p>Column中的主轴方向是垂直方向</p></li><li><p>mainAxisAlignment：MainAxisAlignment-主轴对齐方向</p></li><li>crossAxisAlignment：CrossAxisAlignment-交叉轴对齐方向</li><li>children：内容<h2 id="2-Row"><a href="#2-Row" class="headerlink" title="2.Row"></a>2.Row</h2></li><li>Row中的主轴方向是水平方向（其他属性与cross一致）<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ColumnRowDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ColumnRowDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightGreen</span>,</span><br><span class="line">      <span class="attr">width</span>: double.<span class="property">infinity</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">Column</span>(</span><br><span class="line">        <span class="attr">mainAxisAlignment</span>: <span class="title class_">MainAxisAlignment</span>.<span class="property">spaceEvenly</span>,</span><br><span class="line">        <span class="attr">crossAxisAlignment</span>: <span class="title class_">CrossAxisAlignment</span>.<span class="property">center</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">access_alarm</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">          <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">          <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">settings</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">          <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">add_a_photo</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">          <span class="title class_">Row</span>(</span><br><span class="line">            <span class="attr">mainAxisAlignment</span>: <span class="title class_">MainAxisAlignment</span>.<span class="property">spaceBetween</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">access_alarm</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">              <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">              <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">settings</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">              <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">add_a_photo</span>,<span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4d667ba51de450ead68fddacddbe048~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="二、弹性布局"><a href="#二、弹性布局" class="headerlink" title="二、弹性布局"></a>二、弹性布局</h1><h2 id="1-Flex"><a href="#1-Flex" class="headerlink" title="1.Flex"></a>1.Flex</h2><ul><li><p>direction（声明主轴方向）</p></li><li><p>mainAxisAlignment（声明主轴对齐方向）</p></li><li>textDirection（声明水平方向的排列顺序）</li><li>crossAxisAlignment（声明交叉方向轴对齐方式）</li><li>verticalDirection（声明垂直方向的排列顺序）</li><li>children（声明子组件）<h2 id="2-Expanded（可伸缩组件）"><a href="#2-Expanded（可伸缩组件）" class="headerlink" title="2.Expanded（可伸缩组件）"></a>2.Expanded（可伸缩组件）</h2></li><li>flex（声明弹性布局所占比例）</li><li>child（声明子组件）<h2 id="3-代码-1"><a href="#3-代码-1" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlexDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">FlexDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">Row</span>(</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            <span class="title class_">Container</span>(</span><br><span class="line">              <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightBlue</span>,</span><br><span class="line">              <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">              <span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Expanded</span>(</span><br><span class="line">              <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightGreen</span>,</span><br><span class="line">                <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Flex</span>(</span><br><span class="line">          <span class="attr">direction</span>: <span class="title class_">Axis</span>.<span class="property">horizontal</span>,</span><br><span class="line">          <span class="attr">mainAxisAlignment</span>: <span class="title class_">MainAxisAlignment</span>.<span class="property">spaceAround</span>,</span><br><span class="line">          <span class="attr">textDirection</span>: <span class="title class_">TextDirection</span>.<span class="property">rtl</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">access_alarm</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">accessible_forward</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">settings</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">            <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">add_a_photo</span>, <span class="attr">size</span>: <span class="number">50</span>),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Flex</span>(</span><br><span class="line">          <span class="attr">direction</span>: <span class="title class_">Axis</span>.<span class="property">horizontal</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            <span class="title class_">Expanded</span>(</span><br><span class="line">              <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">tealAccent</span>,</span><br><span class="line">                <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">flex</span>: <span class="number">2</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Expanded</span>(</span><br><span class="line">              <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">yellow</span>,</span><br><span class="line">                <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Container</span>(</span><br><span class="line">            <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">margin</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">50</span>),</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Flex</span>(</span><br><span class="line">              <span class="attr">direction</span>: <span class="title class_">Axis</span>.<span class="property">vertical</span>,</span><br><span class="line">              <span class="attr">verticalDirection</span>: <span class="title class_">VerticalDirection</span>.<span class="property">up</span>,</span><br><span class="line">              <span class="attr">children</span>: [</span><br><span class="line">                <span class="title class_">Expanded</span>(</span><br><span class="line">                  <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">                    <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">tealAccent</span>,</span><br><span class="line">                    <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  <span class="attr">flex</span>: <span class="number">2</span>,</span><br><span class="line">                ),</span><br><span class="line">                <span class="title class_">Spacer</span>(</span><br><span class="line">                  <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">                ),</span><br><span class="line">                <span class="title class_">Expanded</span>(</span><br><span class="line">                  <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">                    <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">yellow</span>,</span><br><span class="line">                    <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果-1"><a href="#4-效果-1" class="headerlink" title="4.效果"></a>4.效果</h2></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6eaab466f8ac423ebab55d1d11321d83~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="三、流式布局"><a href="#三、流式布局" class="headerlink" title="三、流式布局"></a>三、流式布局</h1><h2 id="1-Wrap（解决内容溢出问题）"><a href="#1-Wrap（解决内容溢出问题）" class="headerlink" title="1.Wrap（解决内容溢出问题）"></a>1.Wrap（解决内容溢出问题）</h2><ul><li><p>spacing （主轴方向子组件的间距） </p></li><li><p>runSpacing （纵轴方向子组件的间距）</p></li><li>alignment （主轴方向子组件的对齐方式）</li><li>runAlignment （纵轴方向子组件的对齐方式）<h2 id="2-Chip（标签）"><a href="#2-Chip（标签）" class="headerlink" title="2.Chip（标签）"></a>2.Chip（标签）</h2><h2 id="3-CircleAvatar（圆形头像）"><a href="#3-CircleAvatar（圆形头像）" class="headerlink" title="3.CircleAvatar（圆形头像）"></a>3.CircleAvatar（圆形头像）</h2><h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WrapDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="title class_">List</span>&lt;<span class="title class_">String</span>&gt; _list=[</span><br><span class="line">    <span class="string">&#x27;曹操&#x27;</span>,<span class="string">&#x27;司马懿&#x27;</span>,<span class="string">&#x27;曹仁&#x27;</span>,<span class="string">&#x27;曹洪&#x27;</span>,<span class="string">&#x27;张辽&#x27;</span>,<span class="string">&#x27;许褚&#x27;</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="title class_">List</span>&lt;<span class="title class_">Widget</span>&gt; <span class="title function_">_weiGuo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> _list.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Chip</span>(</span><br><span class="line">      <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">        <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;魏&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">label</span>: <span class="title class_">Text</span>(item),</span><br><span class="line">    )).<span class="title function_">toList</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">mainAxisAlignment</span>: <span class="title class_">MainAxisAlignment</span>.<span class="property">spaceEvenly</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">Wrap</span>(</span><br><span class="line">          <span class="attr">children</span>: <span class="title function_">_weiGuo</span>(),</span><br><span class="line">          <span class="attr">spacing</span>: <span class="number">18.0</span>,</span><br><span class="line">          <span class="attr">runSpacing</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">alignment</span>: <span class="title class_">WrapAlignment</span>.<span class="property">spaceAround</span>,</span><br><span class="line">          <span class="attr">runAlignment</span>: <span class="title class_">WrapAlignment</span>.<span class="property">spaceAround</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Wrap</span>(</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;刘备&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;关羽&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;张飞&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;赵云&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;诸葛亮&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Chip</span>(</span><br><span class="line">              <span class="attr">avatar</span>: <span class="title class_">CircleAvatar</span>(</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span>,</span><br><span class="line">                <span class="attr">child</span>: <span class="title class_">Text</span>(<span class="string">&#x27;蜀&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">label</span>: <span class="title class_">Text</span>(<span class="string">&#x27;黄忠&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-效果"><a href="#5-效果" class="headerlink" title="5.效果"></a>5.效果</h2></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e373a9a9c50a42d08c76b01f438bf1b4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="四、层叠布局"><a href="#四、层叠布局" class="headerlink" title="四、层叠布局"></a>四、层叠布局</h1><h2 id="1-Stack（层叠组件）"><a href="#1-Stack（层叠组件）" class="headerlink" title="1.Stack（层叠组件）"></a>1.Stack（层叠组件）</h2><ul><li>alignment（声明未定位子组件的对齐方式）</li><li>textDirection（声明未定位子组件的排列顺序）<h2 id="2-Positioned（绝对定位组件）"><a href="#2-Positioned（绝对定位组件）" class="headerlink" title="2.Positioned（绝对定位组件）"></a>2.Positioned（绝对定位组件）</h2></li><li>child（声明子组件）</li><li>left、top、right、bottom</li><li>width、height<h2 id="3-NetworkImage（网络图片组件）"><a href="#3-NetworkImage（网络图片组件）" class="headerlink" title="3.NetworkImage（网络图片组件）"></a>3.NetworkImage（网络图片组件）</h2></li><li>NetworkImage（’图片地址’）<h2 id="4-代码-1"><a href="#4-代码-1" class="headerlink" title="4.代码"></a>4.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stackdemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Stackdemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">Stack</span>(</span><br><span class="line">        <span class="attr">textDirection</span>: <span class="title class_">TextDirection</span>.<span class="property">rtl</span>,</span><br><span class="line">        <span class="attr">alignment</span>: <span class="title class_">AlignmentDirectional</span>.<span class="property">bottomEnd</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="title class_">CircleAvatar</span>(</span><br><span class="line">            <span class="attr">backgroundImage</span>: <span class="title class_">NetworkImage</span>(<span class="string">&#x27;https://s1.ax1x.com/2022/10/31/xTY0Bt.jpg&#x27;</span>),</span><br><span class="line">            <span class="attr">radius</span>: <span class="number">200</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Positioned</span>(</span><br><span class="line">            <span class="attr">child</span>: <span class="title class_">Container</span>(</span><br><span class="line">              <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">black12</span>,</span><br><span class="line">              <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10</span>),</span><br><span class="line">              <span class="attr">child</span>: <span class="title class_">Text</span>(</span><br><span class="line">                <span class="string">&#x27;薇尔莉特&#x27;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                  <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">white</span>,</span><br><span class="line">                  <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="attr">top</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="number">40</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="title class_">Text</span>(</span><br><span class="line">            <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">            <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">black</span>,</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-效果-1"><a href="#5-效果-1" class="headerlink" title="5.效果"></a>5.效果</h2></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51760f73b41842e5ad58a8e95c93fbd3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="五、Card"><a href="#五、Card" class="headerlink" title="五、Card"></a>五、Card</h1><h2 id="1-Card（卡片）"><a href="#1-Card（卡片）" class="headerlink" title="1.Card（卡片）"></a>1.Card（卡片）</h2><ul><li>child（子组件）</li><li>color（背景色）</li><li>shadowColor（阴影色）</li><li>elevation（阴影高度）</li><li>shape（边框样式）</li><li>margin（外边距）<h2 id="2-ListTile（列表瓦片）"><a href="#2-ListTile（列表瓦片）" class="headerlink" title="2.ListTile（列表瓦片）"></a>2.ListTile（列表瓦片）</h2></li><li>leading（头部组件）</li><li>title（标题）</li><li>subtitle（子标题）<h2 id="3-代码-2"><a href="#3-代码-2" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CartDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">CartDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">Card</span>(</span><br><span class="line">          <span class="attr">margin</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">30</span>),</span><br><span class="line">          <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">green</span>[<span class="number">100</span>],</span><br><span class="line">          <span class="attr">shadowColor</span>: <span class="title class_">Colors</span>.<span class="property">yellow</span>,</span><br><span class="line">          <span class="attr">elevation</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">shape</span>: <span class="title class_">RoundedRectangleBorder</span>(</span><br><span class="line">              <span class="attr">borderRadius</span>: <span class="title class_">BorderRadius</span>.<span class="title function_">circular</span>(<span class="number">40</span>),</span><br><span class="line">              <span class="attr">side</span>: <span class="title class_">BorderSide</span>(</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">yellow</span>,</span><br><span class="line">                <span class="attr">width</span>: <span class="number">3</span>,</span><br><span class="line">              )</span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">child</span>: <span class="title class_">Column</span>(</span><br><span class="line">            <span class="attr">children</span>: <span class="keyword">const</span> [</span><br><span class="line">              <span class="title class_">ListTile</span>(</span><br><span class="line">                <span class="attr">leading</span>: <span class="title class_">Icon</span>(</span><br><span class="line">                  <span class="title class_">Icons</span>.<span class="property">accessible_forward_sharp</span>,</span><br><span class="line">                  <span class="attr">size</span>: <span class="number">50</span>,</span><br><span class="line">                ),</span><br><span class="line">                <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                  <span class="string">&quot;OTTO&quot;</span>,</span><br><span class="line">                  <span class="attr">style</span>: <span class="title class_">TextStyle</span>(<span class="attr">fontSize</span>: <span class="number">20</span>),</span><br><span class="line">                ),</span><br><span class="line">                <span class="attr">subtitle</span>: <span class="title class_">Text</span>(</span><br><span class="line">                  <span class="string">&quot;吉吉国王&quot;</span>,</span><br><span class="line">                  <span class="attr">style</span>: <span class="title class_">TextStyle</span>(<span class="attr">fontSize</span>: <span class="number">20</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="title class_">Divider</span>(),</span><br><span class="line">              <span class="title class_">ListTile</span>(</span><br><span class="line">                <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                  <span class="string">&quot;电话：000000000&quot;</span>,</span><br><span class="line">                  <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                      <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="title class_">ListTile</span>(</span><br><span class="line">                <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                  <span class="string">&quot;地址：xxxxxxx&quot;</span>,</span><br><span class="line">                  <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                      <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Card</span>(<span class="attr">child</span>: <span class="title class_">Column</span>(</span><br><span class="line">          <span class="attr">children</span>: <span class="keyword">const</span> [</span><br><span class="line">            <span class="title class_">ListTile</span>(</span><br><span class="line">              <span class="attr">leading</span>: <span class="title class_">Icon</span>(</span><br><span class="line">                <span class="title class_">Icons</span>.<span class="property">accessible_forward_sharp</span>,</span><br><span class="line">                <span class="attr">size</span>: <span class="number">50</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                <span class="string">&quot;OTTO&quot;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(<span class="attr">fontSize</span>: <span class="number">20</span>),</span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">subtitle</span>: <span class="title class_">Text</span>(</span><br><span class="line">                <span class="string">&quot;吉吉国王&quot;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(<span class="attr">fontSize</span>: <span class="number">20</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">Divider</span>(),</span><br><span class="line">            <span class="title class_">ListTile</span>(</span><br><span class="line">              <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                <span class="string">&quot;电话：000000000&quot;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="title class_">ListTile</span>(</span><br><span class="line">              <span class="attr">title</span>: <span class="title class_">Text</span>(</span><br><span class="line">                <span class="string">&quot;地址：xxxxxxx&quot;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">20</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),)</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果-2"><a href="#4-效果-2" class="headerlink" title="4.效果"></a>4.效果</h2></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f815a52962e24f1ea8e58270ae30f15d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、线性布局&quot;&gt;&lt;a href=&quot;#一、线性布局&quot; class=&quot;headerlink&quot; title=&quot;一、线性布局&quot;&gt;&lt;/a&gt;一、线性布局&lt;/h1&gt;&lt;h2 id=&quot;1-Column&quot;&gt;&lt;a href=&quot;#1-Column&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="flutter" scheme="https://vaioretto1.github.io/categories/flutter/"/>
    
    
    <category term="flutter学习笔记" scheme="https://vaioretto1.github.io/tags/flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习笔记--基础组件</title>
    <link href="https://vaioretto1.github.io/posts/65f8e82.html"/>
    <id>https://vaioretto1.github.io/posts/65f8e82.html</id>
    <published>2023-01-10T13:16:35.000Z</published>
    <updated>2023-01-10T13:19:39.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Text"><a href="#一、Text" class="headerlink" title="一、Text"></a>一、Text</h1><h2 id="1-Text"><a href="#1-Text" class="headerlink" title="1.Text"></a>1.Text</h2><ul><li><p>TextDirection（文本方向）</p></li><li><p>TextStyle（文本样式） </p><ul><li><p>colors（颜色）</p></li><li><p>FontWeit（字体粗细）</p></li><li>FontStyle（字体样式）</li></ul></li><li>TextAlign（文本对齐）    </li><li>TextOverflow（文本溢出）</li><li>MaxLines（指定显示的行数）<h2 id="2-RichText和TextSpan"><a href="#2-RichText和TextSpan" class="headerlink" title="2. RichText和TextSpan"></a>2. RichText和TextSpan</h2>作用：给一段文本声明多个不同的样式<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">Text</span>(</span><br><span class="line">          <span class="string">&#x27;abcdefgshdjsksandsndskdhshdaidisjda&#x27;</span>,</span><br><span class="line">          <span class="attr">maxLines</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">overflow</span>: <span class="title class_">TextOverflow</span>.<span class="property">ellipsis</span>,</span><br><span class="line">          <span class="attr">textDirection</span>: <span class="title class_">TextDirection</span>.<span class="property">ltr</span>,</span><br><span class="line">          <span class="attr">textAlign</span>: <span class="title class_">TextAlign</span>.<span class="property">left</span>,</span><br><span class="line">          <span class="attr">textScaleFactor</span>: <span class="number">1.5</span>,</span><br><span class="line">          <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">            <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>,</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">fontWeight</span>: <span class="title class_">FontWeight</span>.<span class="property">w500</span>,</span><br><span class="line">            <span class="attr">fontStyle</span>: <span class="title class_">FontStyle</span>.<span class="property">italic</span>,</span><br><span class="line">            <span class="attr">decoration</span>: <span class="title class_">TextDecoration</span>.<span class="property">lineThrough</span>,</span><br><span class="line">            <span class="attr">decorationColor</span>: <span class="title class_">Colors</span>.<span class="property">blue</span></span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">RichText</span>(</span><br><span class="line">            <span class="attr">text</span>: <span class="title class_">TextSpan</span>(</span><br><span class="line">              <span class="attr">text</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">              <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">40</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span></span><br><span class="line">              ),</span><br><span class="line">              <span class="attr">children</span>: [</span><br><span class="line">                <span class="title class_">TextSpan</span>(</span><br><span class="line">                  <span class="attr">text</span>: <span class="string">&#x27;Flutter&#x27;</span>,</span><br><span class="line">                  <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">                    <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">blue</span></span><br><span class="line">                  )</span><br><span class="line">                )</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39fb75e273e44b73a5bf43a485058418~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="二、Icon"><a href="#二、Icon" class="headerlink" title="二、Icon"></a>二、Icon</h1><h2 id="1-Icon"><a href="#1-Icon" class="headerlink" title="1.Icon"></a>1.Icon</h2><ul><li><p><a href="https://material.io/resources/icons">Flutter中的图标库</a>(需要一些魔法才能进去)</p></li><li><p>Icon(Icons.具体名称)</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">imageIconDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">imageIconDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">add</span>),</span><br><span class="line">        <span class="title class_">IconButton</span>(</span><br><span class="line">          <span class="attr">onPressed</span>: () &#123;&#125;,</span><br><span class="line">          <span class="attr">icon</span>: <span class="title class_">Icon</span>(<span class="title class_">Icons</span>.<span class="property">home</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="title class_">Container</span>(</span><br><span class="line">          <span class="attr">width</span>: double.<span class="property">infinity</span>,</span><br><span class="line">          <span class="attr">child</span>: <span class="title class_">Image</span>.<span class="title function_">asset</span>(</span><br><span class="line">            <span class="string">&quot;images/1.png&quot;</span>,</span><br><span class="line">            <span class="attr">fit</span>: <span class="title class_">BoxFit</span>.<span class="property">fitHeight</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果-1"><a href="#4-效果-1" class="headerlink" title="4.效果"></a>4.效果</h2></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/228f62970a234a4c95cef55958a89e95~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="三、Color"><a href="#三、Color" class="headerlink" title="三、Color"></a>三、Color</h1><h2 id="1-color-自定义颜色"><a href="#1-color-自定义颜色" class="headerlink" title="1.color(自定义颜色)"></a>1.color(自定义颜色)</h2><ul><li><p>Flutter中通过ARGB来声明颜色</p></li><li><p>const Color(0xFF42A5F5)//16进制的ARGB=透明度+六位十六进制颜色</p></li><li>const Color.fromARGB(0xFF,0x42,0xA5,0xF5)</li><li>const Color.fromARGB(255,66,165,245)</li><li>const Color.fromRGBO(66,165,245,1.0)//O=Opacity<h2 id="2-Colors（英文字母声明的颜色）"><a href="#2-Colors（英文字母声明的颜色）" class="headerlink" title="2.Colors（英文字母声明的颜色）"></a>2.Colors（英文字母声明的颜色）</h2></li><li>Colors.blue<h2 id="3-代码-1"><a href="#3-代码-1" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">colorDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Column</span>(</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="title class_">RichText</span>(</span><br><span class="line">            <span class="attr">text</span>: <span class="title class_">TextSpan</span>(</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">                <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                    <span class="attr">color</span>: <span class="title class_">Color</span>.<span class="title function_">fromARGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                ),</span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                  <span class="title class_">TextSpan</span>(</span><br><span class="line">                      <span class="attr">text</span>: <span class="string">&#x27;Flutter&#x27;</span>,</span><br><span class="line">                      <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                          <span class="attr">color</span>: <span class="title class_">Color</span>.<span class="title function_">fromRGBO</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span><br><span class="line">                      )</span><br><span class="line">                  ),</span><br><span class="line">                  <span class="title class_">TextSpan</span>(</span><br><span class="line">                      <span class="attr">text</span>: <span class="string">&#x27;Flutter&#x27;</span>,</span><br><span class="line">                      <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">                          <span class="attr">color</span>: <span class="title class_">Color</span>.<span class="title function_">fromARGB</span>(<span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>)</span><br><span class="line">                      )</span><br><span class="line">                  )</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果-2"><a href="#4-效果-2" class="headerlink" title="4.效果"></a>4.效果</h2></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3c935ec94a44b9f9cfbb8920b46d3f6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="四、Container"><a href="#四、Container" class="headerlink" title="四、Container"></a>四、Container</h1><h2 id="1-Container"><a href="#1-Container" class="headerlink" title="1.Container"></a>1.Container</h2><ul><li><p>child（声明子组件）</p></li><li><p>padding/margin（填充）</p><ul><li>EdgeInsets.（all(),fromLTRB(),only()）</li></ul></li><li>decoration<ul><li>BoxDecoration(边框-border，圆角-borderRadius，渐变-gradient，阴影-boxShadow，背景色-color，背景图片-image等)<ul><li>alignment</li><li>Alignment（内容对齐）</li><li>transform </li><li>Matrix4（平移-translate、选择-rotate、缩放-scale、斜切-skew）<h2 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h2></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatelessWidget</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ContainerDemo</span>(&#123;<span class="title class_">Key</span>? key&#125;) : <span class="variable language_">super</span>(<span class="attr">key</span>: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="title class_">Widget</span> <span class="title function_">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Container</span>(</span><br><span class="line">      <span class="attr">child</span>: <span class="title class_">Text</span>(</span><br><span class="line">        <span class="string">&#x27;abcdefgshdjsksandsndskdhshdaidisjdakhdasdhkdhhdihdhahdiajhdi&#x27;</span>,</span><br><span class="line">        <span class="attr">style</span>: <span class="title class_">TextStyle</span>(</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">30</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">      <span class="comment">// width: double.infinity,</span></span><br><span class="line">      <span class="comment">// height: double.infinity,</span></span><br><span class="line">      <span class="attr">padding</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">10.0</span>),</span><br><span class="line">      <span class="attr">margin</span>: <span class="title class_">EdgeInsets</span>.<span class="title function_">fromLTRB</span>(<span class="number">10.0</span>, <span class="number">30.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>),</span><br><span class="line">      <span class="attr">alignment</span>: <span class="title class_">Alignment</span>.<span class="property">center</span>,</span><br><span class="line">      <span class="comment">//平移</span></span><br><span class="line">      <span class="comment">// transform: Matrix4.translationValues(1000, 0, 0),</span></span><br><span class="line">      <span class="comment">//旋转</span></span><br><span class="line">      <span class="comment">// transform: Matrix4.rotationZ(0.1),</span></span><br><span class="line">      <span class="attr">transform</span>: <span class="title class_">Matrix4</span>.<span class="title function_">skewX</span>(<span class="number">0.2</span>),</span><br><span class="line">      <span class="attr">decoration</span>: <span class="title class_">BoxDecoration</span>(</span><br><span class="line">       <span class="comment">// border: Border(</span></span><br><span class="line">       <span class="comment">//   top: BorderSide(</span></span><br><span class="line">       <span class="comment">//     width: 10.0,</span></span><br><span class="line">       <span class="comment">//     color: Colors.red</span></span><br><span class="line">       <span class="comment">//   ),</span></span><br><span class="line">       <span class="comment">//   bottom: BorderSide(</span></span><br><span class="line">       <span class="comment">//       width: 10.0,</span></span><br><span class="line">       <span class="comment">//       color: Colors.red</span></span><br><span class="line">       <span class="comment">//   ),</span></span><br><span class="line">       <span class="comment">//   right: BorderSide(</span></span><br><span class="line">       <span class="comment">//       width: 10.0,</span></span><br><span class="line">       <span class="comment">//       color: Colors.red</span></span><br><span class="line">       <span class="comment">//   ),</span></span><br><span class="line">       <span class="comment">//   left: BorderSide(</span></span><br><span class="line">       <span class="comment">//       width: 10.0,</span></span><br><span class="line">       <span class="comment">//       color: Colors.red</span></span><br><span class="line">       <span class="comment">//   ),</span></span><br><span class="line">       <span class="comment">// )</span></span><br><span class="line">        <span class="attr">border</span>: <span class="title class_">Border</span>.<span class="title function_">all</span>(</span><br><span class="line">          <span class="attr">width</span>: <span class="number">10.0</span>,</span><br><span class="line">          <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// borderRadius: BorderRadius.all(Radius.circular(30)),</span></span><br><span class="line">        <span class="attr">borderRadius</span>: <span class="title class_">BorderRadius</span>.<span class="title function_">only</span>(</span><br><span class="line">          <span class="attr">topLeft</span>: <span class="title class_">Radius</span>.<span class="title function_">circular</span>(<span class="number">30</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">lightGreen</span>[<span class="number">100</span>],</span><br><span class="line">        <span class="comment">//设置渐变后，背景色失效</span></span><br><span class="line">        <span class="attr">gradient</span>: <span class="title class_">LinearGradient</span>(<span class="attr">colors</span>: [<span class="title class_">Colors</span>.<span class="property">lightBlue</span>,<span class="title class_">Colors</span>.<span class="property">white12</span>]),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d563dbea4c514341af8bd63383b88c00~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Text&quot;&gt;&lt;a href=&quot;#一、Text&quot; class=&quot;headerlink&quot; title=&quot;一、Text&quot;&gt;&lt;/a&gt;一、Text&lt;/h1&gt;&lt;h2 id=&quot;1-Text&quot;&gt;&lt;a href=&quot;#1-Text&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="flutter" scheme="https://vaioretto1.github.io/categories/flutter/"/>
    
    
    <category term="flutter学习笔记" scheme="https://vaioretto1.github.io/tags/flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于STL的演讲比赛流程管理系统</title>
    <link href="https://vaioretto1.github.io/posts/327b16ec.html"/>
    <id>https://vaioretto1.github.io/posts/327b16ec.html</id>
    <published>2023-01-10T08:30:42.000Z</published>
    <updated>2023-01-10T13:18:23.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、项目目的"><a href="#一、项目目的" class="headerlink" title="一、项目目的"></a>一、项目目的</h1><p>运用c++实现一个基于STL的演讲比赛流程管理系统。  </p><h2 id="比赛方式"><a href="#比赛方式" class="headerlink" title="比赛方式"></a><strong>比赛方式</strong></h2><ul><li>共两轮，第一轮为分组淘汰赛，第二轮为决赛，共有十名评委，打分方式为去掉最高分和最低分的平均分为基准  </li><li>第一轮共两组，每组六人，为随机分组和抽签决定演讲顺序，每组取前三名进入下一轮  ；</li><li>第二轮为淘汰赛，六名选手同台竞技，决出冠亚季军；</li><li>每轮比赛结束后都会公布胜出选手分数及排名；<h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2></li><li>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段；该阶段还具有初始化比赛进程、抽签、进行比赛、显示晋级成果、保存分数的功能。</li><li>查看往届记录：查看往届比赛结冠亚军信息，每次比赛都会记录到文件（格式为csv）中。</li><li>清空比赛记录：将文件中往届比赛结冠亚军信息清空。</li><li>退出比赛程序：退出当前程序。<h1 id="二、项目实现"><a href="#二、项目实现" class="headerlink" title="二、项目实现"></a>二、项目实现</h1><h2 id="1-项目雏形"><a href="#1-项目雏形" class="headerlink" title="1. 项目雏形"></a>1. 项目雏形</h2><code>演讲比赛流程管理系统.cpp</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include<span class="string">&quot;SpeechManager.h&quot;</span></span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">srand</span>((unsigned int)<span class="title function_">time</span>(<span class="variable constant_">NULL</span>));</span><br><span class="line"><span class="title class_">SpeechManager</span> s1;</span><br><span class="line"></span><br><span class="line">int input;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">s1.<span class="title class_">Show</span>_menu();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            请输入你的选项：            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line"><span class="keyword">switch</span> (input)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="comment">//退出比赛程序</span></span><br><span class="line">s1.<span class="title class_">Exit</span>_system();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">//开始演讲比赛</span></span><br><span class="line">s1.<span class="title class_">Start</span>_speech();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">//查看往届记录</span></span><br><span class="line">s1.<span class="title class_">Show</span>_record();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">//清空比赛记录</span></span><br><span class="line">s1.<span class="title class_">Clear</span>_record();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段为项目的雏形，上面也是接下来我们将要实现的功能。</p><h2 id="2-管理类的实现"><a href="#2-管理类的实现" class="headerlink" title="2. 管理类的实现"></a>2. 管理类的实现</h2><p>首先在<strong>SpeechManager.h</strong>中设计管理类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpeechManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">SpeechManager</span>();</span><br><span class="line"></span><br><span class="line">~<span class="title class_">SpeechManager</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在<strong>SpeechManager.cpp</strong>中将构造和析构函数空实现补全</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;speechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SpeechManager</span>::<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SpeechManager</span>::~<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现菜单功能"><a href="#3-实现菜单功能" class="headerlink" title="3. 实现菜单功能"></a>3. 实现菜单功能</h2><p>首先在管理类<strong>SpeechManager</strong>类中添加成员函数 <code>void show_Menu()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_menu()&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;                                      &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            欢迎参加演讲比赛!         &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            1.开始演讲比赛            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            2.查看往届记录            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            3.清空比赛记录            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            0.退出比赛程序            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;                                      &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6af8544f1ed847f3941c43fe713603ff~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="4-实现退出功能"><a href="#4-实现退出功能" class="headerlink" title="4. 实现退出功能"></a>4. 实现退出功能</h2><p>首先在在<strong>SpeechManager</strong>类中添加成员函数 <code>void exitSystem()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Exit</span>_system()&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            欢迎下次使用            &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ac25163e99c4b07a4a2b77b913a738b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="5-实现比赛功能"><a href="#5-实现比赛功能" class="headerlink" title="5. 实现比赛功能"></a>5. 实现比赛功能</h2><h3 id="5-1-选手类的实现"><a href="#5-1-选手类的实现" class="headerlink" title="5.1 选手类的实现"></a>5.1 选手类的实现</h3><p>在<strong>Speaker.h</strong>设计选手类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma once;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">string <span class="title class_">Name</span>;</span><br><span class="line">double <span class="title class_">Score</span>[<span class="number">2</span>];<span class="comment">//最多有两轮成绩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-2添加成员变量"><a href="#5-2添加成员变量" class="headerlink" title="5.2添加成员变量"></a>5.2添加成员变量</h3><p>在<strong>SpeechManager</strong>类中添加成员变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       int rounds; <span class="comment">//比赛轮次</span></span><br><span class="line">vector&lt;int&gt;v1; <span class="comment">//第一轮参与选手（12位</span></span><br><span class="line">vector&lt;int&gt;v2;<span class="comment">//晋级第二轮的选手（6位</span></span><br><span class="line">vector&lt;int&gt;third;<span class="comment">//获得前三名的选手</span></span><br><span class="line">map&lt;int, <span class="title class_">Speaker</span>&gt;speaker;<span class="comment">//存放编号以及对应具体选手</span></span><br></pre></td></tr></table></figure><h3 id="5-3-初始化成员变量"><a href="#5-3-初始化成员变量" class="headerlink" title="5.3 初始化成员变量"></a>5.3 初始化成员变量</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Init_speaker()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Init</span>_speaker()&#123;</span><br><span class="line"><span class="comment">//初始化选手数据</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;v1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;v2.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;third.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;rounds = <span class="number">1</span>;<span class="comment">//初始化比赛轮次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<strong>SpeechManager.cpp</strong>中的<strong>SpeechManager</strong>构造函数中调用<code>void Init_speaker()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SpeechManager</span>::<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-创建选手"><a href="#5-4-创建选手" class="headerlink" title="5.4 创建选手"></a>5.4 创建选手</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Create_speaker()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Create</span>_speaker()&#123;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDEFGHIJKL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; nameSeed.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name += nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Speaker</span> s;</span><br><span class="line">s.<span class="property">Name</span> = name;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) s.<span class="property">Score</span>[j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;v1.<span class="title function_">push_back</span>(<span class="number">10001</span> + i);</span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(<span class="number">10001</span> + i, s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<strong>SpeechManager.cpp</strong>中的<strong>SpeechManager</strong>构造函数中调用<code>void Create_speaker()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SpeechManager</span>::<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-比赛功能实现"><a href="#5-5-比赛功能实现" class="headerlink" title="5.5 比赛功能实现"></a>5.5 比赛功能实现</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Start_speech()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Start</span>_speech()&#123;</span><br><span class="line"><span class="comment">//第一轮比赛</span></span><br><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Drawing</span>();</span><br><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Completion</span>();</span><br><span class="line"><span class="comment">//显示晋级成果</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_score();</span><br><span class="line"><span class="comment">//第二轮比赛</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;rounds++;</span><br><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Drawing</span>();</span><br><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Completion</span>();</span><br><span class="line"><span class="comment">//显示最终结果</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_score();</span><br><span class="line"><span class="comment">//保存分数</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Record</span>();</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;本届比赛顺利结束&quot;</span> &lt;&lt; endl; <span class="comment">//这一条与上面的显示会闪烁过去，原因不明</span></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pasue&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-1-抽签功能实现"><a href="#5-5-1-抽签功能实现" class="headerlink" title="5.5.1 抽签功能实现"></a>5.5.1 抽签功能实现</h4><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Drawing()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Drawing</span>()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            演讲顺序如下&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="title function_">random_shuffle</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">random_shuffle</span>(v2.<span class="title function_">begin</span>(), v2.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v2.<span class="title function_">begin</span>(); it != v2.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/631dbaacdfe8443f9b8b78c47c5d55bf~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="5-5-2-比赛功能实现"><a href="#5-5-2-比赛功能实现" class="headerlink" title="5.5.2 比赛功能实现"></a>5.5.2 比赛功能实现</h4><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Completion()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Completion</span>()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛正式开始&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛正式开始&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">multimap&lt;double, int, greater&lt;double&gt;&gt;group;<span class="comment">//记录每组选手数据</span></span><br><span class="line">int num = <span class="number">0</span>;<span class="comment">//6人为一组</span></span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v = v1;</span><br><span class="line"><span class="keyword">else</span> v = v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">deque&lt;double&gt;d;<span class="comment">//存放分数</span></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">double score = (<span class="title function_">rand</span>() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.</span>f; <span class="comment">//600~1000</span></span><br><span class="line">d.<span class="title function_">push_back</span>(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(d.<span class="title function_">begin</span>(), d.<span class="title function_">end</span>(), greater&lt;double&gt;());</span><br><span class="line">d.<span class="title function_">pop_front</span>();<span class="comment">//去除最高分</span></span><br><span class="line">d.<span class="title function_">pop_back</span>();<span class="comment">//去除最低分</span></span><br><span class="line"></span><br><span class="line">double sum = <span class="title function_">accumulate</span>(d.<span class="title function_">begin</span>(), d.<span class="title function_">end</span>(), <span class="number">0.</span>0f);<span class="comment">//计算总分</span></span><br><span class="line">double avg = sum / (double)d.<span class="title function_">size</span>();<span class="comment">//计算平均分</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker[*it].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(avg, *it));</span><br><span class="line"><span class="comment">//6人一组</span></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (num / <span class="number">6</span> == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;第一小组比赛名次如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;第二小组比赛名次如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;double, int, greater&lt;double&gt;&gt;::iterator it = group.<span class="title function_">begin</span>(); </span><br><span class="line">                        it != group.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot; 姓名：&quot;</span> </span><br><span class="line">                                &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[it-&gt;second].<span class="property">Name</span></span><br><span class="line">&lt;&lt; <span class="string">&quot; 成绩：&quot;</span> &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[it-&gt;second].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] </span><br><span class="line">                                &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取各组前三名</span></span><br><span class="line">int count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;double, int, greater&lt;double&gt;&gt;::iterator it = group.<span class="title function_">begin</span>(); </span><br><span class="line">                        it != group.<span class="title function_">end</span>() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v2.<span class="title function_">push_back</span>((*it).<span class="property">second</span>);</span><br><span class="line"><span class="keyword">else</span> third.<span class="title function_">push_back</span>((*it).<span class="property">second</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">clear</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/529bea212b8640568efe64efeb383fab~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="5-5-3-显示功能实现"><a href="#5-5-3-显示功能实现" class="headerlink" title="5.5.3 显示功能实现"></a>5.5.3 显示功能实现</h4><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Show_score()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_score()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛晋级选手信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛晋级选手信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v = v2;</span><br><span class="line"><span class="keyword">else</span> v = third;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; *it&lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt;<span class="variable language_">this</span>-&gt; speaker[*it].<span class="property">Name</span></span><br><span class="line">&lt;&lt; <span class="string">&quot; 成绩：&quot;</span> &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[*it].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_menu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25f43681787d4f04ad10d0c1e63c77bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="5-5-4-第二轮比赛实现"><a href="#5-5-4-第二轮比赛实现" class="headerlink" title="5.5.4 第二轮比赛实现"></a>5.5.4 第二轮比赛实现</h4><p>第二轮比赛仅需将比赛轮次+1，后续流程与第一轮一样<br>实现效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/198deccb4f5f4469b34e22fadc173397~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="5-5-5-保存功能实现"><a href="#5-5-5-保存功能实现" class="headerlink" title="5.5.5 保存功能实现"></a>5.5.5 保存功能实现</h4><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Record()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Record</span>()&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="title function_">open</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::out | <span class="attr">ios</span>::app);<span class="comment">// 用输出的方式打开文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = third.<span class="title function_">begin</span>(); it != third.<span class="title function_">end</span>(); it++)</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; speaker[*it].<span class="property">Score</span>[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">ofs &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="title function_">close</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;记录已保存&quot;</span> &lt;&lt; endl; <span class="comment">//这一条与接下来的显示会闪烁过去，原因不明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用记事本打开文件<strong>speech.csv</strong>，里面保存了前三名选手的编号以及得分</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e5cd9cf08204c40930f20adf72e239c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-实现读取功能"><a href="#6-实现读取功能" class="headerlink" title="6. 实现读取功能"></a>6. 实现读取功能</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数和成员变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">void</span> <span class="title class_">Load</span>_record();<span class="comment">//读取往届记录</span></span><br><span class="line">       </span><br><span class="line">bool <span class="title class_">File</span>_is_empty;<span class="comment">//判断文件是否为空</span></span><br><span class="line">       </span><br><span class="line">map&lt;int, vector&lt;string&gt;&gt;record;<span class="comment">//往届记录</span></span><br></pre></td></tr></table></figure><p>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Load</span>_record()&#123;</span><br><span class="line">ifstream <span class="title function_">ifs</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="title function_">is_open</span>())&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="title function_">eof</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">ifs.<span class="title function_">putback</span>(ch);<span class="comment">//把读取的单个字符放回去</span></span><br><span class="line"></span><br><span class="line">string data;</span><br><span class="line">int index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data)&#123;</span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line"></span><br><span class="line">int pos = -<span class="number">1</span>;</span><br><span class="line">int start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">pos = data.<span class="title function_">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">string tmp = data.<span class="title function_">substr</span>(start, pos - start);</span><br><span class="line">                        <span class="comment">//第一个是起始位置，第二个是到逗号的截取长度</span></span><br><span class="line">v.<span class="title function_">push_back</span>(tmp);</span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>-&gt;record.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<code>void Record()</code>利用<code>File_is_empty</code>更新文件状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比赛完后文件不为空</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>在<strong>SpeechManager.cpp</strong>中的<strong>SpeechManager</strong>构造函数中调用<code>void Record()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SpeechManager</span>::<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>SpeechManager.cpp</strong>中的<code>void Init_speaker()</code>函数中初始化记录容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>-&gt;record.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>在<strong>SpeechManager.cpp</strong>中的<code>void Start_speech()</code>函数中重置比赛</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重置比赛</span></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br></pre></td></tr></table></figure><h3 id="7-实现查看功能"><a href="#7-实现查看功能" class="headerlink" title="7. 实现查看功能"></a>7. 实现查看功能</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Show_record()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_record()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty) cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;int, vector&lt;string&gt;&gt;::iterator it = <span class="variable language_">this</span>-&gt;record.<span class="title function_">begin</span>(); </span><br><span class="line">                it != <span class="variable language_">this</span>-&gt;record.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; it-&gt;first+<span class="number">1</span> &lt;&lt; <span class="string">&quot;届&quot;</span> &lt;&lt;</span><br><span class="line">                                <span class="string">&quot;冠军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;亚军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">3</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;季军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">4</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82dda2c7b6c849f286107c6d6d8a5a03~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="8-实现清空功能"><a href="#8-实现清空功能" class="headerlink" title="8. 实现清空功能"></a>8. 实现清空功能</h3><p>首先在<strong>SpeechManager</strong>类中添加成员函数 <code>void Clear_record()</code><br>然后在<strong>SpeechManager.cpp</strong>中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Clear</span>_record()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;1. Yes&quot;</span> &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;2. No&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int select;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)&#123;</span><br><span class="line">ofstream <span class="title function_">ofs</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::trunc);</span><br><span class="line">ofs.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;输入有误！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f894b3327f246ae8ac0388f7e0961b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b41e6b711454185aaac2a439c8e244b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>至此本项目结束<h2 id="三、源代码显示"><a href="#三、源代码显示" class="headerlink" title="三、源代码显示"></a>三、源代码显示</h2><h3 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h3><h4 id="“Speaker-h”"><a href="#“Speaker-h”" class="headerlink" title="“Speaker.h”"></a>“Speaker.h”</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma once;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">string <span class="title class_">Name</span>;</span><br><span class="line">double <span class="title class_">Score</span>[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“SpeechManage-h”"><a href="#“SpeechManage-h”" class="headerlink" title="“SpeechManage.h”"></a>“SpeechManage.h”</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include<span class="string">&quot;Speaker.h&quot;</span></span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;numeric&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line">#include&lt;deque&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpeechManager</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">SpeechManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Show</span>_menu();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Exit</span>_system();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Init</span>_speaker();</span><br><span class="line"></span><br><span class="line">int rounds; </span><br><span class="line">vector&lt;int&gt;v1; </span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">vector&lt;int&gt;third;</span><br><span class="line">map&lt;int, <span class="title class_">Speaker</span>&gt;speaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Create</span>_speaker();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Start</span>_speech();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Drawing</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Show</span>_score();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Record</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Completion</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Load</span>_record();</span><br><span class="line"></span><br><span class="line">bool <span class="title class_">File</span>_is_empty;</span><br><span class="line"></span><br><span class="line">map&lt;int, vector&lt;string&gt;&gt;record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Show</span>_record();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">Clear</span>_record();</span><br><span class="line"></span><br><span class="line">~<span class="title class_">SpeechManager</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-源文件"><a href="#2-源文件" class="headerlink" title="2. 源文件"></a>2. 源文件</h3><h4 id="“SpeechManage-cpp”"><a href="#“SpeechManage-cpp”" class="headerlink" title="“SpeechManage.cpp”"></a>“SpeechManage.cpp”</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;SpeechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SpeechManager</span>::<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SpeechManager</span>::~<span class="title class_">SpeechManager</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_menu()&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;                                      &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            欢迎参加演讲比赛!         &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            1.开始演讲比赛            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            2.查看往届记录            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            3.清空比赛记录            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            0.退出比赛程序            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;                                      &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Exit</span>_system()&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            欢迎下次使用            &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Init</span>_speaker()&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;v1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;v2.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;third.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;record.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;rounds = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Create</span>_speaker()&#123;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDEFGHIJKL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; nameSeed.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name += nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Speaker</span> s;</span><br><span class="line">s.<span class="property">Name</span> = name;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) s.<span class="property">Score</span>[j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;v1.<span class="title function_">push_back</span>(<span class="number">10001</span> + i);</span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(<span class="number">10001</span> + i, s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Start</span>_speech()&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Drawing</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Completion</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_score();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;rounds++;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Drawing</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Completion</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_score();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Record</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;本届比赛顺利结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pasue&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Drawing</span>()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            演讲顺序如下&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="title function_">random_shuffle</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">random_shuffle</span>(v2.<span class="title function_">begin</span>(), v2.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v2.<span class="title function_">begin</span>(); it != v2.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Completion</span>()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛正式开始&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛正式开始&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">multimap&lt;double, int, greater&lt;double&gt;&gt;group;</span><br><span class="line">int num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v = v1;</span><br><span class="line"><span class="keyword">else</span> v = v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">deque&lt;double&gt;d;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">double score = (<span class="title function_">rand</span>() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.</span>f; </span><br><span class="line">d.<span class="title function_">push_back</span>(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(d.<span class="title function_">begin</span>(), d.<span class="title function_">end</span>(), greater&lt;double&gt;());</span><br><span class="line">d.<span class="title function_">pop_front</span>();</span><br><span class="line">d.<span class="title function_">pop_back</span>();</span><br><span class="line"></span><br><span class="line">double sum = <span class="title function_">accumulate</span>(d.<span class="title function_">begin</span>(), d.<span class="title function_">end</span>(), <span class="number">0.</span>0f);</span><br><span class="line">double avg = sum / (double)d.<span class="title function_">size</span>();</span><br><span class="line"><span class="variable language_">this</span>-&gt;speaker[*it].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(avg, *it));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (num / <span class="number">6</span> == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;第一小组比赛名次如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;第二小组比赛名次如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;double, int, greater&lt;double&gt;&gt;::iterator it = group.<span class="title function_">begin</span>(); it != group.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[it-&gt;second].<span class="property">Name</span></span><br><span class="line">&lt;&lt; <span class="string">&quot; 成绩：&quot;</span> &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[it-&gt;second].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;double, int, greater&lt;double&gt;&gt;::iterator it = group.<span class="title function_">begin</span>(); it != group.<span class="title function_">end</span>() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v2.<span class="title function_">push_back</span>((*it).<span class="property">second</span>);</span><br><span class="line"><span class="keyword">else</span> third.<span class="title function_">push_back</span>((*it).<span class="property">second</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">clear</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_score()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;            第一轮比赛晋级选手信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;            第二轮比赛晋级选手信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;rounds == <span class="number">1</span>) v = v2;</span><br><span class="line"><span class="keyword">else</span> v = third;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; *it&lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt;<span class="variable language_">this</span>-&gt; speaker[*it].<span class="property">Name</span></span><br><span class="line">&lt;&lt; <span class="string">&quot; 成绩：&quot;</span> &lt;&lt; <span class="variable language_">this</span>-&gt;speaker[*it].<span class="property">Score</span>[<span class="variable language_">this</span>-&gt;rounds - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Show</span>_menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Record</span>()&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="title function_">open</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::out | <span class="attr">ios</span>::app);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = third.<span class="title function_">begin</span>(); it != third.<span class="title function_">end</span>(); it++)</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; speaker[*it].<span class="property">Score</span>[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">ofs &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="title function_">close</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;记录已保存&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Load</span>_record()&#123;</span><br><span class="line">ifstream <span class="title function_">ifs</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="title function_">is_open</span>())&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="title function_">eof</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">ifs.<span class="title function_">putback</span>(ch);</span><br><span class="line"></span><br><span class="line">string data;</span><br><span class="line">int index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data)&#123;</span><br><span class="line">vector&lt;string&gt;v;</span><br><span class="line"></span><br><span class="line">int pos = -<span class="number">1</span>;</span><br><span class="line">int start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">pos = data.<span class="title function_">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">string tmp = data.<span class="title function_">substr</span>(start, pos - start);</span><br><span class="line">v.<span class="title function_">push_back</span>(tmp);</span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>-&gt;record.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Show</span>_record()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;<span class="title class_">File</span>_is_empty) cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;int, vector&lt;string&gt;&gt;::iterator it = <span class="variable language_">this</span>-&gt;record.<span class="title function_">begin</span>(); it != <span class="variable language_">this</span>-&gt;record.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; it-&gt;first+<span class="number">1</span> &lt;&lt; <span class="string">&quot;届&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;冠军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;亚军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">3</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;季军编号：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">4</span>] &lt;&lt; <span class="string">&quot; 得分：&quot;</span> &lt;&lt; it-&gt;second[<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title class_">SpeechManager</span>::<span class="title class_">Clear</span>_record()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;1. Yes&quot;</span> &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;2. No&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int select;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)&#123;</span><br><span class="line">ofstream <span class="title function_">ofs</span>(<span class="string">&quot;speech.csv&quot;</span>, <span class="attr">ios</span>::trunc);</span><br><span class="line">ofs.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Init</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Create</span>_speaker();</span><br><span class="line"><span class="variable language_">this</span>-&gt;<span class="title class_">Load</span>_record();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;输入有误！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“演讲比赛流程管理系统-cpp”"><a href="#“演讲比赛流程管理系统-cpp”" class="headerlink" title="“演讲比赛流程管理系统.cpp”"></a>“演讲比赛流程管理系统.cpp”</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include<span class="string">&quot;SpeechManager.h&quot;</span></span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">srand</span>((unsigned int)<span class="title function_">time</span>(<span class="variable constant_">NULL</span>));</span><br><span class="line"><span class="title class_">SpeechManager</span> s1;</span><br><span class="line"></span><br><span class="line">int input;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">s1.<span class="title class_">Show</span>_menu();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;            请输入你的选项：            &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line"><span class="keyword">switch</span> (input)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">s1.<span class="title class_">Exit</span>_system();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">s1.<span class="title class_">Start</span>_speech();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">s1.<span class="title class_">Show</span>_record();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">s1.<span class="title class_">Clear</span>_record();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、项目目的&quot;&gt;&lt;a href=&quot;#一、项目目的&quot; class=&quot;headerlink&quot; title=&quot;一、项目目的&quot;&gt;&lt;/a&gt;一、项目目的&lt;/h1&gt;&lt;p&gt;运用c++实现一个基于STL的演讲比赛流程管理系统。  &lt;/p&gt;
&lt;h2 id=&quot;比赛方式&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++小项目" scheme="https://vaioretto1.github.io/tags/c-%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>STL学习笔记--常用算法</title>
    <link href="https://vaioretto1.github.io/posts/eb15c63d.html"/>
    <id>https://vaioretto1.github.io/posts/eb15c63d.html</id>
    <published>2022-12-14T05:38:09.000Z</published>
    <updated>2022-12-30T03:40:08.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、算法概述"><a href="#一、算法概述" class="headerlink" title="一、算法概述"></a>一、算法概述</h2><ul><li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</li><li><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等。</li><li><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数。</li><li><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。<h2 id="二、常用遍历算法"><a href="#二、常用遍历算法" class="headerlink" title="二、常用遍历算法"></a>二、常用遍历算法</h2><h3 id="1-for-each"><a href="#1-for-each" class="headerlink" title="1.for_each"></a>1.for_each</h3><strong>功能描述：</strong> 实现遍历容器。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>for_each(iterator beg, iterator end, _func);</code>   _func为函数或者函数对象。<h3 id="2-transform"><a href="#2-transform" class="headerlink" title="2.transform"></a>2.transform</h3><strong>功能描述：</strong> 搬运容器到另一个容器中。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Transform</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line"><span class="keyword">return</span> v + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);<span class="comment">//函数</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());<span class="comment">//函数对象</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">v1.<span class="title function_">resize</span>(v.<span class="title function_">size</span>());</span><br><span class="line">        <span class="comment">//用transform搬运的目标容器必须要提前开辟空间，否则无法正常搬运</span></span><br><span class="line"><span class="title function_">transform</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>(), <span class="title class_">Transform</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行效果：</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/461fcdcbc9c46f0e7479006e262adec7.png" alt="image.png"></p><h2 id="三、常用查找算法"><a href="#三、常用查找算法" class="headerlink" title="三、常用查找算法"></a>三、常用查找算法</h2><h3 id="1-find"><a href="#1-find" class="headerlink" title="1.find"></a>1.find</h3><p><strong>功能描述：</strong> 查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()。</p><p><strong>函数原型：</strong></p><ul><li><code>find(iterator beg, iterator end, value);</code> value为查找的元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">bool operator==(<span class="keyword">const</span> <span class="title class_">Person</span> &amp;p)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;age == p.<span class="property">age</span>&amp;&amp;<span class="variable language_">this</span>-&gt;name == p.<span class="property">name</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">vector&lt;int&gt;::iterator it = <span class="title function_">find</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">50</span>);</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;v1;</span><br><span class="line">v1.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p3);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p4);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p5);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;::iterator it1 = <span class="title function_">find</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), p);</span><br><span class="line"><span class="keyword">if</span> (it1 == v1.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Found&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/831d30223a88b3e3f2b1badd5055bfde.png" alt="image.png"></p><h3 id="2-find-if"><a href="#2-find-if" class="headerlink" title="2.find_if"></a>2.find_if</h3><p><strong>功能描述：</strong> 按条件查找元素。</p><p><strong>函数原型：</strong></p><ul><li><code>find_if(iterator beg, iterator end, _Pred);</code> _Pred为 函数或者谓词（返回bool类型的仿函数）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(<span class="keyword">const</span> <span class="title class_">Person</span> &amp; p)&#123;</span><br><span class="line"><span class="keyword">if</span> (p.<span class="property">age</span> == <span class="number">50</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">vector&lt;int&gt;::iterator it = <span class="title function_">find_if</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Compare</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Position: &quot;</span> &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;v1;</span><br><span class="line">v1.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p3);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p4);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p5);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;::iterator it1 = <span class="title function_">find_if</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), <span class="title function_">_Compare</span>());</span><br><span class="line"><span class="keyword">if</span> (it1 == v1.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Name: &quot;</span>&lt;&lt;(*it1).<span class="property">name</span>&lt;&lt;<span class="string">&quot; Age: &quot;</span>&lt;&lt;(*it1).<span class="property">age</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/744d7891ab4c870849ad9b167df005d4.png" alt="image.png"></p><h3 id="3-adjacent-find"><a href="#3-adjacent-find" class="headerlink" title="3.adjacent_find"></a>3.adjacent_find</h3><p><strong>功能描述：</strong> 查找相邻重复元素。</p><p><strong>函数原型：</strong></p><ul><li><code>adjacent_find(iterator beg, iterator end);</code> 函数返回相邻重复元素的第一个位置的迭代器。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">0</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">0</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;::iterator it = <span class="title function_">adjacent_find</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Element: &quot;</span> &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d12b7006986930855c2d5a7b40ef712e.png" alt="image.png"></p><h3 id="4-binary-search"><a href="#4-binary-search" class="headerlink" title="4.binary_search"></a>4.binary_search</h3><p><strong>功能描述：</strong> 查找指定元素是否存在（<strong>二分查找法</strong>）。</p><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);</code> 查找指定的元素，查到 返回true 否则false</p><p>注意: 在<strong>无序序列</strong>中不可用。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">bool it = <span class="title function_">binary_search</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(),<span class="number">9</span>);</span><br><span class="line"><span class="keyword">if</span> (!it) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Found&quot;</span> &lt;&lt; endl;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">7</span>);<span class="comment">//需有序</span></span><br><span class="line">bool it1 = <span class="title function_">binary_search</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">9</span>);</span><br><span class="line"><span class="keyword">if</span> (!it1) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Found&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//无序时无法查找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/31fb186958c83d06fcfcbb1b64475b25.png" alt="image.png"></p><h3 id="5-count"><a href="#5-count" class="headerlink" title="5.count"></a>5.count</h3><p><strong>功能描述：</strong> 统计元素个数。</p><p><strong>函数原型：</strong></p><ul><li><code>count(iterator beg, iterator end, value);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">bool operator==(<span class="keyword">const</span> <span class="title class_">Person</span>&amp; p)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>-&gt;age == p.<span class="property">age</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">int num = <span class="title function_">count</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;v1;</span><br><span class="line">v1.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p3);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p4);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p5);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);<span class="comment">//疑似只要其一成员数据相同即可</span></span><br><span class="line">num= <span class="title function_">count</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(),p);</span><br><span class="line">        <span class="comment">//统计自定义数据类型时候，需要配合重载&quot;operator==&quot;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5089d1ad860e085132ba3c021e40dd8f.png" alt="image.png"></p><h3 id="6-count-if"><a href="#6-count-if" class="headerlink" title="6.count_if"></a>6.count_if</h3><p><strong>功能描述：</strong> 按条件统计元素个数。</p><p> <strong>按值统计用count，按条件统计用count_if</strong></p><p><strong>函数原型：</strong></p><ul><li><code>count_if(iterator beg, iterator end, _Pred);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeCompare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(<span class="keyword">const</span> <span class="title class_">Person</span>&amp; p)&#123;</span><br><span class="line"><span class="keyword">if</span> (p.<span class="property">age</span>&gt;=<span class="number">20</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">int num = <span class="title function_">count_if</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Compare</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt;v1;</span><br><span class="line">v1.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p3);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p4);</span><br><span class="line">v1.<span class="title function_">push_back</span>(p5);</span><br><span class="line"></span><br><span class="line">num = <span class="title function_">count_if</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), <span class="title class_">AgeCompare</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dde85088eed6d74a234d2a92135e63e8.png" alt="image.png"></p><h2 id="四、常用排序算法"><a href="#四、常用排序算法" class="headerlink" title="四、常用排序算法"></a>四、常用排序算法</h2><h3 id="1-sort"><a href="#1-sort" class="headerlink" title="1.sort"></a>1.sort</h3><p><strong>功能描述：</strong> 对容器内元素进行排序。</p><p><strong>函数原型：</strong></p><ul><li><code>sort(iterator beg, iterator end, _Pred);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(),greater&lt;int&gt;());</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2b52209a8be617e6e1720c8e25be99e3.png" alt="image.png"></p><h3 id="2-random-shuffle"><a href="#2-random-shuffle" class="headerlink" title="2.random_shuffle"></a>2.random_shuffle</h3><p><strong>功能描述：</strong> 洗牌 指定范围内的元素随机调整次序。</p><p><strong>函数原型：</strong></p><ul><li><code>random_shuffle(iterator beg, iterator end);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">srand</span>((unsigned int)<span class="title function_">time</span>(<span class="variable constant_">NULL</span>));</span><br><span class="line">        <span class="comment">//加随机数可以一直打乱</span></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="title function_">random_shuffle</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9f1242a32ad151397c7138dec3fc6813.png" alt="image.png"></p><h3 id="3-merge"><a href="#3-merge" class="headerlink" title="3.merge"></a>3.merge</h3><p><strong>功能描述：</strong> 两个容器元素合并，并存储到另一容器中。</p><p><strong>函数原型：</strong></p><ul><li><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> dest为目标容器开始迭代器，两个容器必须是<strong>有序的</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v.<span class="title function_">push_back</span>(i);</span><br><span class="line">v1.<span class="title function_">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2.<span class="title function_">resize</span>(v.<span class="title function_">size</span>() + v1.<span class="title function_">size</span>());</span><br><span class="line"><span class="title function_">merge</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(),v1.<span class="title function_">begin</span>(),v1.<span class="title function_">end</span>(),v2.<span class="title function_">begin</span>());</span><br><span class="line"></span><br><span class="line"><span class="title function_">for_each</span>(v2.<span class="title function_">begin</span>(), v2.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/78cf2251e391cbbd7a34254b039a95f8.png" alt="image.png"></p><h3 id="4-reverse"><a href="#4-reverse" class="headerlink" title="4.reverse"></a>4.reverse</h3><p><strong>功能描述：</strong> 将容器内元素进行反转。</p><p><strong>函数原型：</strong></p><ul><li><code>reverse(iterator beg, iterator end);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;previous: &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reverse</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;later:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cc4dbb5ee2e5f5264b25275f12cee689.png" alt="image.png"></p><h2 id="五、常用拷贝和替换算法"><a href="#五、常用拷贝和替换算法" class="headerlink" title="五、常用拷贝和替换算法"></a>五、常用拷贝和替换算法</h2><h3 id="1-copy"><a href="#1-copy" class="headerlink" title="1.copy"></a>1.copy</h3><p><strong>功能描述：</strong> 容器内指定范围的元素拷贝到另一容器中。</p><p><strong>函数原型：</strong></p><ul><li><code>copy(iterator beg, iterator end, iterator dest);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">v1.<span class="title function_">resize</span>(v.<span class="title function_">size</span>());</span><br><span class="line"><span class="title function_">copy</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b43db658c8effe1f88996209f754fc82.png" alt="image.png"></p><h3 id="2-replace"><a href="#2-replace" class="headerlink" title="2.replace"></a>2.replace</h3><p><strong>功能描述：</strong> 将容器内指定范围的旧元素修改为新元素。</p><p><strong>函数原型：</strong></p><ul><li><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Previous: &quot;</span>;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">2</span>, <span class="number">200</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Later: &quot;</span>;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8db498d7a28fdb66307dd0f293df2ce.png" alt="image.png"></p><h3 id="3-replace-if"><a href="#3-replace-if" class="headerlink" title="3.replace_if"></a>3.replace_if</h3><p><strong>功能描述:</strong>  区间内满足条件的元素，替换成指定元素。</p><p><strong>函数原型：</strong></p><ul><li><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greater3</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Previous: &quot;</span>;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace_if</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Greater30</span>(), <span class="number">200</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Later: &quot;</span>;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/045b6830acd32fed33dd211150f7696d.png" alt="image.png"></p><h3 id="4-swap"><a href="#4-swap" class="headerlink" title="4.swap"></a>4.swap</h3><p><strong>功能描述：</strong> 互换两个容器的元素。</p><p><strong>函数原型：</strong></p><ul><li><code>swap(container c1, container c2);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operator</span>()(int v)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v.<span class="title function_">push_back</span>(i);</span><br><span class="line">v1.<span class="title function_">push_back</span>(i + <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Previous: &quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="title function_">for_each</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">swap</span>(v, v1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Later: &quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="title function_">for_each</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), <span class="title class_">Print</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、常用算术生产算法"><a href="#六、常用算术生产算法" class="headerlink" title="六、常用算术生产算法"></a>六、常用算术生产算法</h2><ul><li>该算法使用时头文件注意是<code>numeric</code><h3 id="1-accumulate"><a href="#1-accumulate" class="headerlink" title="1.accumulate"></a>1.accumulate</h3><strong>功能描述：</strong> 计算区间内 容器元素累计总和。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>accumulate(iterator beg, iterator end, value);</code>value为初始值，即容器里的所有元素加起来再加上value。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;numeric&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">int total = <span class="title function_">accumulate</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Total: &quot;</span> &lt;&lt; total&lt;&lt;endl;</span><br><span class="line">total = <span class="title function_">accumulate</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">1000</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Total: &quot;</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d3437d96a8bf5f8890963cfa023fddb4.png" alt="image.png"></p><h3 id="2-fill"><a href="#2-fill" class="headerlink" title="2.fill"></a>2.fill</h3><p><strong>功能描述：</strong> 向容器中填充指定的元素。</p><p><strong>函数原型：</strong></p><ul><li><code>fill(iterator beg, iterator end, value);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.<span class="title function_">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fill</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="number">20</span>);</span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e05b5c266236b75acd4d5b0c781550ff.png" alt="image.png"></p><h2 id="七、常用集合算法"><a href="#七、常用集合算法" class="headerlink" title="七、常用集合算法"></a>七、常用集合算法</h2><h3 id="1-set-intersection"><a href="#1-set-intersection" class="headerlink" title="1.set_intersection"></a>1.set_intersection</h3><p><strong>功能描述：</strong> 求两个容器的交集。</p><ul><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong>。</li><li>set_intersection返回值既是交集中<strong>最后一个元素</strong>的位置。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> 两个集合必须是<strong>有序序列</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="title function_">push_back</span>(i);</span><br><span class="line">v1.<span class="title function_">push_back</span>(i + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2.<span class="title function_">resize</span>(<span class="title function_">min</span>(v1.<span class="title function_">size</span>(), v.<span class="title function_">size</span>()));</span><br><span class="line">vector&lt;int&gt;::iterator <span class="title class_">End</span> = <span class="title function_">set_intersection</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), v2.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v2.<span class="title function_">begin</span>(), <span class="title class_">End</span>, print);</span><br><span class="line"><span class="comment">//for_each(v2.begin(), v2.end(), print);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ff790bdecc3c08f80b06e8e7c770a620.png" alt="image.png"></p><h3 id="2-set-union"><a href="#2-set-union" class="headerlink" title="2.set_union"></a>2.set_union</h3><p><strong>功能描述：</strong> 求两个集合的并集。</p><ul><li>目标容器开辟空间需要<strong>两个容器相加</strong>。</li><li>set_union返回值既是并集中<strong>最后一个元素</strong>的位置。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> 两个集合必须是<strong>有序序列</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="title function_">push_back</span>(i);</span><br><span class="line">v1.<span class="title function_">push_back</span>(i + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2.<span class="title function_">resize</span>(v1.<span class="title function_">size</span>()+v.<span class="title function_">size</span>());</span><br><span class="line">vector&lt;int&gt;::iterator <span class="title class_">End</span> = <span class="title function_">set_union</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), v2.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v2.<span class="title function_">begin</span>(), <span class="title class_">End</span>, print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2930358f117ff8a020941ad89b4c5eff.png" alt="image.png"></p><h3 id="3-set-difference"><a href="#3-set-difference" class="headerlink" title="3.set_difference"></a>3.set_difference</h3><p><strong>功能描述：</strong> 求两个集合的差集。</p><ul><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong>。</li><li>set_difference返回值既是差集中<strong>最后一个元素</strong>的位置。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> 两个集合必须是<strong>有序序列</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">#include &lt;vector&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int v</span>)&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="title function_">push_back</span>(i);</span><br><span class="line">v1.<span class="title function_">push_back</span>(i + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2.<span class="title function_">resize</span>(v1.<span class="title function_">size</span>() + v.<span class="title function_">size</span>());</span><br><span class="line">vector&lt;int&gt;::iterator <span class="title class_">End</span> = <span class="title function_">set_difference</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), v2.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v2.<span class="title function_">begin</span>(), <span class="title class_">End</span>, print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line"><span class="title class_">End</span> = <span class="title function_">set_difference</span>(v1.<span class="title function_">begin</span>(), v1.<span class="title function_">end</span>(), v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v2.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">for_each</span>(v2.<span class="title function_">begin</span>(), <span class="title class_">End</span>, print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b75356ccb183e47471c79cacb4e8dff4.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、算法概述&quot;&gt;&lt;a href=&quot;#一、算法概述&quot; class=&quot;headerlink&quot; title=&quot;一、算法概述&quot;&gt;&lt;/a&gt;一、算法概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;算法主要是由头文件&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;l</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++学习笔记" scheme="https://vaioretto1.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>STL学习笔记--函数对象</title>
    <link href="https://vaioretto1.github.io/posts/10179f5c.html"/>
    <id>https://vaioretto1.github.io/posts/10179f5c.html</id>
    <published>2022-12-14T05:37:41.000Z</published>
    <updated>2022-12-30T03:40:08.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、函数对象"><a href="#一、函数对象" class="headerlink" title="一、函数对象"></a>一、函数对象</h2><h3 id="1-函数对象概念"><a href="#1-函数对象概念" class="headerlink" title="1.函数对象概念"></a>1.函数对象概念</h3><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong> 函数对象(<strong>仿函数</strong>)是一个<strong>类</strong>，不是一个函数</p><h3 id="2-函数对象使用"><a href="#2-函数对象使用" class="headerlink" title="2.函数对象使用"></a>2.函数对象使用</h3><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int <span class="title function_">operator</span>()(int v1, int v2)&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">Print</span>()&#123; count = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operator</span>()(string text)&#123;</span><br><span class="line">cout &lt;&lt; text&lt;&lt;endl;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">int count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test2</span>(<span class="params">Print &amp; a, string text</span>)&#123;</span><br><span class="line"><span class="title function_">a</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title class_">Add</span> add;</span><br><span class="line">cout &lt;&lt; <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Print</span> print;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count: &quot;</span> &lt;&lt; print.<span class="property">count</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test2</span>(print, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/16cb5117f6989ef4ef139d3812c2baa3.png" alt="image.png"></p><h2 id="二、谓词"><a href="#二、谓词" class="headerlink" title="二、谓词"></a>二、谓词</h2><h3 id="1-谓词概念"><a href="#1-谓词概念" class="headerlink" title="1.谓词概念"></a>1.谓词概念</h3><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受<strong>一个参数</strong>，那么叫做<strong>一元谓词</strong></li><li>如果operator()接受<strong>两个参数</strong>，那么叫做<strong>二元谓词</strong><h3 id="2-一元谓词"><a href="#2-一元谓词" class="headerlink" title="2.一元谓词"></a>2.一元谓词</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FindFive</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(int val)&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) v.<span class="title function_">push_back</span>(i);</span><br><span class="line">vector&lt;int&gt;::iterator it = <span class="title function_">find_if</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">FindFive</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Position: &quot;</span> &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cbccb94b860c9773ce47dc9c31bb5493.png" alt="image.png"></p><h3 id="2-二元谓词"><a href="#2-二元谓词" class="headerlink" title="2.二元谓词"></a>2.二元谓词</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mycompare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(int val1, int val2)&#123;</span><br><span class="line"><span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">70</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), <span class="title class_">Mycompare</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1b29a5d04bcfbd933d05b7c645774b4.png" alt="image.png"></p><h3 id="三、内建函数对象"><a href="#三、内建函数对象" class="headerlink" title="三、内建函数对象"></a>三、内建函数对象</h3><h3 id="1-内建函数对象意义"><a href="#1-内建函数对象意义" class="headerlink" title="1.内建函数对象意义"></a>1.内建函数对象意义</h3><p><strong>概念：</strong> STL内建了一些函数对象</p><p><strong>分类:</strong></p><ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li><p>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></p><h3 id="2-算术仿函数"><a href="#2-算术仿函数" class="headerlink" title="2.算术仿函数"></a>2.算术仿函数</h3><p><strong>功能描述：</strong></p></li><li><p>实现四则运算。</p></li><li>其中negate是一元运算，其他都是二元运算。</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;;</code> 加法仿函数。</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;;</code> 减法仿函数。</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;;</code> 乘法仿函数。</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;;</code> 除法仿函数。</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;;</code> 取模仿函数。</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;;</code> 取反仿函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">negate&lt;int&gt;n;</span><br><span class="line">cout &lt;&lt; <span class="title function_">n</span>(<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line">plus&lt;int&gt;p;</span><br><span class="line">cout &lt;&lt; <span class="title function_">p</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt; endl;</span><br><span class="line">minus&lt;int&gt;m1;</span><br><span class="line">cout &lt;&lt; <span class="title function_">m1</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt; endl;</span><br><span class="line">multiplies&lt;int&gt;m2;</span><br><span class="line">cout &lt;&lt; <span class="title function_">m2</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt; endl;</span><br><span class="line">divides&lt;int&gt;d;</span><br><span class="line">cout &lt;&lt; <span class="title function_">d</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt; endl;</span><br><span class="line">modulus&lt;int&gt;m3;</span><br><span class="line">cout &lt;&lt; <span class="title function_">m3</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7702534081491d59948b3de945f23196.png" alt="image.png"></p><h3 id="3-关系仿函数"><a href="#3-关系仿函数" class="headerlink" title="3.关系仿函数"></a>3.关系仿函数</h3><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;;</code> 等于。</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;;</code> 不等于。</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;;</code> 大于。</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;;</code> 大于等于。</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;;</code> 小于。</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;;</code> 小于等于。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">70</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sort</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(),greater&lt;int&gt;());<span class="comment">//实现降序</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f723df3c6407313bdc018d69ff30fca4.png" alt="image.png"></p><h3 id="4-逻辑仿函数"><a href="#4-逻辑仿函数" class="headerlink" title="4.逻辑仿函数"></a>4.逻辑仿函数</h3><p>仿函数原型：</p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;;</code> 逻辑与。</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;;</code> 逻辑或。</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;;</code> 逻辑非。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;bool&gt;v;</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;bool&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;bool&gt;v1;</span><br><span class="line">v1.<span class="title function_">resize</span>(v.<span class="title function_">size</span>());</span><br><span class="line"><span class="title function_">transform</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), v1.<span class="title function_">begin</span>(), logical_not&lt;int&gt;());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;bool&gt;::iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/48f013e9591bf985eb5ac9ad45cafc96.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、函数对象&quot;&gt;&lt;a href=&quot;#一、函数对象&quot; class=&quot;headerlink&quot; title=&quot;一、函数对象&quot;&gt;&lt;/a&gt;一、函数对象&lt;/h2&gt;&lt;h3 id=&quot;1-函数对象概念&quot;&gt;&lt;a href=&quot;#1-函数对象概念&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++学习笔记" scheme="https://vaioretto1.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>STL学习笔记--常用容器二</title>
    <link href="https://vaioretto1.github.io/posts/c990c56c.html"/>
    <id>https://vaioretto1.github.io/posts/c990c56c.html</id>
    <published>2022-12-14T05:37:10.000Z</published>
    <updated>2022-12-30T03:40:08.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、STACK容器"><a href="#一、STACK容器" class="headerlink" title="一、STACK容器"></a>一、STACK容器</h2><h3 id="1-stack容器基本概念"><a href="#1-stack容器基本概念" class="headerlink" title="1.stack容器基本概念"></a>1.stack容器基本概念</h3><ul><li><p>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有<strong>一个出口</strong></p></li><li><p>栈中只有<strong>顶端</strong>的元素才可以被外界使用，因此栈<strong>不允许有遍历行为</strong></p></li><li><p>栈中进入数据称为 — <strong>入栈</strong>  <code>push</code></p></li><li><p>栈中弹出数据称为 — <strong>出栈</strong>  <code>pop</code></p><h3 id="2-stack容器常用接口"><a href="#2-stack容器常用接口" class="headerlink" title="2.stack容器常用接口"></a>2.stack容器常用接口</h3><p>函数原型：</p><p>构造函数：</p></li><li><p><code>stack&lt;T&gt; stk;</code> stack采用模板类实现， stack对象的默认构造形式。</p></li><li><code>stack(const stack &amp;stk);</code> 拷贝构造函数。</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> 重载等号操作符。</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> 向栈顶添加元素。</li><li><code>pop();</code> 从栈顶移除第一个元素。</li><li><code>top();</code> 返回栈顶元素。</li></ul><p>大小操作：</p><ul><li><code>empty();</code> 判断堆栈是否为空。</li><li><code>size();</code> 返回栈的大小。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;queue&gt;   </span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">stack&lt;int&gt; s;</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="title function_">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;yuansu: &quot;</span> &lt;&lt; s.<span class="title function_">top</span>() &lt;&lt; endl;</span><br><span class="line">s.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;daixao: &quot;</span> &lt;&lt; s.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e0716ad8a760dfdd05c67cbf4aa13c87.png" alt="image.png"></p><h2 id="二、QUEUE容器"><a href="#二、QUEUE容器" class="headerlink" title="二、QUEUE容器"></a>二、QUEUE容器</h2><h3 id="1-queue容器基本概念"><a href="#1-queue容器基本概念" class="headerlink" title="1.queue容器基本概念"></a>1.queue容器基本概念</h3><ul><li><p>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有<strong>两个出口</strong></p></li><li><p>队列容器允许从一端新增元素，从另一端移除元素</p></li><li><p>队列中只有<strong>队头</strong>和<strong>队尾</strong>才可以被外界使用，因此队列<strong>不允许有遍历行为</strong></p></li><li><p>队列中进数据称为 — <strong>入队</strong> <code>push</code></p></li><li><p>队列中出数据称为 — <strong>出队</strong> <code>pop</code></p><h3 id="2-queue容器常用接口"><a href="#2-queue容器常用接口" class="headerlink" title="2.queue容器常用接口"></a>2.queue容器常用接口</h3><p>函数原型：</p><p>构造函数：</p></li><li><p><code>queue&lt;T&gt; que;</code> queue采用模板类实现，queue对象的默认构造形式。</p></li><li><code>queue(const queue &amp;que);</code> 拷贝构造函数。</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> 重载等号操作符。</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> 往队尾添加元素。</li><li><code>pop();</code> 从队头移除第一个元素。</li><li><code>back();</code> 返回最后一个元素。</li><li><code>front();</code> 返回第一个元素。</li></ul><p>大小操作：</p><ul><li><code>empty();</code> 判断堆栈是否为空。</li><li><code>size();</code> 返回栈的大小。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;queue&gt;   </span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name= name;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">queue&lt;<span class="title class_">Person</span>&gt; s;</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;hh&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;hh&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;hh&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;hh&quot;</span>, <span class="number">21</span>);</span><br><span class="line">s.<span class="title function_">push</span>(p1);</span><br><span class="line">s.<span class="title function_">push</span>(p2);</span><br><span class="line">s.<span class="title function_">push</span>(p3);</span><br><span class="line">s.<span class="title function_">push</span>(p4);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;daixao: &quot;</span> &lt;&lt; s.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (!s.<span class="title function_">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;shou:  &quot;</span> &lt;&lt; s.<span class="title function_">front</span>().<span class="property">name</span>&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;s.<span class="title function_">front</span>().<span class="property">age</span>&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;wei:  &quot;</span> &lt;&lt; s.<span class="title function_">back</span>().<span class="property">name</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s.<span class="title function_">back</span>().<span class="property">age</span> &lt;&lt; endl;</span><br><span class="line">s.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;daixao: &quot;</span> &lt;&lt; s.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/21e8acccb2db7e44dd95fa3a69db6bb7.png" alt="image.png"></p><h2 id="三、LIST容器"><a href="#三、LIST容器" class="headerlink" title="三、LIST容器"></a>三、LIST容器</h2><h3 id="1-list容器基本概念"><a href="#1-list容器基本概念" class="headerlink" title="1.list容器基本概念"></a>1.list容器基本概念</h3><ul><li><p>功能：将数据进行<strong>链式存储</strong></p><p><strong>链表</strong>（list）是一种物理存储单元上<strong>非连续</strong>的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个<strong>双向循环链表</strong></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持<strong>前移</strong>和<strong>后移</strong>，属于<strong>双向迭代器</strong></p></li></ul><p>list的<strong>优点</strong>：</p><ul><li>采用<strong>动态存储分配</strong>，不会造成内存浪费和溢出</li><li>链表执行<strong>插入</strong>和<strong>删除</strong>操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的<strong>缺点</strong>：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的<strong>失效</strong>，这在vector是<strong>不成立</strong>的</p><p>STL中<strong>List</strong>和<strong>vector</strong>是两个最常被使用的容器</p><h3 id="2-list容器构造函数"><a href="#2-list容器构造函数" class="headerlink" title="2.list容器构造函数"></a>2.list容器构造函数</h3><p>函数原型：</p><ul><li><code>list&lt;T&gt; lst;</code> list采用采用模板类实现,对象的默认构造形式。</li><li><p><code>list(beg,end);</code> 构造函数将[beg, end)区间中的元素拷贝给本身。</p></li><li><p><code>list(n,elem);</code> 构造函数将n个elem拷贝给本身。</p></li><li><code>list(const list &amp;lst);</code> 拷贝构造函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">40</span>);</span><br><span class="line">        <span class="title function_">print</span>(l1);</span><br><span class="line">        </span><br><span class="line">list&lt;int&gt;<span class="title function_">l2</span>(l1.<span class="title function_">begin</span>(), l1.<span class="title function_">end</span>());</span><br><span class="line"><span class="title function_">print</span>(l2);</span><br><span class="line">        </span><br><span class="line">list&lt;int&gt;<span class="title function_">l3</span>(l2);</span><br><span class="line"><span class="title function_">print</span>(l3);</span><br><span class="line">        </span><br><span class="line">        list&lt;int&gt;<span class="title function_">l4</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="title function_">print</span>(l4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d2d5cbaa1008e3dbdc4f3da67ff37664.png" alt="image.png"></p><h3 id="3-list容器赋值和交换操作"><a href="#3-list容器赋值和交换操作" class="headerlink" title="3.list容器赋值和交换操作"></a>3.list容器赋值和交换操作</h3><p>函数原型：</p><ul><li><p><code>assign(beg, end);</code> 将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> 将n个elem拷贝赋值给本身。</p></li><li><code>list&amp; operator=(const list &amp;lst);</code> 重载等号操作符</li><li><code>swap(lst);</code> 将lst与本身的元素互换。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;l2;</span><br><span class="line">l2 = l1;</span><br><span class="line"><span class="title function_">print</span>(l2);</span><br><span class="line">        </span><br><span class="line">list&lt;int&gt;l3;</span><br><span class="line">l3.<span class="title function_">assign</span>(l2.<span class="title function_">begin</span>(), l2.<span class="title function_">end</span>());</span><br><span class="line"><span class="title function_">print</span>(l3);</span><br><span class="line">        </span><br><span class="line">list&lt;int&gt;l4;</span><br><span class="line">l4.<span class="title function_">assign</span>(<span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title function_">print</span>(l4);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">swap</span>(l4);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f3aab398a12d2aa395a5454cefd61d7.png" alt="image.png"></p><h3 id="4-list容器大小操作"><a href="#4-list容器大小操作" class="headerlink" title="4.list容器大小操作"></a>4.list容器大小操作</h3><p>函数原型：</p><ul><li><p><code>size();</code> 返回容器中元素的个数。</p></li><li><p><code>empty();</code> 判断容器是否为空。</p></li><li><p><code>resize(num);</code> 重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem);</code> 重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line"><span class="keyword">if</span> (l1.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;not empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;not empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;个数:&quot;</span> &lt;&lt; l1.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">resize</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">l1.<span class="title function_">resize</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/57c0f4d9a03707a65f8a78bf6a1f204c.png" alt="image.png"></p><h3 id="5-list容器插入和删除"><a href="#5-list容器插入和删除" class="headerlink" title="5.list容器插入和删除"></a>5.list容器插入和删除</h3><p>函数原型：</p><ul><li><p><code>push_back(elem);</code> 在容器尾部加入一个元素。</p></li><li><p><code>pop_back();</code> 删除容器中最后一个元素。</p></li><li><code>push_front(elem);</code> 在容器开头插入一个元素。</li><li><code>pop_front();</code> 从容器开头移除第一个元素。</li><li><code>insert(pos,elem);</code> 在pos位置插elem元素的拷贝，返回新数据的位置。</li><li><code>insert(pos,n,elem);</code> 在pos位置插入n个elem数据，无返回值。</li><li><p><code>insert(pos,beg,end);</code> 在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> 移除容器的所有数据。</p></li><li><code>erase(beg,end);</code> 删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><code>erase(pos);</code> 删除pos位置的数据，返回下一个数据的位置。</li><li><code>remove(elem);</code> 删除容器中所有与elem值匹配的元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">push_front</span>(<span class="number">100</span>);</span><br><span class="line">l1.<span class="title function_">push_front</span>(<span class="number">200</span>);</span><br><span class="line">l1.<span class="title function_">push_front</span>(<span class="number">300</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">pop_back</span>();</span><br><span class="line">l1.<span class="title function_">pop_front</span>();</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;::iterator it = l1.<span class="title function_">begin</span>();</span><br><span class="line">l1.<span class="title function_">insert</span>(++it, <span class="number">1000</span>);</span><br><span class="line">it = l1.<span class="title function_">begin</span>();</span><br><span class="line">l1.<span class="title function_">insert</span>(it, <span class="number">3</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">erase</span>(it);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"><span class="comment">/*l1.erase(l1.begin(), l1.end());</span></span><br><span class="line"><span class="comment">print(l1);*/</span></span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">remove</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b0165f308065432316c37bb4ea15fa2c.png" alt="image.png"></p><h3 id="6-list容器数据存取"><a href="#6-list容器数据存取" class="headerlink" title="6.list容器数据存取"></a>6.list容器数据存取</h3><p>函数原型：</p><ul><li><p><code>front();</code> 返回第一个元素。</p></li><li><p><code>back();</code> 返回最后一个元素。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/*l1[0]; //list容器不支持[]方式访问数据</span></span><br><span class="line"><span class="comment">l1.at(1);//list容器不支持at方式访问数据*/</span></span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;first:&quot;</span> &lt;&lt; l1.<span class="title function_">front</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;last:&quot;</span> &lt;&lt; l1.<span class="title function_">back</span>() &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">list&lt;int&gt;::iterator it = l1.<span class="title function_">begin</span>();</span><br><span class="line"><span class="comment">/*it + 1;//list容器不支持跳跃访问</span></span><br><span class="line"><span class="comment">        （应为不支持+数字防止加上大于1的数字，所以直接一刀切）*/</span></span><br><span class="line">        it++;</span><br><span class="line">it--;<span class="comment">//这两种方式则可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3b625e4a7aca5d50f2cc84ae8dab4d56.png" alt="image.png"></p><h3 id="7-list容器反转和排序"><a href="#7-list容器反转和排序" class="headerlink" title="7.list容器反转和排序"></a>7.list容器反转和排序</h3><p>函数原型：</p><ul><li><p><code>reverse();</code> 反转链表。</p></li><li><p><code>sort();</code> 链表排序。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params"><span class="keyword">const</span> list&lt;int&gt;v1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;int&gt;::const_iterator it = v1.<span class="title function_">begin</span>(); it != v1.<span class="title function_">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool <span class="title class_">Compare</span>(int v1, int v2)&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;int&gt; l1;</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">10</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">30</span>);</span><br><span class="line">l1.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">        </span><br><span class="line">l1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">        </span><br><span class="line">l1.<span class="title function_">sort</span>(<span class="title class_">Compare</span>);<span class="comment">//其本身原理就是默认放进一个从小到大排序的函数，</span></span><br><span class="line">        <span class="comment">//所以可以往里面放进一个其他函数改变排序顺序</span></span><br><span class="line"><span class="title function_">print</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9264152e4bcc8c7758f2e8ce909a96b.png" alt="image.png"></p><h3 id="8-list容器自定义数据排序"><a href="#8-list容器自定义数据排序" class="headerlink" title="8.list容器自定义数据排序"></a>8.list容器自定义数据排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int age;</span><br><span class="line">string name;</span><br><span class="line">int height;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>(string name, int age, int height)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line"><span class="variable language_">this</span>-&gt;height = height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool <span class="title class_">ComparePerson</span>(<span class="title class_">Person</span> &amp;p1,<span class="title class_">Person</span> &amp;p2)&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.<span class="property">age</span> == p2.<span class="property">age</span>) <span class="keyword">return</span> p1.<span class="property">height</span> &gt; p2.<span class="property">height</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p1.<span class="property">age</span> &lt; p2.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">list&lt;<span class="title class_">Person</span>&gt; l1;</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>, <span class="number">190</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">10</span>, <span class="number">160</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">10</span>, <span class="number">180</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">12</span>, <span class="number">190</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">12</span>, <span class="number">140</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p6</span>(<span class="string">&quot;ff&quot;</span>, <span class="number">15</span>, <span class="number">190</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p7</span>(<span class="string">&quot;gg&quot;</span>, <span class="number">16</span>, <span class="number">190</span>);</span><br><span class="line"></span><br><span class="line">l1.<span class="title function_">push_back</span>(p1);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p2);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p3);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p4);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p5);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p6);</span><br><span class="line">l1.<span class="title function_">push_back</span>(p7);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="title class_">Person</span>&gt;::const_iterator it = l1.<span class="title function_">begin</span>(); it != l1.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span>&lt;&lt;(*it).<span class="property">name</span> &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;age: &quot;</span>&lt;&lt;(*it).<span class="property">age</span></span><br><span class="line">                &lt;&lt;<span class="string">&quot; height: &quot;</span>&lt;&lt;(*it).<span class="property">height</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">l1.<span class="title function_">sort</span>(<span class="title class_">ComparePerson</span>);</span><br><span class="line">        <span class="comment">//令其在年龄相同的情况下按身高降序</span></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="title class_">Person</span>&gt;::const_iterator it = l1.<span class="title function_">begin</span>(); it != l1.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; (*it).<span class="property">name</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt; (*it).<span class="property">age</span> </span><br><span class="line">                &lt;&lt; <span class="string">&quot; height: &quot;</span> &lt;&lt; (*it).<span class="property">height</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/86dc9d52ba8a0de22a183a6f17512cca.png" alt="image.png"></p><h2 id="四、SET容器"><a href="#四、SET容器" class="headerlink" title="四、SET容器"></a>四、SET容器</h2><h3 id="1-set容器基本概念"><a href="#1-set容器基本概念" class="headerlink" title="1.set容器基本概念"></a>1.set容器基本概念</h3><p><strong>简介：</strong> 所有元素都会在插入时自动被排序</p><p><strong>本质：</strong> set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</p><p><strong>set</strong>和<strong>multiset</strong>区别：</p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li><p>multiset不会检测数据，因此可以插入重复数据</p><h3 id="2-set容器构造函数和赋值操作"><a href="#2-set容器构造函数和赋值操作" class="headerlink" title="2.set容器构造函数和赋值操作"></a>2.set容器构造函数和赋值操作</h3><p>函数原型：</p><p>构造：</p></li><li><p><code>set&lt;T&gt; st;</code> 默认构造函数。</p></li><li><p><code>set(const set &amp;st);</code> 拷贝构造函数。</p></li></ul><p>赋值。</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> 重载等号操作符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">set&lt;int&gt;s</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;int&gt;::const_iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);<span class="comment">//不允许同元素存在</span></span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">40</span>);<span class="comment">//自动排序</span></span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="title function_">print</span>(s);</span><br><span class="line"></span><br><span class="line">set&lt;int&gt; <span class="title function_">s2</span>(s);</span><br><span class="line"><span class="title function_">print</span>(s2);</span><br><span class="line"></span><br><span class="line">set&lt;int&gt;s3;</span><br><span class="line">s3 = s2;</span><br><span class="line"><span class="title function_">print</span>(s3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a285942e9965e2c1a43e48140c313104.png" alt="image.png"></p><h3 id="3-set容器大小和交换操作"><a href="#3-set容器大小和交换操作" class="headerlink" title="3.set容器大小和交换操作"></a>3.set容器大小和交换操作</h3><p>函数原型：</p><ul><li><p><code>size();</code> 返回容器中元素的数目。</p></li><li><p><code>empty();</code> 判断容器是否为空。</p></li><li><code>swap(st);</code> 交换两个集合容器。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">set&lt;int&gt;s</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;int&gt;::const_iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;not empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; s.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">40</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (s.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;not empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; s.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set&lt;int&gt; s2;</span><br><span class="line">s2.<span class="title function_">insert</span>(<span class="number">100</span>);</span><br><span class="line">s2.<span class="title function_">insert</span>(<span class="number">200</span>);</span><br><span class="line">s2.<span class="title function_">insert</span>(<span class="number">400</span>);</span><br><span class="line">s2.<span class="title function_">insert</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;preview: s&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s2&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">print</span>(s2);</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">swap</span>(s2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;next: s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s2&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">print</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="https://img-blog.csdnimg.cn/img_convert/ae8a2df18197e08c4dca590be21f7936.png" alt="image.png"></p><h3 id="4-set容器插入和删除"><a href="#4-set容器插入和删除" class="headerlink" title="4.set容器插入和删除"></a>4.set容器插入和删除</h3><p>函数原型：</p><ul><li><code>insert(elem);</code> 在容器中插入元素。</li><li><code>clear();</code> 清除所有元素。</li><li><code>erase(pos);</code> 删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><p><code>erase(beg, end);</code> 删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</p></li><li><p><code>erase(elem);</code> 删除容器中值为elem的元素。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">set&lt;int&gt;s</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;int&gt;::const_iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">40</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">erase</span>(s.<span class="title function_">begin</span>());</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">        </span><br><span class="line">s.<span class="title function_">erase</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">        </span><br><span class="line">s.<span class="title function_">erase</span>(s.<span class="title function_">begin</span>(), s.<span class="title function_">end</span>());<span class="comment">//s.clear(）</span></span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4f9c1055516931d0e58894f3b7e765ce.png" alt="image.png"></p><h3 id="5-set容器查找和统计"><a href="#5-set容器查找和统计" class="headerlink" title="5.set容器查找和统计"></a>5.set容器查找和统计</h3><p>函数原型：</p><ul><li><p><code>find(key);</code> 查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end()。</p></li><li><p><code>count(key);</code> 统计key的元素个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">set&lt;int&gt;s</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;int&gt;::const_iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">40</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">print</span>(s);</span><br><span class="line"></span><br><span class="line">set&lt;int&gt;::iterator it = s.<span class="title function_">find</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (it != s.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;找到: &quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">it = s.<span class="title function_">find</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (it != s.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int num = s.<span class="title function_">count</span>(<span class="number">20</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">num = s.<span class="title function_">count</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/b04b12c62657e5f9abf0924d5f42892d.png" alt="image.png"></p><h3 id="6-set容器和multiset容器区别"><a href="#6-set容器和multiset容器区别" class="headerlink" title="6.set容器和multiset容器区别"></a>6.set容器和multiset容器区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line"></span><br><span class="line">pair&lt;set&lt;int&gt;::iterator, bool&gt;ret =s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.<span class="property">second</span>) cout &lt;&lt; <span class="string">&quot;第一次查入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;第二次插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ret =s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.<span class="property">second</span>) cout &lt;&lt; <span class="string">&quot;第一次查入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;第二次插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">multiset&lt;int&gt; m;</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (multiset&lt;int&gt;::iterator it = m.<span class="title function_">begin</span>(); it != m.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e03ca053d294a7a369487c47cb91ea6.png" alt="image.png"></p><h3 id="7-pair队组创建"><a href="#7-pair队组创建" class="headerlink" title="7.pair队组创建"></a>7.pair队组创建</h3><p>创建方式：</p><ul><li><p><code>pair&lt;type, type&gt; p ( value1, value2 );</code></p></li><li><p><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">pair&lt;string, int&gt;<span class="title function_">p</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">18</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; p.<span class="property">first</span> &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; p.<span class="property">second</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">pair&lt;string, int&gt;p1=<span class="title function_">make_pair</span>(<span class="string">&quot;bb&quot;</span>,<span class="number">19</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; p1.<span class="property">first</span> &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; p1.<span class="property">second</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0f3c25b610239d96462b3222b9507015.png" alt="image.png"></p><h3 id="8-set容器内置类型指定排序"><a href="#8-set容器内置类型指定排序" class="headerlink" title="8.set容器内置类型指定排序"></a>8.set容器内置类型指定排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(int v1, int v2)&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;int, <span class="title class_">Compare</span>&gt;s;</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">50</span>);</span><br><span class="line">s.<span class="title function_">insert</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (set&lt;int, <span class="title class_">Compare</span>&gt;::iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/452e75ff62b719aee22b8e2ae2eb5b99.png" alt="image.png"></p><h3 id="9-set容器自定义数据类型指定排序"><a href="#9-set容器自定义数据类型指定排序" class="headerlink" title="9.set容器自定义数据类型指定排序"></a>9.set容器自定义数据类型指定排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">int age;</span><br><span class="line">string name;</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(<span class="keyword">const</span> <span class="title class_">Person</span> &amp;p1, <span class="keyword">const</span> <span class="title class_">Person</span> &amp;p2)&#123;</span><br><span class="line"><span class="keyword">return</span> p1.<span class="property">age</span>&gt;p2.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//仿函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">set&lt;<span class="title class_">Person</span>, <span class="title class_">Compare</span>&gt;s;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//有一成员数据相同，set容器将只保留第一个</span></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p4</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p5</span>(<span class="string">&quot;ee&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p6</span>(<span class="string">&quot;ff&quot;</span>, <span class="number">15</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p7</span>(<span class="string">&quot;gg&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        </span><br><span class="line">        s.<span class="title function_">insert</span>(p1);</span><br><span class="line">        s.<span class="title function_">insert</span>(p2);</span><br><span class="line">        s.<span class="title function_">insert</span>(p3);</span><br><span class="line">        s.<span class="title function_">insert</span>(p4);</span><br><span class="line">        s.<span class="title function_">insert</span>(p5);</span><br><span class="line">        s.<span class="title function_">insert</span>(p6);</span><br><span class="line">        s.<span class="title function_">insert</span>(p7);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="title class_">Person</span>, <span class="title class_">Compare</span>&gt;::iterator it = s.<span class="title function_">begin</span>(); it != s.<span class="title function_">end</span>(); it++) cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; (*it).<span class="property">name</span> &lt;&lt; <span class="string">&quot; age:&quot;</span> &lt;&lt; (*it).<span class="property">age</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ae7fb6de4ded8298ba2bf3c17c84bec.png" alt="image.png"></p><h2 id="五、MAP容器"><a href="#五、MAP容器" class="headerlink" title="五、MAP容器"></a>五、MAP容器</h2><h3 id="1-map容器基本概念"><a href="#1-map容器基本概念" class="headerlink" title="1.map容器基本概念"></a>1.map容器基本概念</h3><p><strong>简介：</strong></p><ul><li>map中所有元素都是<strong>pair</strong></li><li>pair中第一个元素为<strong>key</strong>（键值），起到索引作用，第二个元素为<strong>value</strong>（实值）</li><li>所有元素都会根据元素的键值<strong>自动排序</strong></li></ul><p><strong>本质：</strong>  map/multimap属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</p><p><strong>优点：</strong> 可以根据<strong>key值快速找到value值</strong></p><p>map和multimap<strong>区别</strong>：</p><ul><li>map<strong>不允许容器中有重复</strong>key值元素</li><li><p>multimap<strong>允许容器中有重复</strong>key值元素</p><h3 id="2-map容器构造函数和赋值操作"><a href="#2-map容器构造函数和赋值操作" class="headerlink" title="2.map容器构造函数和赋值操作"></a>2.map容器构造函数和赋值操作</h3><p>函数原型：<br><strong>构造：</strong></p></li><li><p><code>map&lt;T1, T2&gt; mp;</code> map默认构造函数。</p></li><li><p><code>map(const map &amp;mp);</code> 拷贝构造函数。</p></li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code> 重载等号操作符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">map&lt;int, int&gt;&amp;m</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;int, int&gt;::iterator it = m.<span class="title function_">begin</span>(); it != m.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">        <span class="title function_">print</span>(m);</span><br><span class="line"></span><br><span class="line">map&lt;int, int&gt;<span class="title function_">m2</span>(m);</span><br><span class="line"><span class="title function_">print</span>(m);</span><br><span class="line"></span><br><span class="line">map&lt;int, int&gt;m3;</span><br><span class="line">m3 = m2;</span><br><span class="line"><span class="title function_">print</span>(m3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line">        </span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa449578e5017ed1ad20e4cf9d3dc050.png" alt="image.png"></p><h3 id="3-map容器大小和交换操作"><a href="#3-map容器大小和交换操作" class="headerlink" title="3.map容器大小和交换操作"></a>3.map容器大小和交换操作</h3><p>函数原型：</p><ul><li><code>size();</code> 返回容器中元素的数目。</li><li><code>empty();</code> 判断容器是否为空。</li><li><code>swap(st);</code> 交换两个集合容器。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">map&lt;int, int&gt;&amp;m</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;int, int&gt;::iterator it = m.<span class="title function_">begin</span>(); it != m.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Not empty &quot;</span> &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; m.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"><span class="keyword">if</span> (m.<span class="title function_">empty</span>()) cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Not empty &quot;</span> &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; m.<span class="title function_">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">map&lt;int, int&gt;m2;</span><br><span class="line">m2.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m2.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m2.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">print</span>(m);</span><br><span class="line"><span class="title function_">print</span>(m2);</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">swap</span>(m2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="title function_">print</span>(m);</span><br><span class="line"><span class="title function_">print</span>(m2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line">        </span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7679ddf8ba23d4bb6941b6d3ebd1e605.png" alt="image.png"></p><h3 id="4-map容器插入和删除"><a href="#4-map容器插入和删除" class="headerlink" title="4.map容器插入和删除"></a>4.map容器插入和删除</h3><p>函数原型：</p><ul><li><code>insert(elem);</code> 在容器中插入元素。</li><li><code>clear();</code> 清除所有元素。</li><li><code>erase(pos);</code> 删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><p><code>erase(beg, end);</code> 删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</p></li><li><p><code>erase(key);</code> 删除容器中值为key的元素。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">map&lt;int, int&gt;&amp;m</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;int, int&gt;::iterator it = m.<span class="title function_">begin</span>(); it != m.<span class="title function_">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(map&lt;int, int&gt;::<span class="title function_">value_type</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*cout &lt;&lt; m[5];*/</span></span><br><span class="line">        <span class="comment">//虽然没有输入数据，但照样能打印出来，数值为0</span></span><br><span class="line"><span class="title function_">print</span>(m);</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">erase</span>(m.<span class="title function_">begin</span>());</span><br><span class="line">m.<span class="title function_">erase</span>(<span class="number">3</span>);</span><br><span class="line"><span class="title function_">print</span>(m);</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">erase</span>(m.<span class="title function_">begin</span>(), m.<span class="title function_">end</span>());<span class="comment">//m.clear();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line">        </span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1f061a2a232fe7a7d44052e4c4691648.png" alt="image.png"></p><h3 id="5-map容器查找和统计"><a href="#5-map容器查找和统计" class="headerlink" title="5.map容器查找和统计"></a>5.map容器查找和统计</h3><p>函数原型：</p><ul><li><p><code>find(key);</code> 查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end()。</p></li><li><p><code>count(key);</code> 统计key的元素个数。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(map&lt;int, int&gt;::<span class="title function_">value_type</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">map&lt;int, int&gt;::iterator it = m.<span class="title function_">find</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (it != m.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; (*it).<span class="property">second</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">it = m.<span class="title function_">find</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (it != m.<span class="title function_">end</span>()) cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int num = m.<span class="title function_">count</span>(<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line">        </span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e03f75671132f4e623b0a0b0e1f6b34d.png" alt="image.png"></p><h3 id="6-map容器排序"><a href="#6-map容器排序" class="headerlink" title="6.map容器排序"></a>6.map容器排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line">bool <span class="title function_">operator</span>()(int val1, int val2)&#123;</span><br><span class="line"><span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">map&lt;int, int, <span class="title class_">Compare</span>&gt;m;</span><br><span class="line">m.<span class="title function_">insert</span>(pair&lt;int, int&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(<span class="title function_">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="title function_">insert</span>(map&lt;int, int&gt;::<span class="title function_">value_type</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (map&lt;int, int, <span class="title class_">Compare</span>&gt;::iterator it = m.<span class="title function_">begin</span>(); it != m.<span class="title function_">end</span>();it++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key: &quot;</span> &lt;&lt; (*it).<span class="property">first</span> &lt;&lt; <span class="string">&quot; value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7c888323ff0f9b98bb5af483d9c83c33.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、STACK容器&quot;&gt;&lt;a href=&quot;#一、STACK容器&quot; class=&quot;headerlink&quot; title=&quot;一、STACK容器&quot;&gt;&lt;/a&gt;一、STACK容器&lt;/h2&gt;&lt;h3 id=&quot;1-stack容器基本概念&quot;&gt;&lt;a href=&quot;#1-stack容器基本概</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++学习笔记" scheme="https://vaioretto1.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>STL学习笔记--常用容器一</title>
    <link href="https://vaioretto1.github.io/posts/f210ebc5.html"/>
    <id>https://vaioretto1.github.io/posts/f210ebc5.html</id>
    <published>2022-12-11T08:28:07.000Z</published>
    <updated>2022-12-30T03:37:20.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、STL初识"><a href="#一、STL初识" class="headerlink" title="一、STL初识"></a><strong>一、STL初识</strong></h2><h3 id="1-STL从广义上分为-容器-container-、算法-algorithm-、迭代器-iterator"><a href="#1-STL从广义上分为-容器-container-、算法-algorithm-、迭代器-iterator" class="headerlink" title="1. STL从广义上分为: 容器(container)、算法(algorithm)、迭代器(iterator)"></a>1. STL从广义上分为: <strong>容器(container)、算法(algorithm)、迭代器(iterator)</strong></h3><h3 id="2-STL几乎所有的代码都采用了模板类或者模板函数"><a href="#2-STL几乎所有的代码都采用了模板类或者模板函数" class="headerlink" title="2. STL几乎所有的代码都采用了模板类或者模板函数"></a>2. STL几乎<strong>所有的代码都采用了</strong>模板类<strong>或者模板</strong>函数</h3><h3 id="3-STL大体分为六大组件，分别是-容器、算法、迭代器、仿函数、适配器、空间配置器"><a href="#3-STL大体分为六大组件，分别是-容器、算法、迭代器、仿函数、适配器、空间配置器" class="headerlink" title="3. STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器、空间配置器"></a>3. STL大体分为<strong>六大组件</strong>，分别是:<strong>容器、算法、迭代器、仿函数、适配器、空间配置器</strong></h3><ul><li><strong>容器</strong>：各种数据结构，如vector、list、deque、set、map等,用来存放数据。 </li><li><strong>算法</strong>：各种常用的算法，如sort、find、copy、for_each等 </li><li><strong>迭代器</strong>：扮演了容器与算法之间的胶合剂。 </li><li><strong>仿函数</strong>：行为类似函数，可作为算法的某种策略。 </li><li><strong>适配器</strong>：一种用来修饰容器或者仿函数或迭代器接口的东西。 </li><li><strong>空间配置器</strong>：负责空间的配置与管理。<h3 id="4-容器"><a href="#4-容器" class="headerlink" title="4. 容器"></a>4. <strong>容器</strong></h3></li><li>STL容器就是将运用最广泛的一些数据结构实现出来  </li><li>常用的数据结构：<strong>数组, 链表,树, 栈, 队列, 集合, 映射表</strong>等  </li><li>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:<br>序列式容器: 强调值的排序，序列式容器中的每个元素均有<strong>固定</strong>的位置。<br>关联式容器: 二叉树结构，各元素之间<strong>没有严格</strong>的物理上的顺序关系。<h3 id="5-算法"><a href="#5-算法" class="headerlink" title="5. 算法"></a>5. <strong>算法</strong></h3>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>：<br>质变算法：是指运算过程中<strong>会更改</strong>区间内的元素的内容。例如拷贝，替换，删除等等。<br>非质变算法：是指运算过程中<strong>不会更改</strong>区间内的元素内容。例如查找、计数、遍历、寻找极值等等。<h3 id="6-迭代器"><a href="#6-迭代器" class="headerlink" title="6.  迭代器"></a>6.  <strong>迭代器</strong></h3></li><li>每个容器都有自己<strong>专属</strong>的迭代器</li><li>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为<strong>指针</strong> </li><li>种类：<table> <tr>    <td>种类</td>    <td>功能</td>    <td>支持运算</td> </tr> <tr>    <td>输入迭代器</td>    <td>对数据的只读访问</td>    <td>只读，支持++、==、！=</td> </tr> <tr>    <td>输出迭代器</td>    <td>对数据的只写访问</td>    <td>只写，支持++</td> </tr> <tr>    <td>前向迭代器</td>    <td>读写操作，并能向前推进迭代器</td>    <td>读写，支持++、==、！=</td> </tr> <tr>    <td>双向迭代器</td>    <td>读写操作，并能向前和向后操作</td>    <td>读写，支持++、–，</td> </tr> <tr>    <td>随机访问迭代器</td>    <td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>    <td>读写，支持++、–、[n]、-n、<、<=、>、>=</td> </tr></table></li></ul><h2 id="二、VECTOR容器"><a href="#二、VECTOR容器" class="headerlink" title="二、VECTOR容器"></a><strong>二、VECTOR容器</strong></h2><h3 id="1-vector容器基本概念"><a href="#1-vector容器基本概念" class="headerlink" title="1. vector容器基本概念"></a><strong>1. vector容器基本概念</strong></h3><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li><li>vector容器的迭代器是支持<strong>随机访问</strong>的迭代器<h3 id="2-vector容器存在内置数据类型"><a href="#2-vector容器存在内置数据类型" class="headerlink" title="2. vector容器存在内置数据类型"></a><strong>2. vector容器存在内置数据类型</strong></h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;<span class="comment">//vector头文件</span></span><br><span class="line">#include &lt;algorithm&gt;<span class="comment">//算法头文件</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">print</span>(<span class="params">int val</span>)&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt; v;<span class="comment">//创建vector容器对象</span></span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">10</span>);<span class="comment">//向容器中存放数据</span></span><br><span class="line">v.<span class="title function_">push_back</span>(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据   </span></span><br><span class="line">        <span class="comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置   </span></span><br><span class="line">        <span class="comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;::iterator itBegin = v.<span class="title function_">begin</span>();</span><br><span class="line">vector&lt;int&gt;::iterator itEnd = v.<span class="title function_">end</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一种遍历方法</span></span><br><span class="line"><span class="keyword">while</span> (itBegin != itEnd)&#123;</span><br><span class="line">cout &lt;&lt; *itBegin &lt;&lt; endl;;</span><br><span class="line">itBegin++;</span><br><span class="line">&#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;int&gt;::iterator itBegin = v.<span class="title function_">begin</span>(); itBegin !=v.<span class="title function_">end</span>();itBegin++)   </span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第三种，使用STL提供的标准遍历算法函数，需要使用算法头文件</span></span><br><span class="line"><span class="title function_">for_each</span>(v.<span class="title function_">begin</span>(), v.<span class="title function_">end</span>(), print);</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb5cc85df7e64e71a8a10372d4c5a966~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-vector容器存放自定义数据类型"><a href="#3-vector容器存放自定义数据类型" class="headerlink" title="3. vector容器存放自定义数据类型"></a><strong>3. vector容器存放自定义数据类型</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">public</span>:</span><br><span class="line"><span class="title class_">Person</span>(string name, int age)&#123;</span><br><span class="line"><span class="variable language_">this</span>-&gt;name = name;</span><br><span class="line"><span class="variable language_">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;<span class="title class_">Person</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p1</span>(<span class="string">&quot;a&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p2</span>(<span class="string">&quot;b&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title class_">Person</span> <span class="title function_">p3</span>(<span class="string">&quot;c&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">v.<span class="title function_">push_back</span>(p1);</span><br><span class="line">v.<span class="title function_">push_back</span>(p2);</span><br><span class="line">v.<span class="title function_">push_back</span>(p3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="title class_">Person</span>&gt;::iterator it = v.<span class="title function_">begin</span>(); it != v.<span class="title function_">end</span>(); it++)&#123;</span><br><span class="line">                cout &lt;&lt; (*it).<span class="property">name</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*it).<span class="property">age</span>&lt;&lt;endl;<span class="comment">//第一种指代方式</span></span><br><span class="line">cout &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;age &lt;&lt; endl;<span class="comment">//第二种</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="title class_">Person</span> *&gt; vv;</span><br><span class="line"></span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p1);</span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p2);</span><br><span class="line">vv.<span class="title function_">push_back</span>(&amp;p3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="title class_">Person</span> *&gt;::iterator it = vv.<span class="title function_">begin</span>(); it != vv.<span class="title function_">end</span>(); it++) </span><br><span class="line">                 cout &lt;&lt; (*it)-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;(*it)-&gt;age&lt;&lt;endl;<span class="comment">//仅可用这一种指代</span></span><br><span class="line">&#125;z</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba3133221f0a4525a4263f49e30dea5f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-vector容器嵌套容器"><a href="#4-vector容器嵌套容器" class="headerlink" title="4. vector容器嵌套容器"></a><strong>4. vector容器嵌套容器</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;v;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">vector&lt;int&gt; v2;</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">v1.push_back(i + 1);</span><br><span class="line">v2.push_back(i + 2);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line">        </span><br><span class="line">for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++)</span><br><span class="line">cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c906382c30646cebc700fb858c8c0b0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-vector容器构造函数"><a href="#5-vector容器构造函数" class="headerlink" title="5. vector容器构造函数"></a><strong>5. vector容器构造函数</strong></h3><p>函数原型：</p><ul><li><code>vector&lt;T&gt; v;</code> 采用模板实现类实现，默认构造函数。</li><li><p><code>vector(v.begin(), v.end());</code> 将v[begin(), end())区间中的元素拷贝给本身。</p></li><li><p><code>vector(n, elem);</code> 构造函数将n个elem拷贝给本身。</p></li><li><p><code>vector(const vector &amp;vec);</code> 拷贝构造函数。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">        </span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2(v1);//将v1里的数赋值给v2</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v3(10, 100);//向容器中存放10个100</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v3.begin(); it != v3.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v4(v3.begin(), v3.end());将v3这段区间的数赋值给v4</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v4.begin(); it != v4.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00e34563770748bf900f3464b5736d8c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-vector容器赋值操作"><a href="#6-vector容器赋值操作" class="headerlink" title="6.vector容器赋值操作"></a><strong>6.vector容器赋值操作</strong></h3><p>函数原型：</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code>重载等号操作符。</li><li><p><code>assign(beg, end);</code> 将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> 将n个elem拷贝赋值给本身。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">v2 = v1;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++) cout &lt;&lt; *it&lt;&lt;&quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v3;</span><br><span class="line">v3.assign(v1.begin(), v1.end());//vector容器自带函数</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v3.begin(); it != v3.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v4;</span><br><span class="line">v4.assign(10, 100);</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v4.begin(); it != v4.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/567819a9d93c4c1cb8dfb4de95596d19~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-vector容器容量和大小"><a href="#7-vector容器容量和大小" class="headerlink" title="7. vector容器容量和大小"></a><strong>7. vector容器容量和大小</strong></h3><p>函数原型：</p><ul><li><p><code>empty();</code> 判断容器是否为空。</p></li><li><p><code>capacity();</code> 容器的容量。</p></li><li><p><code>size();</code> 返回容器中元素的个数。</p></li><li><p><code>resize(int num);</code> 重新指定容器的长度为num，若容器变长，则以默认值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code> 重新指定容器的长度为num，若容器变长，则以elem值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">if (v1.empty()) cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;//empty()是判断vector容器是否为空的函数</span><br><span class="line">else cout &lt;&lt; &quot;0&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;//capacity为vector容器的容量，是衡量vector容器能存放元素多少的量</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;//size是大小，代指是vector容器现有元素的个数；</span><br><span class="line">        </span><br><span class="line">v1.resize(15);//将vector容器的大小设定为15，多余的容量元素将设为0</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.resize(16,10);//将vector容器的大小设定为16，多余的容量元素将设为10</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.resize(5);//将vector容器的大小设定为5，多余的元素将被删去</span><br><span class="line">print(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ac23c6a216445b69f0aa79c1a45cd5a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="8-vector容器插入和删除"><a href="#8-vector容器插入和删除" class="headerlink" title="8.vector容器插入和删除"></a><strong>8.vector容器插入和删除</strong></h3><p>函数原型：</p><ul><li><p><code>push_back(ele);</code> 尾部插入元素ele。</p></li><li><p><code>pop_back();</code> 删除最后一个元素。</p></li><li><p><code>insert(const_iterator pos, ele);</code> 迭代器指向位置pos插入元素ele。</p></li><li><p><code>insert(const_iterator pos, int count,ele);</code>  迭代器指向位置pos插入count个元素ele。</p></li><li><p><code>erase(const_iterator pos);</code> 删除迭代器指向的元素。</p></li><li><p><code>erase(const_iterator start, const_iterator end);</code> 删除迭代器从start到end之间的元素。</p></li><li><p><code>clear();</code> 删除容器中所有元素。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.insert(v1.begin(), 2, 100);//在vector容器的开头位置插入两个元素100</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.erase(v1.begin());//删除vector容器的开头位置所对应的元素</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">v1.erase(v1.begin(),v1.end());//删除vector区间内的元素</span><br><span class="line">//v1.clear();//删除vector容器所有元素</span><br><span class="line">print(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7c9c242a3fa40bba2b38c4a95f42f71~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="9-vector容器数据存储"><a href="#9-vector容器数据存储" class="headerlink" title="9.vector容器数据存储"></a><strong>9.vector容器数据存储</strong></h3><p>函数原型：</p><ul><li><p><code>at(int idx);</code> 返回索引idx所指的数据。</p></li><li><p><code>operator[];</code> 返回索引idx所指的数据。</p></li><li><p><code>front();</code> 返回容器中第一个数据元素。</p></li><li><p><code>back();</code> 返回容器中最后一个数据元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 10; i++) cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;//第一种类似数组的表达方式</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">for (int i = 0; i &lt; 10; i++) cout &lt;&lt; v1.at(i)&lt;&lt; &quot; &quot;;//第二种</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; v1.back() &lt;&lt; endl;//vector容器尾端对应的元素</span><br><span class="line">cout &lt;&lt; v1.front() &lt;&lt;endl;//vector容器首端对应的元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a09b9c99810456a922f83fabb65ded1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="10-vector容器数据交换"><a href="#10-vector容器数据交换" class="headerlink" title="10. vector容器数据交换"></a><strong>10. vector容器数据交换</strong></h3><p>函数原型：</p><ul><li><code>swap(vec);</code>  将vec与本身的元素互换。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(vector&lt;int&gt;v1)&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) v1.push_back(i);</span><br><span class="line">print(v1);</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">for (int i = 10; i &gt; 0; i--) v2.push_back(i);</span><br><span class="line">print(v2);</span><br><span class="line">        </span><br><span class="line">v1.swap(v2);//将v1中的元素与v2交换</span><br><span class="line">print(v1);</span><br><span class="line">print(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test2()&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">for (int i = 0; i &lt; 100000; i++) v1.push_back(i);</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">        /*vector容器会为预留跟大小接近数值的容量，但当大小太大时，</span><br><span class="line">        vector容器不知道需要预留多大的容量，此时为提供比大小多很多的容量*/</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">v1.resize(3);//当容量太大时，这种方法只能改变vector容器的大小，但容量不会变化</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">vector&lt;int&gt;(v1).swap(v1);/*（v1）是匿名对象，利用v1创建了一个新的对象：</span><br><span class="line">        用拷贝构造函数来创建一个新的对象，新的对象没有名称 ，</span><br><span class="line">        即按照v目前所用的个数来初始化匿名对象的大小。 即大小，容量分配都是3*/</span><br><span class="line">cout &lt;&lt; &quot;rongliang:&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        test2()</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行效果：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98b7650988a8445aa88e5db12dc0f0f9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="11-vector容器预留空间"><a href="#11-vector容器预留空间" class="headerlink" title="11.vector容器预留空间"></a><strong>11.vector容器预留空间</strong></h3><p>函数原型：</p><ul><li><code>reserve(int len);</code> 容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">int num = <span class="number">0</span>, *p = <span class="variable constant_">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/*当vector容器不知道要存入多少元素时，会先设定一个较小的容量，</span></span><br><span class="line"><span class="comment">        当容量不够时，会再开辟一个容量更大的空间，将vector里的元素存放进去，</span></span><br><span class="line"><span class="comment">        如此反复直至容量大于或等于元素数量*/</span></span><br><span class="line"></span><br><span class="line">v1.<span class="title function_">reserve</span>(<span class="number">10000</span>);</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v1.<span class="title function_">reserve</span>(<span class="number">1000</span>);</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">v1.<span class="title function_">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca6fb501a4444008be5d080d148f83c0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="二、STRING容器"><a href="#二、STRING容器" class="headerlink" title="二、STRING容器"></a><strong>二、STRING容器</strong></h2><h3 id="1-string容器基本概念"><a href="#1-string容器基本概念" class="headerlink" title="1. string容器基本概念"></a><strong>1. string容器基本概念</strong></h3><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个<strong>类</strong></li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char <em> 是一个<em>*指针</em></em></li><li>string是一个<strong>类</strong>，类内部封装了char<em>，管理这个字符串，是一个**char</em>型的容器**。</li></ul><p><strong>特点：</strong></p><ul><li>string 类内部封装了很多成员方法</li></ul><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><ul><li>string管理char<em>所分配的内存，不用担心<strong>复制越界</strong>和<em>*取值越界</em></em>等，由类内部进行负责</li></ul><h3 id="2-string容器构造函数"><a href="#2-string容器构造函数" class="headerlink" title="2.string容器构造函数"></a><strong>2.string容器构造函数</strong></h3><p>函数原型：</p><ul><li><p><code>string();</code> 创建一个空的字符串 例如: string str。</p></li><li><p><code>string(const char* s);</code> 使用字符串s初始化。</p></li><li><p><code>string(const string&amp; str);</code> 使用一个string对象初始化另一个string对象。</p></li><li><p><code>string(int n, char c);</code> 使用n个字符c初始化。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">const char* str = &quot;abcd&quot;;</span><br><span class="line">        </span><br><span class="line">string s2(str);</span><br><span class="line">string s3(s2);</span><br><span class="line">string s4(10, &#x27;a&#x27;);</span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; &quot; &quot; &lt;&lt; s3 &lt;&lt; &quot; &quot; &lt;&lt; s4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line">        </span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246d467e5f0e40688b021095511832b3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-string容器赋值操作"><a href="#3-string容器赋值操作" class="headerlink" title="3.string容器赋值操作"></a><strong>3.string容器赋值操作</strong></h3><p>函数原型：</p><ul><li><p><code>string&amp; operator=(const char* s);</code> char*类型字符串 赋值给当前的字符串。</p></li><li><p><code>string&amp; operator=(const string &amp;s);</code> 把字符串s赋给当前的字符串。</p></li><li><p><code>string&amp; operator=(char c);</code> 字符赋值给当前的字符串。</p></li><li><p><code>string&amp; assign(const char *s);</code> 把字符串s赋给当前的字符串。</p></li><li><code>string&amp; assign(const char *s, int n);</code> 把字符串s的前n个字符赋给当前的字符串。</li><li><code>string&amp; assign(const string &amp;s);</code> 把字符串s赋给当前字符串。</li><li><code>string&amp; assign(int n, char c);</code> 用n个字符c赋给当前字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string s1 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">string s2 = s1;</span><br><span class="line">        </span><br><span class="line">string s3;</span><br><span class="line">s3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">string s4;</span><br><span class="line">s4.<span class="title function_">assign</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        </span><br><span class="line">string s5;</span><br><span class="line">s5.<span class="title function_">assign</span>(s1);</span><br><span class="line">        </span><br><span class="line">string s7;</span><br><span class="line">s7.<span class="title function_">assign</span>(<span class="string">&quot;abcdef&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">string s6;</span><br><span class="line">s6.<span class="title function_">assign</span>(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">cout &lt;&lt; s1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">        &lt;&lt; s4 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s5 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s6 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fda2306fbc0940dc87b5fc394700417a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-string容器字符串拼接"><a href="#4-string容器字符串拼接" class="headerlink" title="4.string容器字符串拼接"></a>4.string容器字符串拼接</h3><p>函数原型：</p><ul><li><p><code>string&amp; operator+=(const char* str);</code> 重载+=操作符</p></li><li><p><code>string&amp; operator+=(const char c);</code> 重载+=操作符。</p></li><li><code>string&amp; operator+=(const string&amp; str);</code> 重载+=操作符。</li><li><code>string&amp; append(const char *s);</code> 把字符串s连接到当前字符串结尾。</li><li><code>string&amp; append(const char *s, int n);</code> 把字符串s的前n个字符连接到当前字符串结尾。</li><li><code>string&amp; append(const string &amp;s);</code> 同operator+=(const string&amp; str)。</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code> 字符串s中从pos开始的n个字符连接到字符串结尾。</li><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 += <span class="string">&quot;hh&quot;</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 += <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 += str1;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(<span class="string">&quot;xxxx&quot;</span>,<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(str1);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1.<span class="title function_">append</span>(str1, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef6680ee8c14fc89668eccbfc35dbe4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-string容器查找和替换"><a href="#5-string容器查找和替换" class="headerlink" title="5.string容器查找和替换"></a>5.string容器查找和替换</h3><p>函数原型：</p><ul><li><p><code>int find(const string&amp; str, int pos = 0) const;</code> 查找str第一次出现位置,从pos开始查找。</p></li><li><p><code>int find(const char* s, int pos = 0) const;</code> 查找s第一次出现位置,从pos开始查找。</p></li><li><code>int find(const char* s, int pos, int n) const;</code> 从pos位置查找s的前n个字符第一次位置。</li><li><code>int find(const char c, int pos = 0) const;</code> 查找字符c第一次出现位置。</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code> 查找str最后一次位置,从pos开始查找。</li><li><code>int rfind(const char* s, int pos = npos) const;</code> 查找s最后一次出现位置,从pos开始查找。</li><li><code>int rfind(const char* s, int pos, int n) const;</code> 从pos查找s的前n个字符最后一次位置。</li><li><code>int rfind(const char c, int pos = 0) const;</code> 查找字符c最后一次出现位置。</li><li><code>string&amp; replace(int pos, int n, const string&amp; str);</code> 替换从pos开始n个字符为字符串str。</li><li><code>string&amp; replace(int pos, int n,const char* s);</code> 替换从pos开始的n个字符为字符串s。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test1()&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 = &quot;abcdefde&quot;;</span><br><span class="line">        </span><br><span class="line">int pos = str1.find(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        //若寻找不到，则pos值为-1</span><br><span class="line">        </span><br><span class="line">pos = str1.find(&quot;g&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">pos = str1.rfind(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = &quot;abcdef&quot;;</span><br><span class="line">pos = str1.rfind(&quot;de&quot;);</span><br><span class="line">if (pos != -1) cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test2()&#123;</span><br><span class="line">string str1 = &quot;abcdef&quot;;</span><br><span class="line">str1.replace(1, 3, &quot;1234&quot;);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">        //无论替换元素个数多少，都会将这一区间的元素替换掉</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test1();</span><br><span class="line">    test2();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f0adec6f6da49b4a2e881ea0caedde4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-string容器字符串比较"><a href="#6-string容器字符串比较" class="headerlink" title="6.string容器字符串比较"></a>6.string容器字符串比较</h3><p>函数原型：</p><ul><li><p><code>int compare(const string &amp;s) const;</code> 与字符串s比较。</p></li><li><p><code>int compare(const char *s) const;</code> 与字符串s比较。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str1 = <span class="string">&quot;hellow&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;hellow&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//若str1&gt;str2，则返回1，反则返回-1</span></span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;xellow&quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;hellowe&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;zzzz&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str1 = <span class="string">&quot;i&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="title function_">compare</span>(str2) &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/*比较原则或从首元素开始比较，但长度相同时首元素一样则继续比较后面元素</span></span><br><span class="line"><span class="comment">        长度不一时，首字母一样且后者也一样则长度长的大或出现元素相比大的大，否则首字母大的大，*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5f49ac9c9a842a19ba4843b81c47214~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-string容器字符存取"><a href="#7-string容器字符存取" class="headerlink" title="7.string容器字符存取"></a>7.string容器字符存取</h3><p>函数原型：</p><ul><li><p><code>char&amp; operator[](int n);</code> 通过[]方式取字符。</p></li><li><p><code>char&amp; at(int n);</code> 通过at方法获取字符。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.<span class="title function_">size</span>(); i++)&#123;</span><br><span class="line">cout &lt;&lt; str.<span class="title function_">at</span>(i)&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66baf43e4b6d48f09aa0a8863b055b62~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="8-string容器插入和删除"><a href="#8-string容器插入和删除" class="headerlink" title="8.string容器插入和删除"></a>8.string容器插入和删除</h3><p>函数原型：</p><ul><li><p><code>string&amp; insert(int pos, const char* s);</code> 插入字符串。</p></li><li><p><code>string&amp; insert(int pos, const string&amp; str);</code> 插入字符串。</p></li><li><code>string&amp; insert(int pos, int n, char c);</code> 在指定位置插入n个字符c。</li><li><code>string&amp; erase(int pos, int n = npos);</code> 删除从Pos开始的n个字符。</li><li><code>string&amp; clear();</code> 删除容器中所有元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="title function_">insert</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">str.<span class="title function_">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b02ca448d6114d95afe53a640b62380b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="9-string容器子串"><a href="#9-string容器子串" class="headerlink" title="9.string容器子串"></a>9.string容器子串</h3><p>函数原型：</p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> 返回由pos开始的n个字符组成的字符串.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">string email = &quot;violet@cumt.com&quot;;</span><br><span class="line">string username = email.substr(0, email.find(&#x27;@&#x27;));</span><br><span class="line">cout &lt;&lt; &quot;username: &quot; &lt;&lt;username&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        int pos = email.find(&quot;@&quot;); </span><br><span class="line">        username = email.substr(0, pos); </span><br><span class="line">        cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c53d6d5a1c7475caa16a7a7b9cd195a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="三、DEQUE容器"><a href="#三、DEQUE容器" class="headerlink" title="三、DEQUE容器"></a>三、DEQUE容器</h2><h3 id="1-deque容器基本概念"><a href="#1-deque容器基本概念" class="headerlink" title="1.deque容器基本概念"></a>1.deque容器基本概念</h3><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除<strong>效率低</strong>，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque<strong>快</strong>,这和两者内部实现有关</li></ul><p><strong>deque内部工作原理:</strong>  deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放<strong>真实数据</strong>。<br>中控器维护的是每个<strong>缓冲区的地址</strong>，使得使用deque时像一片<strong>连续</strong>的内存空间</p><ul><li>deque容器的迭代器也是支持<strong>随机访问</strong>的<h3 id="2-deque容器构造函数"><a href="#2-deque容器构造函数" class="headerlink" title="2.deque容器构造函数"></a>2.deque容器构造函数</h3>函数原型：</li><li><code>deque&lt;T&gt; deq</code> ; 默认构造形式。</li><li><p><code>deque(beg, end);</code> 构造函数将[beg, end)区间中的元素拷贝给本身。</p></li><li><p><code>deque(n, elem);</code> 构造函数将n个elem拷贝给本身。</p></li><li><code>deque(const deque &amp;deq);</code> 拷贝构造函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2(d1);</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d3(d1.begin(), d1.end());</span><br><span class="line">print(d3);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d4(10,100);</span><br><span class="line">print(d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643d3179b41c4b74991713c7a6815e9b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="3-string容器赋值操作-1"><a href="#3-string容器赋值操作-1" class="headerlink" title="3.string容器赋值操作"></a>3.string容器赋值操作</h3><p>函数原型：</p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code> 重载等号操作符。</li><li><p><code>assign(beg, end);</code> 将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> 将n个elem拷贝赋值给本身。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d3;       </span><br><span class="line">d3.assign(10,100);</span><br><span class="line">print(d3); </span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d4;</span><br><span class="line">d4.assign(d2.begin(),d2.end());</span><br><span class="line">print(d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1135f177de1640579e02f4c8ecf80965~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="4-deque容器大小操作"><a href="#4-deque容器大小操作" class="headerlink" title="4.deque容器大小操作"></a>4.deque容器大小操作</h3><p>函数原型：</p><ul><li><p><code>deque.empty();</code> 判断容器是否为空。</p></li><li><p><code>deque.size();</code> 返回容器中元素的个数。</p></li><li><p><code>deque.resize(num);</code> 重新指定容器的长度为num,若容器变长，则以默认值填充新位置。<br>如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code> 重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) d1.push_back(i);</span><br><span class="line">if (d1.empty()) cout &lt;&lt; &quot;kong&quot; &lt;&lt; endl;</span><br><span class="line">else &#123;</span><br><span class="line">print(d1);</span><br><span class="line">cout &lt;&lt; &quot;daixiao:&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">                //deque容器没有容量</span><br><span class="line">&#125;</span><br><span class="line">d1.resize(15, 1);</span><br><span class="line">print(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/698e48e243ea46e1935a6db8f51e9580~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="5-deque容器插入和删除"><a href="#5-deque容器插入和删除" class="headerlink" title="5.deque容器插入和删除"></a>5.deque容器插入和删除</h3><p>函数原型：</p><p> 两端插入操作：</p><ul><li><code>push_back(elem);</code> 在容器尾部添加一个数据。</li><li><code>push_front(elem);</code> 在容器头部插入一个数据。</li><li><code>pop_back();</code> 删除容器最后一个数据。</li><li><p><code>pop_front();</code> 删除容器第一个数据。</p><p>指定位置操作：</p></li><li><p><code>insert(pos,elem);</code> 在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> 在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> 在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> 清空容器的所有数据。</p></li><li><p><code>erase(beg,end);</code> 删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> 删除pos位置的数据，返回下一个数据的位置。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">print(d1)；</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;::iterator it= d1.begin();</span><br><span class="line">it++;</span><br><span class="line">d1.erase(it);</span><br><span class="line">d1.insert(d1.begin(), 2, 100);</span><br><span class="line">print(d1);</span><br><span class="line">        </span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2.push_front(1);</span><br><span class="line">d2.push_front(2);</span><br><span class="line">d2.push_back(10);</span><br><span class="line">d2.push_back(20);</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">d2.insert(d2.begin(), d1.begin(), d1.end());</span><br><span class="line">print(d2);</span><br><span class="line">        </span><br><span class="line">d2.clear();</span><br><span class="line">d1.erase(d1.begin(), d1.end());</span><br><span class="line">print(d1);</span><br><span class="line">print(d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca4b493fab2e48ec933437d89221c4f8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="6-deque容器数据存取"><a href="#6-deque容器数据存取" class="headerlink" title="6.deque容器数据存取"></a>6.deque容器数据存取</h3><p>函数原型：</p><ul><li><p><code>at(int idx);</code> 返回索引idx所指的数据。</p></li><li><p><code>operator[];</code> 返回索引idx所指的数据。</p></li><li><code>front();</code> 返回容器中第一个数据元素。</li><li><code>back();</code> 返回容器中最后一个数据元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">                </span><br><span class="line">for (int i = 0; i &lt; d1.size(); i++)&#123;</span><br><span class="line">cout &lt;&lt; d1[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">                </span><br><span class="line">for (int i = 0; i &lt; d1.size(); i++)&#123;</span><br><span class="line">cout &lt;&lt; d1.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">                </span><br><span class="line">cout &lt;&lt; &quot;1:&quot; &lt;&lt; d1.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2:&quot; &lt;&lt; d1.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29d7ee8fe0104c8db22c4f5214349894~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="7-deque容器排序操作"><a href="#7-deque容器排序操作" class="headerlink" title="7.deque容器排序操作"></a>7.deque容器排序操作</h3><p>函数原型：</p><ul><li><code>sort(iterator beg, iterator end)</code> 对beg和end区间内元素进行排序。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(const deque&lt;int&gt;v1)&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">d1.push_front(10);</span><br><span class="line">d1.push_front(20);</span><br><span class="line">d1.push_back(100);</span><br><span class="line">d1.push_back(200);</span><br><span class="line">                        print(d1);</span><br><span class="line">                        </span><br><span class="line">sort(d1.begin(), d1.end());</span><br><span class="line">print(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1039166b72642b9b40791d51a0d3de7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、STL初识&quot;&gt;&lt;a href=&quot;#一、STL初识&quot; class=&quot;headerlink&quot; title=&quot;一、STL初识&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、STL初识&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-STL从广义上分为-容器-container-、算法</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++学习笔记" scheme="https://vaioretto1.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于多态的职工管理系统</title>
    <link href="https://vaioretto1.github.io/posts/undefined.html"/>
    <id>https://vaioretto1.github.io/posts/undefined.html</id>
    <published>2022-10-11T13:09:24.000Z</published>
    <updated>2023-01-10T13:18:15.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-项目目的"><a href="#一-项目目的" class="headerlink" title="一. 项目目的"></a>一. 项目目的</h2><p align=left>运用c++实现一个基于多态的职工管理系统</p><p align=left>该系统可以存入、显示、寻找、排序、修改和删除职工等，模拟一个公司职工情况</p><p align=left>该系统具有员工、经理和总裁三个职务，各司其职</p><p align=left>我们将在系统中存入一个个职工，并赋予其各自的职工编号、名字和职务</p><h2 id="二-项目实现"><a href="#二-项目实现" class="headerlink" title="二. 项目实现"></a>二. 项目实现</h2><h3 id="创建项目雏形"><a href="#创建项目雏形" class="headerlink" title=" 创建项目雏形"></a><strong> 创建项目雏形</strong></h3><p>创建一个源文件”职工管理系统.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">       int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:          //退出职工管理系统</span><br><span class="line">break;</span><br><span class="line">case 1:         //添加职工信息</span><br><span class="line">break;</span><br><span class="line">case 2:         //显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:         //删除职工信息</span><br><span class="line">break;</span><br><span class="line">case 4:         //修改职工信息</span><br><span class="line">break;</span><br><span class="line">case 5:         //查找职工信息 </span><br><span class="line">break;</span><br><span class="line">case 6:         //排序职工</span><br><span class="line">break;</span><br><span class="line">               case 7:         //清空所有文档（破产跑路</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立这么一个雏形之后，我们将根据各种功能编写代码</p><h3 id="建立菜单"><a href="#建立菜单" class="headerlink" title=" 建立菜单"></a><strong> 建立菜单</strong></h3><p>首先，我们需创建一个菜单选项供人选择功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align=left>我们可以创建一个头文件"workermanage.h"</p><p align=left>并在里面创建一个类"workermanage", 将菜单放进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pragma once         //该代码作用是防止头文件重复包含</span><br><span class="line">using namespace std;</span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void Show_menu(); //展示菜单</span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>然后创建一个源文件”<em>workermanage.cpp</em>“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::~Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delete[] this-&gt;EmpArray;</span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样第一步就完成了</p><h3 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title=" 实现退出功能"></a><strong> 实现退出功能</strong></h3><p>此时我们可以先在头文件中“workermanage.h”中声明一个退出函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void Show_menu();</span><br><span class="line">void Exit();     //退出系统</span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>然后在源文件”workermanage.cpp”中定义该函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::Exit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;已退出职工管理系统，欢迎下次使用&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);    //该代码起暂停程序的作用，然后按任意键继续</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这样就完成了第二步</p><h3 id="定义职务"><a href="#定义职务" class="headerlink" title=" 定义职务"></a><strong> 定义职务</strong></h3><p align=left>首先我们可以创建一个头文件"worker.h"</p><p align=left>在该头文件中创建一个类"worker"，在类中我们可以实现显示职工信息、获取岗位信息以及对职工编号、名字和岗位信息的声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void Showinfo() = 0;      //显示个人信息</span><br><span class="line">virtual string GetDeptName() = 0; //获取岗位信息</span><br><span class="line">int Id;                           //职工编号</span><br><span class="line">string Name;                      //职工名字</span><br><span class="line">int Deptid;                       //岗位信息</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以员工为例，我们可先创建一个头文件”employee.h”，在头文件里面创建一个类”employee”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class employee :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">employee(int id,string name,int deptid);//函数名需要与类名一致，或者容易出错</span><br><span class="line">void Showinfo();                       </span><br><span class="line">        //记得删掉virtual，否则worlermanager.cpp会出错</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后创建一个源文件”employee.cpp”，在里面定义employee(int id,string name,int deptid)、void Showinfo()和string GetDeptName()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">employee::employee(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void employee::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 完成公司派发的任务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string employee::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;员工&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align=left>经理和总裁同理</p><p><strong>经理</strong>：</p><p>“manage.h”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class manage :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">manage(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>“manage.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;manage.h&quot;</span><br><span class="line"></span><br><span class="line">manage::manage(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line">void manage::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 下放任务给员工，并听从总裁安排&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string manage::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;经理&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总裁</strong>：<br>“boss.h”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">using namespace std;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">class boss :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">boss(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>“boss.cpp”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">boss::boss(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line">void boss::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">&lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">&lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; &quot;\t岗位职责： 管理公司各项事务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string boss::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;总裁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加职工"><a href="#添加职工" class="headerlink" title=" 添加职工"></a><strong> 添加职工</strong></h3><p>首先我们需要创建一个文本来存在你所添加的职工信息</p><p>并声明一个函数来判断文件是否存在</p><p>我们可以在头文件”workermanage.h”中定义一个名词来指代该文本</p><p>同时声明职工人数和职工数组指针以及添加职工的函数</p><p>最后我们需要保存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#pragma once //防止头文件重复包含</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#define FILENAME &quot;...txt&quot;   //文本名字可自己任取</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Workermanager();    //判断文本是否存在</span><br><span class="line">int Empnum;         //职工人数</span><br><span class="line">worker **EmpArray;  //职工数组指针</span><br><span class="line">void Add_Emp();     //添加职工</span><br><span class="line">        bool FileIsEmpty;   //判断文本是否为空</span><br><span class="line">        void init_Emp();    //初始化职工文本</span><br><span class="line">int GetEmpnum();    //统计人数</span><br><span class="line">        void save();        //保存文件</span><br><span class="line">        ~Workermanager()；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::init_Emp()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int index = 0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">if (deptid == 1)</span><br><span class="line">&#123;</span><br><span class="line">worker = new employee(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else if (deptid == 2)</span><br><span class="line">&#123;</span><br><span class="line">worker = new manage(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">worker = new boss(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int Workermanager::GetEmpnum()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);  //读取文本里的职工信息</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int num=0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">//判断文件是否存在</span><br><span class="line">if (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0;        //初始化职工人数为0</span><br><span class="line">this-&gt;EmpArray = NULL;   //初始化职工数组指针</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// 判断文件是否为空</span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;  //从文本第一个字符开始读取，若第一个字符不为0，则该文本不为空</span><br><span class="line">if (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int num = this-&gt;GetEmpnum();</span><br><span class="line">cout &lt;&lt; &quot;职工人数为: &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = num;</span><br><span class="line">this-&gt;EmpArray = new worker*[this-&gt;Empnum];  //开辟一个空间</span><br><span class="line">this-&gt;init_Emp();                            //将文件数据存到数组中</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;  职工名字： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;  职工部门编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::save()</span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(FILENAME, ios::out);</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">           //将数据保存进文件中</span><br><span class="line">           ofs &lt;&lt; this-&gt;EmpArray[i]-&gt;Id &lt;&lt; &quot; &quot;</span><br><span class="line">       &lt;&lt; this-&gt;EmpArray[i]-&gt;Name &lt;&lt; &quot; &quot;</span><br><span class="line">       &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Add_Emp()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入添加职工数量： &quot; &lt;&lt; endl;</span><br><span class="line">int addNum = 0;</span><br><span class="line">cin &gt;&gt; addNum;</span><br><span class="line">if (addNum &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">int newSize = this-&gt;Empnum + addNum; //新空间人数=原来的+新的</span><br><span class="line">worker**newSpace=new worker*[newSize];</span><br><span class="line">                //创建一个新空间，并确定该空间人数</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++) //将原数据并入新空间</span><br><span class="line">&#123;</span><br><span class="line">newSpace[i] = this-&gt;EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; addNum; i++) //添加新数据</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int dselect; //部门选择</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工编号&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工名字&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dselect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dselect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(id, name, 1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(id, name, 2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(id, name, 3);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">newSpace[this-&gt;Empnum + i] = worker; //将数据存入新数组中</span><br><span class="line">&#125;</span><br><span class="line">delete[] this-&gt;EmpArray; //释放原有空间</span><br><span class="line">this-&gt;EmpArray = newSpace; //更改新空间的指向</span><br><span class="line">this-&gt;Empnum = newSize; //更新新的职工人数</span><br><span class="line">this-&gt;FileIsEmpty = false; //更新职工不为空标志</span><br><span class="line">cout &lt;&lt; &quot;成功添加&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save(); //保存数据到文件中</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;输入数据有误&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;); //进行清屏操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示职工信息"><a href="#显示职工信息" class="headerlink" title=" 显示职工信息"></a><strong> 显示职工信息</strong></h3><p>在定义职务中我们已经将显示各自职工信息的函数定义完毕</p><p>我们此时只需在头文件”workermanage.h”中声明一个显示职工信息函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void show_Emp();  //显示职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;EmpArray[i]-&gt;Showinfo();   //利用多态调用程序接口</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们的源文件”职工管理系统.cpp”已经可以填充小一半</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit(); //退出程序</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp(); //添加职工</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp(); //显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">                        break;</span><br><span class="line">case 4:</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); //清屏</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除职工"><a href="#删除职工" class="headerlink" title=" 删除职工"></a><strong> 删除职工</strong></h3><p>在删除职工时，我们需要判断该职工是否存在</p><p>我们可以在头文件”workermanage.h”中声明一个判断职工是否存在的函数和一个实现删除职工功能的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      int Isexit(int id); //输入职工编号来判断职工是否存在</span><br><span class="line">      void del_Emp();    //删除职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">int Workermanager::Isexit(int id)</span><br><span class="line">&#123;</span><br><span class="line">int index = -1;</span><br><span class="line">        //在空间中寻找职工</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)  </span><br><span class="line">&#123;</span><br><span class="line">index = i; </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;要删除的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int index = this-&gt;Isexit(id);</span><br><span class="line">if (index != -1)   //寻找到职工</span><br><span class="line">&#123;</span><br><span class="line">for (int i = index; i &lt; this-&gt;Empnum - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[i + 1]; </span><br><span class="line">                                //将数据前移，因为删除一个职工后，我们需要后面的职工来填补空位</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;Empnum--;  //更新数组中职工人数</span><br><span class="line">this-&gt;save();   //将数据更新同步到文件中</span><br><span class="line">cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;删除失败，未寻找到该职工&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改职工信息"><a href="#修改职工信息" class="headerlink" title=" 修改职工信息"></a><strong> 修改职工信息</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个实现修改职工信息的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void mod_Emp();   //修改职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入修改职工的编号：&quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int ret = this-&gt;Isexit(id);</span><br><span class="line">if (ret != -1) </span><br><span class="line">&#123;</span><br><span class="line">delete this-&gt;EmpArray[ret]; //重置该职工信息</span><br><span class="line">int newId;</span><br><span class="line">string newName;</span><br><span class="line">int dSelect;</span><br><span class="line">cout &lt;&lt; &quot;查到： &quot; &lt;&lt; id &lt;&lt; &quot;号职工，请输入新职工号： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newId;</span><br><span class="line">cout &lt;&lt; &quot;请输入新姓名： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newName;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dSelect;</span><br><span class="line">worker *worker = NULL;  </span><br><span class="line">switch (dSelect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[ret] = worker; //更新数据到数组中</span><br><span class="line">cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;修改失败，查无此人&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="寻找职工"><a href="#寻找职工" class="headerlink" title=" 寻找职工"></a><strong> 寻找职工</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个通过职工编号或名字实现查找职工信息的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void fine_Emp(); //查找职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::fine_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入查找的方式： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号查找&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工姓名查找&quot; &lt;&lt; endl;</span><br><span class="line">int input = 0;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; id;</span><br><span class="line">  int ret = Isexit(id);</span><br><span class="line">  if (ret != -1)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，该职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  this-&gt;EmpArray[ret]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125; </span><br><span class="line">                //c/c++中switch语句出现定义需用大括号括起来</span><br><span class="line">case 2:</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工姓名： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  bool flag = false;  //判断是否查到</span><br><span class="line">  for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">  if (this-&gt;EmpArray[i]-&gt;Name == name)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，职工编号为：&quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">       &lt;&lt; &quot;号职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  flag = true;</span><br><span class="line">  this-&gt;EmpArray[i]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (flag == false)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序职工"><a href="#排序职工" class="headerlink" title=" 排序职工"></a><strong> 排序职工</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个通过职工编号对职工今昔降序或升序排序的函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void sort_Emp();   //按编号排序职工</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><br>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请选择排序方式：&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号进行升序&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工编号进行降序&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int minORmax = i;   //声明最大值或最小值下标</span><br><span class="line">for (int j = i + 1; j &lt; this-&gt;Empnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&gt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&lt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (i != minORmax)</span><br><span class="line">&#123;</span><br><span class="line">worker *temp = this-&gt;EmpArray[i];</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[minORmax];</span><br><span class="line">this-&gt;EmpArray[minORmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;排序成功，排序后结果为：&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">this-&gt;show_Emp(); //已包含清屏操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="清空文本"><a href="#清空文本" class="headerlink" title="清空文本"></a><strong>清空文本</strong></h3><p>我们可以在头文件”workermanage.h”中声明一个实现删除文本的函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">      void clean_File();  //清空文件（破产跑路</span><br><span class="line">      ~Workermanager();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><br>在源文件”workermanage.cpp”中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void Workermanager::clean_File()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;确定清空？&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.确定&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;0.返回&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  ofstream ofs(FILENAME, ios::trunc);  //删除文本后重新创建文本</span><br><span class="line">  ofs.close();</span><br><span class="line">  if (this-&gt;EmpArray != NULL)</span><br><span class="line">  &#123;</span><br><span class="line">  for (int i = 0; i &lt; this-&gt;Empnum; i++) //删除堆区里的职工</span><br><span class="line">  &#123;</span><br><span class="line">  delete this-&gt;EmpArray[i];</span><br><span class="line">  this-&gt;EmpArray[i] = NULL;</span><br><span class="line">  &#125;</span><br><span class="line">  delete[] this-&gt;EmpArray;              //删除堆区里的数组指针</span><br><span class="line">  this-&gt;EmpArray = NULL;</span><br><span class="line">  this-&gt;Empnum = 0;</span><br><span class="line">  this-&gt;FileIsEmpty = true;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">case 0:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="职工管理系统创建完毕"><a href="#职工管理系统创建完毕" class="headerlink" title="职工管理系统创建完毕"></a>职工管理系统创建完毕</h3><p>最后我们的源文件”职工管理系统.cpp”已经创建完毕了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit();  //退出程序</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp();//添加职工</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp();//显示职工信息</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">WM.del_Emp(); //删除职工</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">WM.mod_Emp();//修改职工</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">WM.fine_Emp();//寻找职工</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">WM.sort_Emp();//排序职工</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">WM.clean_File();//清空文本</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); //清屏</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-源代码显示"><a href="#三-源代码显示" class="headerlink" title="三.源代码显示"></a>三.源代码显示</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h4 id="“boss-h”"><a href="#“boss-h”" class="headerlink" title="“boss.h”"></a>“boss.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">using namespace std;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">class boss :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">boss(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“employee-h”"><a href="#“employee-h”" class="headerlink" title="“employee.h”"></a>“employee.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class employee :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">employee(int id,string name,int deptid);</span><br><span class="line">void Showinfo(); </span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“manage-h”"><a href="#“manage-h”" class="headerlink" title="“manage.h”"></a>“manage.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class manage :public worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">manage(int id, string name, int deptid);</span><br><span class="line">void Showinfo();</span><br><span class="line">string GetDeptName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“worker-h”"><a href="#“worker-h”" class="headerlink" title="“worker.h”"></a>“worker.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void Showinfo() = 0;</span><br><span class="line">virtual string GetDeptName() = 0; </span><br><span class="line"></span><br><span class="line">int Id;</span><br><span class="line">string Name;</span><br><span class="line">int Deptid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="“workermanage-h”"><a href="#“workermanage-h”" class="headerlink" title="“workermanage.h”"></a>“workermanage.h”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#define FILENAME &quot;empFile.text&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Workermanager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Workermanager();</span><br><span class="line">void Show_menu();</span><br><span class="line">void Exit();</span><br><span class="line">int Empnum; </span><br><span class="line">worker **EmpArray;</span><br><span class="line">void Add_Emp();</span><br><span class="line">void save(); </span><br><span class="line">bool FileIsEmpty; </span><br><span class="line">int GetEmpnum(); </span><br><span class="line">void init_Emp(); </span><br><span class="line">void show_Emp(); </span><br><span class="line">void del_Emp(); </span><br><span class="line">int Isexit(int id); </span><br><span class="line">void mod_Emp(); </span><br><span class="line">void fine_Emp(); </span><br><span class="line">void sort_Emp(); </span><br><span class="line">void clean_File(); </span><br><span class="line">~Workermanager();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><h4 id="“boss-cpp”"><a href="#“boss-cpp”" class="headerlink" title="“boss.cpp”"></a>“boss.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">boss::boss(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void boss::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">             &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 管理公司各项事务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string boss::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;总裁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“employee-cpp”"><a href="#“employee-cpp”" class="headerlink" title="“employee.cpp”"></a>“employee.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">employee::employee(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void employee::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 完成公司派发的任务&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string employee::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;员工&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“manage-cpp”"><a href="#“manage-cpp”" class="headerlink" title="“manage.cpp”"></a>“manage.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">include&quot;manage.h&quot;</span><br><span class="line">manage::manage(int id, string name, int deptid)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;Id = id;</span><br><span class="line">this-&gt;Name = name;</span><br><span class="line">this-&gt;Deptid = deptid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void manage::Showinfo()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;\t职工姓名： &quot; &lt;&lt; this-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;\t岗位： &quot; &lt;&lt; this-&gt;GetDeptName()</span><br><span class="line">     &lt;&lt; &quot;\t岗位职责： 下放任务给员工，并听从总裁安排&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string manage::GetDeptName()</span><br><span class="line">&#123;</span><br><span class="line">return string(&quot;经理&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“workermanage-cpp”"><a href="#“workermanage-cpp”" class="headerlink" title="“workermanage.cpp”"></a>“workermanage.cpp”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line"></span><br><span class="line">Workermanager::Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">if (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">char ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line">if (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = 0; </span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">this-&gt;FileIsEmpty = true;</span><br><span class="line">ifs.close();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int num = this-&gt;GetEmpnum();</span><br><span class="line">cout &lt;&lt; &quot;职工人数为: &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">this-&gt;Empnum = num;</span><br><span class="line">this-&gt;EmpArray = new worker*[this-&gt;Empnum]; </span><br><span class="line">this-&gt;init_Emp();</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;职工编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">     &lt;&lt; &quot;  职工名字： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Name</span><br><span class="line">     &lt;&lt; &quot;  职工部门编号： &quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Workermanager::Show_menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                欢迎使用职工管理系统！                    &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   0.退出管理系统                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   1.增加职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   2.显示职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   3.删除职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   4.修改职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   5.查找职工信息                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   6.按照编号排序                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                   7.清空所有文档                         &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;                                                          &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Exit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;已退出职工管理系统，欢迎下次使用&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::Add_Emp()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入添加职工数量： &quot; &lt;&lt; endl;</span><br><span class="line">int addNum = 0;</span><br><span class="line">cin &gt;&gt; addNum;</span><br><span class="line">if (addNum &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">int newSize = this-&gt;Empnum + addNum; </span><br><span class="line">worker**newSpace=new worker*[newSize];</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++) </span><br><span class="line">&#123;</span><br><span class="line">newSpace[i] = this-&gt;EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; addNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int dselect; </span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工编号&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i + 1 &lt;&lt; &quot;个新职工名字&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dselect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dselect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(id, name, 1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(id, name, 2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(id, name, 3);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">newSpace[this-&gt;Empnum + i] = worker;</span><br><span class="line">&#125;</span><br><span class="line">delete[] this-&gt;EmpArray; </span><br><span class="line">this-&gt;EmpArray = newSpace; </span><br><span class="line">this-&gt;Empnum = newSize; </span><br><span class="line">this-&gt;FileIsEmpty = false; </span><br><span class="line">cout &lt;&lt; &quot;成功添加&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save(); //保存数据到文件中</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;输入数据有误&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::save()</span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(FILENAME, ios::out);</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; this-&gt;EmpArray[i]-&gt;Id &lt;&lt; &quot; &quot;</span><br><span class="line">    &lt;&lt; this-&gt;EmpArray[i]-&gt;Name &lt;&lt; &quot; &quot;</span><br><span class="line">    &lt;&lt; this-&gt;EmpArray[i]-&gt;Deptid &lt;&lt; endl;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Workermanager::GetEmpnum()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int num=0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::init_Emp()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int deptid;</span><br><span class="line">int index = 0;</span><br><span class="line">while (ifs &gt;&gt; id&amp;&amp;ifs &gt;&gt; name&amp;&amp;ifs &gt;&gt; deptid)</span><br><span class="line">&#123;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">if (deptid == 1)</span><br><span class="line">&#123;</span><br><span class="line">worker = new employee(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else if (deptid == 2)</span><br><span class="line">&#123;</span><br><span class="line">worker = new manage(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">worker = new boss(id, name, deptid);</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i]-&gt;Showinfo(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;要删除的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int index = this-&gt;Isexit(id);</span><br><span class="line">if (index != -1) </span><br><span class="line">&#123;</span><br><span class="line">for (int i = index; i &lt; this-&gt;Empnum - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[i + 1]; </span><br><span class="line">&#125;</span><br><span class="line">this-&gt;Empnum--; </span><br><span class="line">this-&gt;save(); </span><br><span class="line">cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;删除失败，未寻找到该职工&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Workermanager::Isexit(int id)</span><br><span class="line">&#123;</span><br><span class="line">int index = -1;</span><br><span class="line">for (int i = 0; i &lt; this-&gt;Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">index = i; </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入修改职工的编号：&quot; &lt;&lt; endl;</span><br><span class="line">int id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">int ret = this-&gt;Isexit(id);</span><br><span class="line">if (ret != -1) </span><br><span class="line">&#123;</span><br><span class="line">delete this-&gt;EmpArray[ret]; </span><br><span class="line">int newId;</span><br><span class="line">string newName;</span><br><span class="line">int dSelect;</span><br><span class="line">cout &lt;&lt; &quot;查到： &quot; &lt;&lt; id &lt;&lt; &quot;号职工，请输入新职工号： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newId;</span><br><span class="line">cout &lt;&lt; &quot;请输入新姓名： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newName;</span><br><span class="line">cout &lt;&lt; &quot;请选择该员工岗位： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.员工&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.经理&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;3.总裁&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dSelect;</span><br><span class="line">worker *worker = NULL;</span><br><span class="line">switch (dSelect)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">worker = new employee(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">worker = new manage(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">worker = new boss(newId, newName, dSelect);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">this-&gt;EmpArray[ret] = worker; </span><br><span class="line">cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;修改失败，查无此人&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::fine_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入查找的方式： &quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号查找&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工姓名查找&quot; &lt;&lt; endl;</span><br><span class="line">int input = 0;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工编号： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; id;</span><br><span class="line">  int ret = Isexit(id);</span><br><span class="line">  if (ret != -1)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，该职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  this-&gt;EmpArray[ret]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125; //c/c++中switch语句出现定义需用大括号括起来</span><br><span class="line">case 2:</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  cout &lt;&lt; &quot;请输入查找的职工姓名： &quot; &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  bool flag = false;  </span><br><span class="line">  for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">  if (this-&gt;EmpArray[i]-&gt;Name == name)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查找成功，职工编号为：&quot; &lt;&lt; this-&gt;EmpArray[i]-&gt;Id</span><br><span class="line">       &lt;&lt; &quot;号职工信息如下： &quot; &lt;&lt; endl;</span><br><span class="line">  flag = true;</span><br><span class="line">  this-&gt;EmpArray[i]-&gt;Showinfo();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (flag == false)</span><br><span class="line">  &#123;</span><br><span class="line">  cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Workermanager::sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件不存在或为空&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;请选择排序方式：&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.按职工编号进行升序&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2.按职工编号进行降序&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">for (int i = 0; i &lt; Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">int minORmax = i;</span><br><span class="line">for (int j = i + 1; j &lt; this-&gt;Empnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&gt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">if (this-&gt;EmpArray[minORmax]-&gt;Id&lt;this-&gt;EmpArray[j]-&gt;Id)</span><br><span class="line">minORmax = j;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (i != minORmax)</span><br><span class="line">&#123;</span><br><span class="line">worker *temp = this-&gt;EmpArray[i];</span><br><span class="line">this-&gt;EmpArray[i] = this-&gt;EmpArray[minORmax];</span><br><span class="line">this-&gt;EmpArray[minORmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;排序成功，排序后结果为：&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;save();</span><br><span class="line">this-&gt;show_Emp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Workermanager::clean_File()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;确定清空？&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;1.确定&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;0.返回&quot; &lt;&lt; endl;</span><br><span class="line">int input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">&#123;</span><br><span class="line">  ofstream ofs(FILENAME, ios::trunc); </span><br><span class="line">  ofs.close();</span><br><span class="line">  if (this-&gt;EmpArray != NULL)</span><br><span class="line">  &#123;</span><br><span class="line">  for (int i = 0; i &lt; this-&gt;Empnum; i++) </span><br><span class="line">  &#123;</span><br><span class="line">  delete this-&gt;EmpArray[i];</span><br><span class="line">  this-&gt;EmpArray[i] = NULL;</span><br><span class="line">  &#125;</span><br><span class="line">  delete[] this-&gt;EmpArray; </span><br><span class="line">  this-&gt;EmpArray = NULL;</span><br><span class="line">  this-&gt;Empnum = 0;</span><br><span class="line">  this-&gt;FileIsEmpty = true;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line">case 0:</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">cout &lt;&lt; &quot;输入选项有误&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Workermanager::~Workermanager()</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;EmpArray != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delete[] this-&gt;EmpArray;</span><br><span class="line">this-&gt;EmpArray = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“职工管理系统-cp"><a href="#“职工管理系统-cp" class="headerlink" title="“职工管理系统.cp"></a>“职工管理系统.cp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;workermanager.h&quot;</span><br><span class="line">#include&quot;boss.h&quot;</span><br><span class="line">#include&quot;employee.h&quot;</span><br><span class="line">#include&quot;manage.h&quot;</span><br><span class="line">#include&quot;worker.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Workermanager WM;</span><br><span class="line">int input;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">WM.Show_menu();</span><br><span class="line">cout &lt;&lt; &quot;请输入你的选择:&gt;  &quot;;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line">switch (input)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">WM.Exit();</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">WM.Add_Emp();</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">WM.show_Emp();</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">WM.del_Emp();</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">WM.mod_Emp();</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">WM.fine_Emp();</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">WM.sort_Emp();</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">WM.clean_File();</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">system(&quot;cls&quot;); </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-项目目的&quot;&gt;&lt;a href=&quot;#一-项目目的&quot; class=&quot;headerlink&quot; title=&quot;一. 项目目的&quot;&gt;&lt;/a&gt;一. 项目目的&lt;/h2&gt;&lt;p align=left&gt;运用c++实现一个基于多态的职工管理系统&lt;/p&gt;
&lt;p align=left&gt;该系</summary>
      
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/categories/c/"/>
    
    
    <category term="c++小项目" scheme="https://vaioretto1.github.io/tags/c-%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://vaioretto1.github.io/posts/d87f7e0c.html"/>
    <id>https://vaioretto1.github.io/posts/d87f7e0c.html</id>
    <published>2022-10-10T15:00:14.000Z</published>
    <updated>2022-12-30T03:36:36.589Z</updated>
    
    
    
    
    
    <category term="c++" scheme="https://vaioretto1.github.io/tags/c/"/>
    
  </entry>
  
</feed>
